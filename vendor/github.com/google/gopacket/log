commit 32ee38206866f44a74a6033ec26aeeb474506804
Author: hallelujah-shih <sh19871122@gmail.com>
Date:   Sat Aug 6 09:55:03 2022 +0800

    add af-packet support ebpf filter

commit 65a1dfb3db2ad85763f26417f8699486bc253369
Author: Chris Golden <cirego@gmail.com>
Date:   Sat Aug 6 22:35:06 2022 -0700

    Fix two panics identified by fuzz testing
    
    This commit adds additional bounds checking, one for DNSResourceRecord
    and another for DNSQuestion. The DNSResourceRecord panic was observed in
    production and the second panic was caught by fuzzing.
    
    Add a fuzz test with seeds to reproduce these two panics.

commit 4e29164ddb69a54f163a35f3c570ddaf275b9f26
Author: נυαη נυαηѕση <john@dewey.ws>
Date:   Fri Aug 5 17:15:38 2022 -0700

    Add Geneve SerializeTo support
    
    Added missing SerializeTo functionality to Geneve.
    
    Fixes: #1043

commit 3eaba08943250fd212520e5cff00ed808b8fc60a
Author: fathi <fethibensari@gmail.com>
Date:   Thu Apr 29 16:22:48 2021 +0100

    fix the Bridge priority bugs

commit 96c9baa0b1ff7f6d157afc062f2a437f0a43b078
Author: fathi <fethibensari@gmail.com>
Date:   Wed Apr 28 23:59:44 2021 +0100

    remove uneccesary example

commit e1546f6ee18027f1f34a7068e7418096188fde11
Author: fathi <fethibensari@gmail.com>
Date:   Wed Apr 28 23:36:11 2021 +0100

    add unit tests to stp protocol implementation

commit 17c430cac94ac6a28dd3e5357c46542a0f7bdf7b
Author: fathi <fethibensari@gmail.com>
Date:   Wed Apr 28 00:01:02 2021 +0100

    add the stp implementation test on real packet data

commit 6039c945ba2832833323508e51a76d5b64811fc2
Author: fathi <fethibensari@gmail.com>
Date:   Tue Apr 27 21:16:16 2021 +0100

    adjust the STP fields name

commit 2a3c09e4858c8b962f85535da9be3b71838c7bd6
Author: fathi <fethibensari@gmail.com>
Date:   Tue Apr 27 18:59:39 2021 +0100

    Finish stp layer implementation.

commit 65873e69004d1d4f3d72052fa8473c0b01af344e
Author: Herman Slatman <hermanslatman@gmail.com>
Date:   Fri Apr 16 16:37:44 2021 +0200

    Add MUD URL DHCPv4 option

commit 3aa782ce48d4a525acaebab344cedabfb561f870
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 9 09:59:29 2021 -0600

    Add a stress-test for bitfield, and use fast ops.
    
    I expect the compiler would handle the fast ops for us regardless most
    of the time, but doing the bit-magic anyway to be safe.

commit 4febce153c1f7ac07b3edbe782cdf2ea577344f3
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Wed Apr 7 15:46:07 2021 +0200

    layers: use bitfield and map instead of 64k array for {tcp,udp}PortLayerType
    
    tcpPortLayerType and udpPortLayerType each unconditionally allocate 64k.
    This happens when importing the package (i.e. at init time) even if the
    functionality is never used. Instead, use a switch for the known layer
    types and maps to store the registered overrides. Additionally use a
    bitfield, storing whether a particular port holds an override to speed
    up the case of not-matching-existing layers.

commit 4f0fd8e2c65c472ac1ceed69dd717d2ac3373477
Author: Tucker Owens <tuckerowens@aol.com>
Date:   Mon Apr 5 13:21:32 2021 -0400

    Fixes "Adverstise" typo in layers/dhcpv6.go

commit 63a9db2619f5bc9b691ceba2e2ace2e116da5a7e
Merge: 20562ff 58ec394
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Apr 5 10:08:20 2021 -0600

    Merge pull request #848 from ophum/fix/routing-constructor-and-route-method
    
    fix getting route method, and fix constructer implements

commit 58ec394b35b6754a007ca68a19f4d89a9c7614b4
Merge: 65f8fcd 20562ff
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Apr 5 09:35:33 2021 -0600

    Merge branch 'master' into fix/routing-constructor-and-route-method

commit 20562ffb40f852c012026c2c0a9550f2aec39a9e
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Tue Feb 2 21:55:28 2021 +0100

    reassembly: fix tests - set internal ports
    
    The connection key is constructed from net flow and transport flow.
    Transport flow will not be correctly created from layers.TCP
    struct, if internal sPort and dPort are not set.
    
    SetInternalPortsForTesting should be used to set those, before
    calling Assemble* functions

commit 69aed03b2828ae5a368a0c723ea68407acd8f8b2
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Tue Sep 17 21:40:19 2019 +0600

    reassembly: use sync.Pool to allocate pages
    
    - Fixes the issue of inefficient memory consumption for long running
      applications

commit 5e9386daabed8e310d37d6987ce5053c8b9aecd9
Author: Alexander Constantinescu <aconstan@redhat.com>
Date:   Fri Feb 19 20:56:21 2021 +0100

    Fix var name collision in arpscan.go

commit c21ea896c1833131ad9efcffb2db7b89737cbb15
Author: Mashaz <xiaohuahu94@gmail.com>
Date:   Sun Feb 7 00:48:49 2021 +0800

    Fix pointer error in for loop

commit 59a565e7bdbdd7eed315840c62e0831adb19d203
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Wed Feb 3 01:21:04 2021 +0100

    layers/gtp: remove debug println

commit f40e03e3e8261c1780c888c310959e7aefa8d6f2
Author: Jonas Bostoen <jonas.bostoen@hotmail.com>
Date:   Fri Jan 22 21:18:40 2021 +0100

    Fix for loop in ips

commit 3998810ab877600a6b66d3b0d17bb6197943f795
Author: Jonas Bostoen <jonas.bostoen@hotmail.com>
Date:   Fri Jan 22 21:10:36 2021 +0100

    Format ips function

commit d4bf0b168a2fdcf2d825ce11eacafe90e0abedab
Author: Jonas Bostoen <jonas.bostoen@hotmail.com>
Date:   Fri Jan 22 20:41:12 2021 +0100

    Update function to get all hosts on the subnet

commit 65f8fcd6e2d99071619e22595fdab769318e385d
Merge: 873c589 0d0933d
Author: ophum <inagaki0106@gmail.com>
Date:   Thu Jan 7 11:41:24 2021 +0900

    Merge branch 'master' into fix/routing-constructor-and-route-method

commit 0d0933d15ffc4c07d065f45a580d4ae1007c1de4
Merge: d76a41a ed31aa7
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 6 11:19:58 2021 -0700

    Merge pull request #634 from kulinacs/router_interfaces
    
    Switch router interfaces to map

commit ed31aa7b1bb7a466a09a2c83e53ccb08ab24581b
Merge: 5cb2df8 d76a41a
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 6 11:14:33 2021 -0700

    Merge branch 'master' into router_interfaces

commit 873c589dbba98a4eef0f287a927afa5953bfb6f9
Author: Takahiro Inagaki <inagaki0106@gmail.com>
Date:   Wed Jan 6 19:49:46 2021 +0900

    update travis script

commit 57f19fdf327ce67e420cc573fa908fd7931f263e
Author: Takahiro Inagaki <inagaki0106@gmail.com>
Date:   Wed Jan 6 19:30:06 2021 +0900

    add routing test

commit 259932a4fa63b76cf2664ad255ef3b81b3d17c41
Author: Takahiro Inagaki <inagaki0106@gmail.com>
Date:   Wed Jan 6 16:03:19 2021 +0900

    add test script

commit 4a9a16002d6b3a0980c33e5acf218ca491c71fc5
Author: Takahiro Inagaki <inagaki0106@gmail.com>
Date:   Wed Jan 6 15:58:33 2021 +0900

    add test of route()

commit a0bf7fd45b3d65fd7c494b87eec6d57ef2cb9ef8
Author: ophum <inagaki0106@gmail.com>
Date:   Sun Dec 27 17:45:30 2020 +0900

    fix getting route method, and fix constructer implements

commit d76a41ae9587fb067568e5b549de4b2dc11825eb
Author: Te-Yu Chang <teyuchang.eecs02@g2.nctu.edu.tw>
Date:   Mon Nov 18 15:09:05 2019 +0800

    replace slice with map

commit ad96caa6e937a371fe1fe95efadbb577a48bf9d5
Author: chenshaohua.csh <chenshaohua.csh@bytedance.com>
Date:   Thu Nov 19 11:22:03 2020 +0800

    ci: add test case

commit b2f7d88c0cadc636c2e0138fdc71021576616497
Author: Luis Landeiro Ribeiro <luis.ribeiro@pdmfc.com>
Date:   Wed Oct 28 09:36:22 2020 +0000

    added CanDecode method so ModbusTCP can be used in the gopacket.DecodingLayerContainer as it's required by the DecodingLayer interface

commit 7b398e8f64b9ac6ec214af0c725730ef680db7c4
Author: chenshaohua.csh <chenshaohua.csh@bytedance.com>
Date:   Wed Nov 18 22:10:20 2020 +0800

    fix dns parse error: rr.data could be nil

commit a9779d139771f6a06fc983b18e0efd23ca30222f
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Wed Oct 14 01:37:16 2020 +0600

    reassembly: fix check overlap for case 6

commit 78e86bc818e8a87566004e5705e6e01bfd75b1a8
Author: takumin <takumiiinn@gmail.com>
Date:   Thu Sep 17 12:14:24 2020 +0900

    Enhanced boundary checking for RADIUS Length fields

commit aebf769c545886f6bacba13ef14b8208fa89151d
Author: takumin <takumiiinn@gmail.com>
Date:   Fri Sep 11 01:48:18 2020 +0900

    Initial implemented RADIUS Protocol

commit 7c3626525cc0816fa61561fe84cf19e8cbcbe14b
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Wed Sep 30 22:57:06 2020 +0200

    Add LLDP testcase

commit ea94860ff93db4c0b3695fe3fa760dd9f5e1342c
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Wed Sep 30 22:03:01 2020 +0200

    Fix LLDP Mgmt OID decoding
    
    Uses the correct offset and also fixes the length check to avoid
    out-of-bounds reads. Fixes #797

commit 6bf70f9bd488d72a2b20caca149a7f55c826532e
Author: Lehner Florian <dev@der-flo.net>
Date:   Wed Sep 30 21:20:23 2020 +0200

    Don't ignore error cases
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit b320e38dcc96f88da4ada9b529218f422d4fb1b7
Author: Lehner Florian <dev@der-flo.net>
Date:   Wed Sep 30 21:09:08 2020 +0200

    Remove unused functions and consts
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit a7542c9e5eef0608b6c06f21cb6bf78d3d1cf048
Author: Kevin Ku <kevin@akitasoftware.com>
Date:   Mon Sep 28 15:31:07 2020 -0700

    fix

commit 62ace14fa0f20033f89ac3097f461508f2000295
Author: Kevin Ku <kevin@akitasoftware.com>
Date:   Mon Sep 28 15:17:44 2020 -0700

    commetn test

commit 57d03ade71d6ca74c694ef867bc1b120d4c95699
Author: Kevin Ku <kevin@akitasoftware.com>
Date:   Mon Sep 28 15:10:38 2020 -0700

    simplify test

commit 921111aa30d80233b2b6a5c78a38cadb463a5e49
Author: Kevin Ku <kevin@akitasoftware.com>
Date:   Mon Sep 28 15:01:17 2020 -0700

    add test

commit 1211f9c04359dde882d2cd131d59635bda8bcc11
Author: Colin Newell <colin.newell@gmail.com>
Date:   Fri May 15 23:00:03 2020 +0100

    Update example to compile.
    
    Also pass through the address info to print to make it clear that's
    available.

commit 142eb2d05340de1143fdb5fd48dc2f0b3084a020
Author: Dan Root <rootdan@gmail.com>
Date:   Mon Jun 22 01:13:57 2020 +0000

    Make SIP.Get(First)Header work with compact headers
    
    GetHeader and GetFirstHeader utility functions now access both full and
    compact header forms, regardless of which form the underlying message
    contains.
    
    Also remove some repetitiveness between GetHeader and GetFirstHeader,
    by making the latter use the former.
    
    Includes a new test packet with compact form headers to test against.

commit 524074763af35b2804077bc89e62e257215ae332
Author: Herman Slatman <hermanslatman@gmail.com>
Date:   Tue Aug 4 20:44:32 2020 +0200

    Add serializatoin of non-mandatory LLDP TLVs

commit f815f794877125111ea338dbac64c8201ee2f84f
Author: praveen <praveen.bsd@gmail.com>
Date:   Fri Aug 14 11:22:50 2020 +0530

    handled error in RouteWithSrc

commit c29e95304b3f51badb5d412d83dc560e24acf26e
Author: Jensen Hwa <30474284+jensenhwa@users.noreply.github.com>
Date:   Tue Aug 25 12:01:03 2020 -0400

    Improve FixLengths handling

commit 9c4a17f6a616d5decb13d303fc186a267fb70659
Author: Jürgen Krutzler <juergen.krutzler@travelping.com>
Date:   Thu Aug 27 12:29:14 2020 +0200

    continue on PR#484
    * add erspan TypeII Ethertype to enums.go
    * add erspan TypeII to layertypes
    * add needed functions to erspan2.go
    * update erspan2_test.go

commit df1bbd09a56154336515b057a4d1baead45c6543
Author: Kevin Ku <kku1993dev@gmail.com>
Date:   Tue Apr 21 11:24:12 2020 -0700

    reassembly: Fix offset calculation in reassemblyObject.CaptureInfo
    
    CaptureInfo is supposed to return info of packet corresponding to the
    given offset. The current implementation does not take the livePacket
    or page length into account, so any offset other than the first offset
    of a packet will get the CaptureInfo of the next packet.
    
    This PR also removes a redundant `CaptureInfo` field within
    `livePacket`.

commit d46e8ebab9d864ee7ac8db87928a5112eb260eae
Author: Jensen Hwa <30474284+jensenhwa@users.noreply.github.com>
Date:   Mon Aug 24 23:44:31 2020 -0400

    Add TLS layer serialization; bugfixes for layer memory reuse

commit f6e4e27b60dac73f4b0bb72b38789094f1a99259
Author: Brock Meadors <bmeadors@users.noreply.github.com>
Date:   Wed Aug 19 11:16:53 2020 -0700

    Slice data to truncate any additional undesired bytes (#816)

commit 5e49d8961df06368385353c8be68fa1051e9fa95
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 3 17:40:05 2020 -0600

    Yet more length checks.

commit 0451ff97c4457171090e5d74949b4993fc7a1d04
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 3 17:28:17 2020 -0600

    Fix more length issues.

commit 074336d2d31c38718be0b10713b8e3302e0a6c34
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 3 16:59:30 2020 -0600

    Random fixes to layer lengths.

commit 558173e197d46ae52f0f7c58313c96296ee16a9c
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Jul 21 18:22:32 2020 -0600

    Fix Fatal->Fatalf in reassembly example.

commit 684b744b6eefcb95902094045918314c044a94b1
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Jul 21 18:21:22 2020 -0600

    New valid MAC prefixes.

commit 93c40702a319cfb90bde103989936b1989bec985
Author: Maxim Tyapkin <kell.gvd@gmail.com>
Date:   Sat Jul 18 16:33:35 2020 +0300

    fix pcap panic if more than 1024 fd open

commit 914d8955fc258b9a501fa5e227117c4cd293f981
Author: vinhjaxt <ngoc.lo.dang@gmail.com>
Date:   Wed Jul 8 15:37:43 2020 +0700

    Fix bidirectional/main.go
    
    Should be s.bidi.lastPacketSeen.Before(r.Seen) instead of s.bidi.lastPacketSeen.After(r.Seen)

commit 403ca653c45d1cde891a99c417c2b4b7fe93dce7
Author: Renny Koshy <rkoshy@gmail.com>
Date:   Fri Jan 10 13:12:19 2020 -0500

    Update sip.go
    
    Changed the decodeFromBytes() to mark SIP packets as truncated, if the parser hits a line that is not terminated by a CR-LF.

commit f9b0fb80243e84c17f656f9e84e859f24f8a44d4
Author: Dan Murphy <dan@netography.com>
Date:   Sun Dec 29 11:31:23 2019 -0500

    fix typo in layer name

commit 139c17b239037d777930e1a3e313bac214caeb3f
Author: Dan Murphy <dan@netography.com>
Date:   Sun Dec 29 11:05:24 2019 -0500

    moved parsing into a DecodeFromBytes function and added NextLayerType so this layer could be used with DecodingLayerParser etc

commit a83d5be3a7a49b54dbe6a0c55fd10abd833f3aa2
Author: Bill Johnson <436997+dubrie@users.noreply.github.com>
Date:   Thu May 7 16:40:39 2020 -0700

    Update sflow.go
    
    Fixing 'avaialble' typo

commit 016bb4b7b7e23c6b3e14147231f64dc72e1190be
Author: Philippe Antoine <contact@catenacyber.fr>
Date:   Mon Dec 16 09:16:57 2019 +0100

    Comments taken into account

commit 4a4ca0b5de9c7f63fb403878a436de824e42f8be
Author: Philippe Antoine <contact@catenacyber.fr>
Date:   Fri Dec 13 08:32:07 2019 +0100

    Adds a fuzz target starting from every layer

commit 1d829e51f0c85294eeedb06477a6d369fb5be0ea
Author: trashbo4t <trashbo4t@protonmail.com>
Date:   Fri May 1 13:05:16 2020 -0400

    setting dhcpv4 contents

commit 5cb2df81d13bf22c9efcb882cb2a43ec6f91801e
Author: Nicklaus McClendon <nicklaus@kulinacs.com>
Date:   Sat Feb 8 18:14:13 2020 -0600

    Store pointers to interfaces in router map

commit acf5713f69a6d7d46793de01046a2e72f6c2d84f
Merge: 0023122 9b2e606
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Feb 10 22:43:00 2020 +0100

    Merge pull request #753 from tklauser/remove-unused
    
    layers: remove unused func errorFunc

commit 00231222293e0b3068ad5e1c1f0d64b5b5b5a09f
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Feb 10 20:45:27 2020 +0100

    Disable windows on travis

commit 9b2e606e5ffef98ab463d19fdf24bb04e3ff5f9e
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Mon Feb 10 11:18:59 2020 +0100

    layers: remove unused func errorFunc
    
    It is unused since commit 8c5cfc5ae25c ("Attempt to reduce memory usage
    caused by enums.go strings.")
    
    Signed-off-by: Tobias Klauser <tklauser@distanz.ch>

commit 51fd5dd820cba36f3fbdf5765d9435cecdb59ef8
Author: Nicklaus McClendon <nicklaus@kulinacs.com>
Date:   Tue Apr 9 19:18:19 2019 -0500

    Switch router interfaces to map
    
    Switch router interfaces to a map to support discontinuous
    interface ids. Fixes #222

commit 0ad7f2610e344e58c1c95e2adda5c3258da8e97b
Author: Dan Root <rootdan@gmail.com>
Date:   Wed Oct 9 09:37:24 2019 -0700

    Set BaseLayer.Contents correctly in SIP layer. (#702)
    
    Make layers.SIP.LayerContents() work correctly, returning the full SIP
    message.

commit 9c4d65e94a7f5afe59f7ffc3c30a5e40e36570e6
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Wed Oct 9 18:35:23 2019 +0200

    Extract extended DNS Rcode from OPT record (#716)
    
    * Extract extended DNS Rcode from OPT record

commit 5d8084036064d14fd0a27ef1e10ec91c2526aa6f
Author: Christian Mehlmauer <FireFart@users.noreply.github.com>
Date:   Wed Oct 9 17:51:12 2019 +0200

    add descriptive error message on activate (#718)

commit 991e069c3f085b6f1050e24cb5d0141c7effddf9
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Mon Oct 7 21:26:23 2019 +0200

    Add support for the URI DNS RR Type (RFC7553) (#713)

commit af79803c5d6ac87b9cb50759e6d61f40cef167e8
Author: John Floren <john@jfloren.net>
Date:   Mon Oct 7 10:03:22 2019 -0600

    Make layers.Dot11's DecodeFromBytes method properly reset the structure. (#694)
    
    Sets the DataLayer field to nil at the start of DecodeFromBytes. This appears to fix #693.

commit d3896096dccd01f640f8c1470c311feef18d2c64
Author: Christian Svensson <blue@cmd.nu>
Date:   Mon Oct 7 13:31:01 2019 +0200

    enums: Add FC2 link types (#712)
    
    These link types are defined in libpcap as
    
      Fibre Channel FC-2 frames, beginning with a Frame_Header.
      #define DLT_FC_2              224
    
    as well as:
    
      Fibre Channel FC-2 frames, beginning with an encoding of the
      SOF, and ending with an encoding of the EOF.
      #define DLT_FC_2_WITH_FRAME_DELIMS    225

commit 33810c487ced200c983df5c45e3ebd2adc404b71
Author: Alexander Hartl <alx.hartl@gmx.at>
Date:   Thu Sep 26 12:26:31 2019 +0200

    Add length checks in DecodeFromBytes() (#701)
    
    * Add several length checks

commit 2d7fab0d91d6bb77c1df6bdeb222270a2aa13820
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Sep 12 19:32:03 2019 +0200

    windows: Narrow down search paths for wpcap.dll (#691)
    
    This prevents dll hijacking (placing a dll name wpcap.dll into the
    application folder).
    This fixes #690

commit cb7362c028ac21f440b08ef015fde6b4361c32dc
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Sep 12 10:05:32 2019 +0200

    Add go1.13 to ci test

commit 8c861fbb4d22de4b1b40277980f61a4ee204dac1
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Sep 12 09:57:06 2019 +0200

    Fix CI-testing
    
    - Change minimum go version due to sys/unix. This fixes #704
    - Use npcap instead of nmap on windows (fixes abuse errors on travis)
    - Fix gofmt error introduced in #689

commit c340012d34adb8462b1e23ad4d7a73944f4224b8
Merge: 7cc6592 bb3736f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jul 31 13:29:47 2019 -0600

    Merge pull request #689 from gconnell/master
    
    Update macs.

commit bb3736fa43a82261e7efc04e8221edc6eae6a7a2
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jul 31 13:24:52 2019 -0600

    Update macs.

commit 7cc6592eca24b42f05b6d13a5521d9d2558cf53b
Author: Rob Kulseth <rob.kulseth@gmail.com>
Date:   Tue Jul 23 05:17:15 2019 -0500

    Added support for writing pcaps with nanosecond timestamp (#684)

commit 8a7322b2fdb677dcd708afbede14e520f8b61d8a
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Jul 22 16:37:50 2019 +0200

    Fix tcp option decoding to stop at end of options.
    
    This fixes #680

commit 0a27d391785f85784982d3c514735c57cefebed5
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Jul 22 07:42:13 2019 +0200

    Small documentation fix. This fixes #679

commit 4d428e306a36028b0b436ac769dece5b83c0d524
Author: Takanori Hirano <hrn.takanori@gmail.com>
Date:   Sun Jul 14 00:50:13 2019 +0900

    Support RouterV2 details for ospf LSA type1

commit ce2e696dc0c9917ecdebd800c892b839f06b2949
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jul 11 08:42:57 2019 +0200

    Move pcapBpfProgram to it's own heap allocated structure.
    
    This fixes #664 for all compilers before go1.14.

commit da08d538c2bdf93ad103777b9a780b48d251258f
Merge: 0d3e90a a98686f
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Jun 30 11:29:00 2019 +0200

    Merge branch 'rjrivero-issue-669'
    
    This fixes #669

commit a98686f7c04aec3bff0d1b7e737bffa1be8ae2a1
Merge: 0d3e90a b4ac480
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Jun 30 11:27:00 2019 +0200

    Merge branch 'issue-669' of https://github.com/rjrivero/gopacket into rjrivero-issue-669

commit 0d3e90a5c18fb03b8d75d83c7e68c72ae6f7c85a
Author: Rafael Rivero <rafael.j.rivero@gmail.com>
Date:   Sun Jun 30 10:58:33 2019 +0200

    Fixes issue 668 - fail to read OSPFv2 LSA Type 2 (#671)
    
    This PR adds a new NetworkLSAV2 struct following RFC 2328 A.4.3, and a new test case for it.
    This closes #668

commit a24a85a118bc9670bb196a1d3a3f83571d4a019a
Merge: 836b571 3598407
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Jun 30 10:50:56 2019 +0200

    Merge pull request #677 from yerden/decoding-layer-container
    
    add DecodingLayerContainer documentation

commit 3598407c7cbbd5df36ab1bf2ff161054c30e0cfb
Author: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>
Date:   Sat Jun 29 11:37:30 2019 +0600

    add DecodingLayerContainer documentation
    
    Signed-off-by: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>

commit b4ac480e4c33185f37ec583e691ae693c2ed302e
Author: Rafa <rafael.j.rivero@gmail.com>
Date:   Sat Jun 22 15:51:36 2019 +0200

    Fix issue #669

commit 836b571ec913f74022809b997ad331ebbf1033d9
Merge: 25de703 6caa7d0
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jun 20 09:17:46 2019 +0200

    Merge pull request #660 from yerden/decoding-layer-container
    
    parser: accelerate DecodingLayerParser

commit 6caa7d08c2c8aec841059d2f3d1d1567c7a5f5e9
Author: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>
Date:   Sun Jun 2 15:12:03 2019 +0600

    layers: add DecodingLayerContainer tests
    
    Signed-off-by: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>

commit 04f6565bda0a7c4e84b3b3d6024cab497663674f
Author: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>
Date:   Sat Jun 1 15:44:08 2019 +0600

    parser: implement DecodeLayerContainer
    
    Changes:
    * add DecodingLayerContainer to contain/search DecodingLayer values:
      * add DecodingLayerFunc type as a decoder closure;
      * add DecodingLayerMap, DecodingLayerSparse, DecodingLayerArray
        as implementations of DecodingLayerContainer;
    * add code generation for the reference LayersDecoder method
      implementation.
    * refactor DecodingLayerParser:
      * use DecodingLayerMap by default;
      * add SetDecodingLayerContainer method to initialize parser.
    
    Signed-off-by: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>

commit 25de703c497802272c5566d0444106e289cdf7f0
Merge: 0f680da ce4ade5
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jun 13 22:54:33 2019 +0200

    Merge pull request #663 from gobwas/patch-1
    
    returning nil on error fix

commit 0f680daf16b80a573e90e62cd91ce8e02e72f9a4
Author: Ripx80 <ripx80@protonmail.com>
Date:   Mon Jun 10 10:00:33 2019 +0200

    implementing snoop file format with tests and benchmarks (#647)
    
    Implementing the snoop file format v2 (https://tools.ietf.org/html/rfc1761) following the structure of the pcap package.

commit ce4ade58c65374c1bafe3a8a524483849c19e605
Author: Sergey Kamardin <gobwas@gmail.com>
Date:   Fri Jun 7 10:59:30 2019 +0300

    returning nil on error fix

commit 72ef6fb8cba390df0e99f1b4dea4ea72b9f90f93
Merge: b7692f2 8d08f07
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue May 28 15:49:42 2019 -0600

    Merge pull request #658 from jandos/fix-double-release
    
    Fix double release bug in reassembly

commit 8d08f077f687d1974344454e8ba4772d35c28d9b
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Wed May 29 02:43:05 2019 +0600

    reassembly: add Late RST packet test for flush/close test

commit dec75d120660a0664c0bd5039e1195028fff6005
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Wed May 29 02:39:05 2019 +0600

    reassembly: Fix flushing data to a closed half-connection

commit b7692f204f70c657cb04aac99aa8c3ba3496a881
Author: George Brighton <gebn@users.noreply.github.com>
Date:   Sun May 26 20:41:11 2019 +0100

    Implement ASF and ASF Presence Pong layer types (#654)

commit b44962ba91c64dbed1f66a27e66fa629f47a655f
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 26 17:56:43 2019 +0200

    Fix test naming in rmcp

commit 1eff9aedaf0cb2e15b7eefcb8cea1a5e57f864d3
Merge: 6d3e261 05e1be1
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon May 20 09:08:39 2019 +0200

    Merge pull request #653 from gebn/rmcp
    
    Implement RMCP layer type

commit 05e1be1fd043b093d74a4e703db79180f524a4e4
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 19 18:59:11 2019 +0100

    Avoid naming collision with other layers

commit f0b9be830834faf741ae8770b1aff777267e4bf3
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 19 17:45:52 2019 +0100

    Add note about RMCP pad byte

commit b520fd7b37e9cc874851f9abd397d5569d636e4d
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 19 17:14:48 2019 +0100

    Zero-out byte when serialising
    
    > Byte slices returned by PrependBytes/AppendBytes are NOT zero'd
    > out, so if you want to make sure they're all zeros, set them as
    > such.

commit 0751999511c94faaa65f65d921adc3b276f6584d
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 19 17:12:25 2019 +0100

    Remove unused receiver

commit de2b7532859d5bd0c767d8adbe9087c2380068f0
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 19 17:12:11 2019 +0100

    Fix typos in documentation

commit 117c184e754cda1496b71e2ace9e8e2e4cd4ad3e
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 19 17:11:41 2019 +0100

    Move decodeRMCP() to bottom of file for consistency with other layers

commit 171740a39e0001aae1d4213e3eb27e97fe97fff1
Author: George Brighton <george@gebn.co.uk>
Date:   Sun May 12 21:39:14 2019 +0100

    Implement RMCP layer type

commit 6d3e2615da4ed2ed2a349918fe74e7e6d03482fa
Merge: c403482 a9c3e6e
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu May 9 19:39:10 2019 +0200

    Merge pull request #649 from Lightspeed-Systems/dnsencodeblankq
    
    Proper size calculation for encoded question name

commit c403482100a901921c5aa844108121c8e43cb82e
Merge: 1cc6767 01d6753
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu May 9 19:29:23 2019 +0200

    Merge pull request #650 from Lightspeed-Systems/dnsdecodeblankname
    
    Loosen error checking to allow blank DNS name fields which can be valid

commit 01d6753a300e999c58dd609973ff9ea8e84947a9
Author: Brock Meadors <brock@lightspeedsystems.com>
Date:   Thu May 9 09:52:27 2019 -0700

    Renamed test TestMalformedRootQuery to TestBlankNameRootQuery since packet is not malformed

commit 1cc67674b1e82f39942b7db642407d816cbdbb64
Author: HD Moore <x@hdm.io>
Date:   Thu May 9 11:18:06 2019 -0500

    Handle ErrFileClosing in packetsToChannel() (#625)

commit 4b0e11667d8dd88dbe02400c7fcb44a26f3809cd
Author: Brock Meadors <brock@lightspeedsystems.com>
Date:   Tue May 7 11:56:51 2019 -0700

    Updated DNS layer test to ignore invalid name on decode

commit 6eef11e26c8c0772cc627edf0fb231ad8eda357b
Merge: 9b91e8d 64ef138
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue May 7 09:52:14 2019 +0200

    Merge pull request #646 from tklauser/fanout-consts
    
    afpacket: use PACKET_FANOUT_* consts from x/sys/unix

commit 64ef13805c313a7eb13ea96d6e349381143c18d0
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Tue May 7 08:19:43 2019 +0200

    afpacket: use PACKET_FANOUT_* consts from x/sys/unix
    
    Use the unix.PACKET_FANOUT_* constants to define FanoutType values and
    add missing values.
    
    Signed-off-by: Tobias Klauser <tklauser@distanz.ch>

commit 9b91e8d2becc9edce0db9343270ee91c963451ec
Merge: 0c5150f 41b2b76
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon May 6 17:45:08 2019 +0200

    Merge pull request #642 from safchain/fix-sflow-portname
    
    Fix sflow portname record decoding

commit 0c5150fed32ffa8a3c71d46bef15499fafc807e6
Merge: b6b5cc9 bfdeda3
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon May 6 09:11:35 2019 +0200

    Merge pull request #627 from boypt/patch-1
    
    fix: unix.Timespec/Timeval member type various

commit b6b5cc92519746352075d40fff9b9b6013d1f592
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 20:15:19 2019 +0200

    Update version requirements

commit f251486b943bb7e892292bf7576eff311d346c0c
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 19:58:44 2019 +0200

    Use modules in ci testing starting with go 1.11

commit 81f5b55f13784d8c63cc5faa55839aa3c44c7c4f
Merge: e18e851 7983feb
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 18:50:56 2019 +0200

    Merge pull request #632 from arnottcr/module
    
    all: add mod file

commit e18e85162d6edecfd03c7cfbb814d5a4c5bcbe28
Merge: 9cdc572 0908084
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 18:34:18 2019 +0200

    Merge branch 'ci'

commit 09080848f1d7811c73c41257571779f4a010985d
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 18:18:03 2019 +0200

    Improve ci testing
    
    All supported go versions + windows + osx are now tested

commit 2128f9a3d7c42d6607304e8cd75fcfb0b2d95472
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 18:17:38 2019 +0200

    pcapgo: Make ngread tests work on go 1.5

commit 39ceec91062f0b166b38a017b4cb68cf544d90b4
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 12:56:46 2019 +0200

    pcapgo: Fix tests for windows/osx and go 1.5/1.6

commit e4e88fc3951287102c1de4d1b0135d4850892491
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun May 5 15:41:31 2019 +0200

    reassembly: Fix testFlush to not use real time
    
    This can be problematic on travis ci with osx

commit 9cdc5728c43d3ec36ee7da21ce8f346a4d85f054
Merge: 767bf1e bc06772
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri May 3 10:14:05 2019 +0200

    Merge pull request #645 from tklauser/tpacket-consts
    
    afpacket: use constants from x/sys/unix instead of C headers

commit bc06772c32262e9099a423b1534c2da8d5ef8e03
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Fri May 3 08:42:37 2019 +0200

    afpacket: use constants from x/sys/unix instead of C headers
    
    The golang.org/x/sys/unix package provides all these constants so there
    is no need to use cgo to get them.
    
    Signed-off-by: Tobias Klauser <tklauser@distanz.ch>

commit bf19a786aec100559540830133473c02ebd8bc2d
Author: Brock Meadors <brock@lightspeedsystems.com>
Date:   Thu May 2 11:00:43 2019 -0700

    Loosen error checking to allow blank name fields which can be valid

commit a9c3e6ee9495d17ac6b2314127480b462fb64056
Author: Brock Meadors <brock@lightspeedsystems.com>
Date:   Thu May 2 10:51:35 2019 -0700

    Proper size calculation for encoded question name

commit 41b2b76a1ee6ce7534bf787b45aeaf43a9ef029c
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Fri Apr 19 17:37:13 2019 +0200

    Fix sflow port name record decoding
    
    string are encoded using the RFC 1014
    
    This patch also fix the unit test sample as
    seems to be corrupted.

commit 767bf1efb2b6b5050cbebe59c1a1cebd3397866f
Merge: 129b102 ebecdd8
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Apr 27 10:53:35 2019 +0200

    Merge pull request #635 from Galadros/EAPOLKeyCanDecode
    
    Added CanDecode() method for EAPOLKey

commit 129b1027c60461891bb17ce44826c7b444841a8f
Merge: a943179 f0e9d86
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Apr 27 10:52:51 2019 +0200

    Merge pull request #639 from Lightspeed-Systems/dnsencodepanic
    
    #638: Fix for serializing DNS packet panic with empty authority name

commit a943179b7e46979b4075171a267c879fd9593cf4
Merge: 1a2aa71 b62db92
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Apr 27 10:37:43 2019 +0200

    Merge pull request #643 from x-way/sip_decodelayer
    
    Implement DecodingLayer for SIP

commit b62db928a193be1ca6e0676fa452867bc1170333
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Thu Apr 25 05:00:20 2019 +0200

    Implement DecodingLayer for SIP
    
    Fixes #637

commit f0e9d8650de5b1e4ae05a22f94f5cbfea5912d9f
Author: Brock Meadors <brock@lightspeedsystems.com>
Date:   Thu Apr 18 16:52:56 2019 -0700

    Fix for crash when serializing DNS packet containing authority records having a blank (<Root>) name field

commit ebecdd86c193e014c284ca3804cef5e368c326ac
Author: Patrick Jones <pjones@802secure.com>
Date:   Wed Apr 17 13:20:00 2019 -0700

    Updated to match comment formatting

commit 250c6c6ef088be40b5a2506b8a1358b505ec4360
Author: Patrick Jones <pjones@802secure.com>
Date:   Wed Apr 10 12:49:24 2019 -0700

    Added CanDecode() method for EAPOLKey, which previously lacked that method

commit 1a2aa715ae412f434ae0bbb833442d14880cab8a
Merge: 2228ed3 3e0e9dc
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Apr 8 09:36:42 2019 +0200

    Merge pull request #633 from arnottcr/godoc-fixup
    
    pcap: correct NewBPF godoc to display code as codeblock

commit 3e0e9dc85c1fea1e010fc754702a46628e5280e3
Author: Colin Arnott <colin@urandom.co.uk>
Date:   Sun Apr 7 21:43:33 2019 +0000

    pcap: correct NewBPF godoc to display code as codeblock
    
    Fixes golang/gddo#596

commit 7983feb478a6b191ae7d28328534afbceead080c
Author: Colin Arnott <colin@urandom.co.uk>
Date:   Sun Apr 7 21:50:04 2019 +0000

    all: add mod file
    
    - [go modules](https://github.com/golang/go/wiki/Modules) will be enabled in 1.13.
    - after merge it would be nice if you would tag this repo: e.g. `v1.1.17`

commit 2228ed393a377c03e9750c3e1a817c7cc4e628e7
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Apr 6 23:00:16 2019 +0200

    Fix DNSResourceRecord string output. This fixes #631
    
    Class can't be used for DNSTypeOpt -> This field is used for udp payload
    size.
    Refrain from using strings.Builder as it requires go>=1.10

commit 20f6f223bfe4ddee58c4bda987d7f498f15d7549
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Apr 6 22:57:42 2019 +0200

    Improve EDNS OPT strings

commit 55d5ff8da23e4518f96cb0ceac0813522c3b9ecd
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Apr 6 22:56:28 2019 +0200

    Fix EDNS OPT decoding for multiple options

commit 53fdf8f3eeea1670c5edbe3630c4fe4a47a8fe3e
Merge: b758660 5adc418
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Apr 1 22:51:54 2019 +0200

    Merge pull request #626 from elchavar/edns
    
    Support for EDNS (RFC6891)

commit 5adc41826e1cfc233e47a6babaed8e61575ca539
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Mon Apr 1 13:48:50 2019 -0700

    Added length check and corresponding test.

commit bfdeda3a00346056574e6c4ace366e84be488f97
Author: Preston <pentie@gmail.com>
Date:   Thu Mar 28 15:07:54 2019 +0800

    fix: unix.Timespec/Timeval member type various
    
    `unix.Timespec`/`unix.Timeval` members are `int32` in 32-bit arch
     - https://github.com/golang/sys/blob/master/unix/ztypes_linux_arm.go#L24
     - https://github.com/golang/sys/blob/master/unix/ztypes_linux_386.go#L24
    
    But `time.Unix` always accept int64 arguments. Type casting is needed.

commit 60f2ca30340daa9c23b42bfc13bb160bd4546628
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Wed Mar 27 11:54:07 2019 -0700

    Fixed typo.

commit 487492440d7a47e048e570eff3df416f6e4e2a05
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Wed Mar 27 11:50:33 2019 -0700

    Correct error message.

commit 6f01c3536887f97389b51d411420cc3ab1ae3182
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Wed Mar 27 11:46:54 2019 -0700

    Transform Code field in DNSOPT to enum.

commit afb09021b979869fcef0077c5ef8b7295bced6eb
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Tue Mar 26 12:31:45 2019 -0700

    Updated AUTHORS file and copyright statements.

commit 8b35767f39768de1d6e360226288e277d49c9c6d
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Tue Mar 26 12:19:39 2019 -0700

    Added support for EDNS (RFC6891)

commit b7586607157b64351ab71d7f6ed36f71f2e83393
Merge: b2eab7d 6556731
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Wed Mar 13 20:00:28 2019 +0100

    Merge pull request #624 from elchavar/fix-emptyName
    
    Fixed computeSize for DNSResourceRecord for the case that Name is empty.

commit b2eab7df3513b927f00c9eba914f62f1f47a8708
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Wed Mar 13 19:45:14 2019 +0100

    Add missing functionality to EthernetHandle
    
    Those functions were accidentally removed by 1bbb32a78d0d8a2f2dcd6ec7f6ce0c37b57eab3d
    - Stats
    - SetBPF
    - LocalAddr
    - SetPromiscuous
    
    This also adds missing finalizer and GetCaptureLength

commit 65567310658fb392f4408da7d375b10e7343eb83
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Tue Mar 12 12:21:36 2019 -0700

    Fixed computeSize for DNSResourceRecord for the case that Name is empty.

commit eeab756f47b28445ae6be58e899339ac38fa5e6b
Merge: a0b1565 d70ea49
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue Mar 12 08:11:17 2019 +0100

    Merge pull request #623 from Galadros/Fixing_SNAP_Decoding
    
    Fixed SNAP nextLayerType

commit d70ea49c03af91709a1844099379ceefa4112b9e
Author: Patrick Jones <pjones@802secure.com>
Date:   Mon Mar 11 16:58:51 2019 -0700

    Fixed SNAP nextLayerType

commit a0b1565133fb80abb1bb8c08dc7bdceae64891ed
Merge: 1272748 db3c618
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Mar 7 19:38:53 2019 +0100

    Merge pull request #620 from elchavar/fix-emptyName
    
    Added code to handle the case where the NAME has length zero.

commit db3c61871e73632e3969d86f755924fc5f868b04
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Thu Mar 7 09:51:46 2019 -0800

    Fixed linter error.

commit 12727482dd4ff3150ccc3ab884501c959bf42c5e
Merge: 1bbb32a 29a7c10
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Mar 7 13:58:41 2019 +0100

    Merge pull request #622 from tklauser/afpacket-dup-align-func
    
    afpacket: use single implementation of tpacket alignment function

commit 1bbb32a78d0d8a2f2dcd6ec7f6ce0c37b57eab3d
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Mar 7 13:44:45 2019 +0100

    Get rid of github.com/mdlayher/raw dependency
    
    - raw targets only the latest go version, which is an issue (ci testing, existing infrastructure)
    - EthernetHandle didn't use any features from raw
    - The way it was used, there was no way to get: (kernel/hw) timestamp, vlan id, packet length
    
    This improves:
    - No guessing used for packet buffer size
    - Adds ZeroCopy (no allocation)
    - Adds support for kernel timestamping
    - Adds support for vlan id
    - Adds support for packet truncation

commit 29a7c10f3bbf4307bdcd7dfb3c5401707df3a4f8
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Wed Mar 6 12:37:05 2019 +0100

    afpacket: use single implementation of tpacket alignment function
    
    There are two tpacket alignment functions, tpacketAlign and tpAlign. The
    former has a bug (i.e. it doesn't match TPACKET_ALIGN from
    linux/if_packet.h), so only use the latter. Also make tpacketAlignment a
    const.
    
    Signed-off-by: Tobias Klauser <tklauser@distanz.ch>

commit a3266a586ca37d3af8adcc1048e925e3da4a2020
Author: Elias Chavarria Reyes (elchavar) <elchavar@cisco.com>
Date:   Mon Feb 25 15:22:29 2019 -0800

    Added code to handle the case where the NAME has length zero.

commit 4772b23424e5e835a4157d125cc2f370e0f3a5f2
Merge: 7319a22 b5b6341
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Feb 23 16:43:26 2019 +0100

    Merge pull request #612 from hdm/master
    
    Soft fail on missing WinPCAP during init()

commit b5b6341573191193c9cb3181ff8c10586f8cad85
Author: HD Moore <x@hdm.io>
Date:   Sat Feb 23 08:18:30 2019 -0600

    Add remaining LoadWinPCAP() checks to top-level functions.

commit 7319a227b444a467a483ba38af4bb711b938d79b
Merge: ce15fd6 8f77079
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Feb 23 10:04:05 2019 +0100

    Merge pull request #619 from Bo0km4n/master
    
    Fix golint warnings in examples/arpscan

commit 8f77079ccf2ce88002ad88a5d5fe541ad20f765e
Author: Bo0km4n <pokopenkatuya@gmail.com>
Date:   Sat Feb 23 10:06:53 2019 +0900

    Fix golint warnings

commit ce15fd6ecae9597ae18b6fac2464bac9e4e312a8
Merge: f86faeb 414ebfa
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Feb 18 13:10:55 2019 +0100

    Merge pull request #616 from luxifer/patch-1
    
    fix typo in Endpoint.LessThan documentation

commit 414ebfab30313666091a4097dfd08418ab2ace0f
Author: Florent Viel <luxifer666@gmail.com>
Date:   Mon Feb 18 11:30:48 2019 +0100

    fix typo in LessThan documentation

commit f05f4989089e8266ea994f7ac8ebe413f43fc910
Author: HD Moore <x@hdm.io>
Date:   Sun Feb 17 10:51:07 2019 -0600

    add LoadWinPCAP() checks to top-level functions

commit f86faeb88894864d4fa0652c24f3413b1e42f4a1
Merge: 7edef24 c9dbcad
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Feb 10 18:39:29 2019 -0700

    Merge pull request #614 from Bo0km4n/master
    
    Fix typo in writer.go's comment

commit c9dbcadb79fa572508a89ba6c7763a42af3f2196
Author: Bo0km4n <pokopenkatuya@gmail.com>
Date:   Sun Feb 10 17:42:05 2019 +0900

    fix typo in writer.go's comment

commit 2a66b51c0957781181c249d5b304dbfc6d53e3f5
Author: HD Moore <x@hdm.io>
Date:   Sun Feb 3 20:29:35 2019 -0600

    Soft fail on missing pcap vs panic

commit 7edef24d642a09d18efcf1e00a9dc2d4c6342c82
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Feb 3 22:14:14 2019 +0100

    Fix missing pcap_fopen_offline_with_tstamp_precision. Fixes #611
    
    This happened due to merging tstamp + unix/windows split.
    Problem is that the #define used for checking if this is missing is
    defined by the check above...

commit 78d13eacb56fb26e688a0653101f67b3512fc665
Merge: 7f3fc6c ecd0b83
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Feb 3 22:09:24 2019 +0100

    Merge pull request #610 from steffenfritz/master
    
    Added missing semicolon in function pcap_get_tstamp_precision

commit ecd0b835e54eedf17786904896d231db0758d433
Author: Steffen <steffenfritz@users.noreply.github.com>
Date:   Sun Feb 3 16:01:40 2019 +0100

    Added missing semicolon in function pcap_get_tstamp_precision

commit 7f3fc6cbbb499248dca53da7fe3ed6c25a78d22f
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Feb 1 20:19:36 2019 +0100

    Add minimum go version requirement to documentation.
    
    This fixes #479

commit 96986c90e3e5c7e01deed713ff8058e357c0c047
Merge: 76223dc 7086eee
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Feb 1 19:58:01 2019 +0100

    Merge pull request #608 from yerden/pcap_bpf_boost
    
    Pcap bpf boost

commit 7086eeeb277371374645d73530a2e50addee9490
Author: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>
Date:   Fri Feb 1 21:29:09 2019 +0600

    preclude pointer escaping in pcapOfflineFilter()
    
    Signed-off-by: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>

commit 76223dcc1781e025f742b0cde0e9c19a9e980f00
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Feb 1 19:39:06 2019 +0100

    Add missing CanDecode to ICMPv6Echo. This fixes #600

commit 43bc783e67aa437e7be1f38fa9d4f8f505c11db0
Merge: 66eed7f ad05d8a
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Feb 1 19:06:15 2019 +0100

    Merge pull request #607 from kylesferrazza/master
    
    fix doc typo in tcpreader

commit 8cc463f70e2b11ae242f367396136a7d0a6f8631
Author: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>
Date:   Fri Feb 1 21:24:47 2019 +0600

    add pcap offline BPF benchmark
    
    Signed-off-by: Yerden Zhumabekov <yerden.zhumabekov@gmail.com>

commit ad05d8a6dc0487458696460b69626dc2e64d3714
Author: Kyle Sferrazza <kyle.sferrazza@gmail.com>
Date:   Thu Jan 31 15:44:57 2019 -0500

    fix doc typo in tcpreader

commit 66eed7fc5258c34b3ead3c5964ea538025686a68
Merge: 102d5ca 0af618e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 28 08:13:49 2019 -0800

    Merge pull request #606 from florianl/master
    
    handle error in documentation code

commit 0af618ec92a1d01c81cd128f3a8659ec35c09b96
Author: Lehner Florian <dev@der-flo.net>
Date:   Mon Jan 28 09:47:47 2019 +0100

    handle error in documentation code
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 102d5ca2098cc070c7fdc9d7dbd504658bc92363
Merge: 0d04c07 46ba455
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Jan 22 18:18:26 2019 -0700

    Merge pull request #599 from SH118415/SFlow-CounterRecordTypes
    
    sflow:Add LACP and VLAN Counter Record Types

commit 46ba45517c3f640d982432e4087851a4ef1f299b
Author: SH118415 <suhu118415@gmail.com>
Date:   Wed Jan 23 04:47:56 2019 +0530

    sflow:Add LACP and VLAN Counter Record Types

commit 0813d1790dadf9e35fee62834d352aa731301db0
Merge: 28fc3b0 0d04c07
Author: Asma Suhani <41721310+SH118415@users.noreply.github.com>
Date:   Wed Jan 23 03:21:33 2019 +0530

    Merge branch 'master' into SFlow-CounterRecordTypes

commit 28fc3b0d05d2870fd5e49a3fca5ef63ca0f2a668
Author: SH118415 <suhu118415@gmail.com>
Date:   Sat Jan 12 03:29:07 2019 +0530

    sflow:Add LACP and VLAN Counter Record Types

commit 0d04c070dfe9f3f7edf11a879e54d2bae6bc4776
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Sun Jan 6 16:44:28 2019 +0100

    Expose SLL AddrType (link-layer address type)

commit 54e62735f1a35a4c76a5471e96c29cfe2aba3616
Author: dvandra <dvandra.ai@gmail.com>
Date:   Fri Dec 14 15:35:20 2018 +0530

    Adding OVS SFLOW CounterRecordTypes

commit 90caebb54a7ad26cde945bbb3b63652877de4c56
Author: HD Moore <x@hdm.io>
Date:   Mon Jan 14 10:17:55 2019 -0600

    Avoid a cpu spin when NextPacket() returns EBADF
    
    The NextPacket() function can return EBADF when a gopcap EthernetHandle
    has been closed (triggered by the raw SetReadDeadline()).

commit 52abba11f955ad55bed48f54291f8ff67b0cf92d
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Jan 14 14:37:34 2019 +0100

    Make C-arrays 32-bit safe. This fixes #601
    
    1 << 30 * size of int will overflow 32bit address space, leading to go
    complaining about types being too large.

commit f9ffbd347ce01a912d91604bb17783520a591a5c
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jan 9 15:41:12 2019 -0700

    Fix go1.12 typename in afpacket.

commit bf568f6eadb6968267219a891af2813771b6b9a1
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Jan 7 17:20:46 2019 +0100

    pcap: unix: Fix bpf types

commit e022c6105d4fdd933f687905f24c126882e2913a
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Jan 5 17:04:17 2019 +0100

    pcap: Add missing setNonBlocking to Activate. Fixes #583

commit 159f584753cf3d10168bcd7b8982ffaa494dfd33
Merge: 4f3a45e 7bc23f0
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Jan 5 14:41:58 2019 +0100

    Merge pull request #555 from notti/pcap_nano
    
    Add nanosecond timestamp resolution to pcap, and Resolution API

commit 7bc23f016dc9604e877fcedf4f649b06846def3f
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Jan 5 12:07:59 2019 +0100

    time: Add tests + fix Micro vs Milli error

commit a7dbaf271d9e9c539069b958e16f34aff56da3cb
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Jan 5 11:34:05 2019 +0100

    fix typo in documentation

commit b59b42e2511cd0e53a75aa47eaf0543d7a5115f5
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Jan 5 11:31:43 2019 +0100

    pcap: fix typo in documentation

commit c3b71e9f734e230b4014e657b01d46be73de2f92
Merge: f9c2682 4f3a45e
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Jan 5 11:26:06 2019 +0100

    Merge branch 'master' into pcap_nano
    
    Sync up nano with new windows implementation

commit 4f3a45e173f8999306a687c8e62ac8ea583b6982
Merge: d860096 0c24545
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 20:11:30 2019 +0100

    Merge pull request #589 from ianlancetaylor/cgo
    
    pcap: use C.struct, not _Ctype_struct

commit 0c245453667e53d789b6dc8e74134345437f3312
Author: Ian Lance Taylor <iant@golang.org>
Date:   Fri Jan 4 10:55:05 2019 -0800

    pcap: use C.struct, not _Ctype_struct
    
    The future Go 1.12 version of the cgo tool will issue an error for Go
    code that uses names like _Ctype_struct_S, as that is in the namespace
    that cgo uses for its own generated code. Change this code to use the
    supported form C.struct_S, so that it builds with the future 1.12.

commit d8600968fa509fd77ef74009b1c28a945ce6ce77
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 15:52:52 2019 +0100

    pcap: windows: make bytePtrToString accept NULL pointer

commit fa0e32602d02ffe06f8f43bef22e206c8ea54fd9
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 15:50:28 2019 +0100

    pcap: nicer bpf conversion code

commit 75079e4442f316e22f9cce30f0101c91073b72f6
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 15:16:44 2019 +0100

    pcap: Fix error return value comparison, array casts

commit 10825dba1f64ea68aa9fb163721ae26a3aac2f14
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 14:59:52 2019 +0100

    Remove old outdated comment

commit 8e355b49b5a7dfb1f8648540416bf819bbf32900
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 14:54:31 2019 +0100

    pcap: windows: more specific error messages
    
    Display which wpcap.dll didn't contain the functions from mustLoad

commit 19d42be1dce1d44f9a57e3d09b3c534a56b91a53
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 13:42:16 2019 +0100

    Fix lineending in generate_defs

commit 5b599b23609f9ab11c3510fb2093b76329da47e6
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Jan 4 13:22:17 2019 +0100

    pcap: Rework cgo godefs generation for windows

commit 360f7d300ebb7c483394f8da81169f9a226511b5
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue Nov 27 23:17:01 2018 +0100

    Fix line endings to make gofmt happy

commit 4e18f8ff66ff04f4fc2bbc44c3d3f85640f50ff4
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue Nov 27 22:37:54 2018 +0100

    Support windows in pcap_tester
    
    On windows network device names for libpcap and net don't match :(

commit 774602d97db189d3d235c0c8d10184d772dda49c
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue Nov 27 22:32:11 2018 +0100

    Move non-windows stuff to pcap_unix; Convert windows to implicit linking
    
    This add support for npcap on windows.
    Windows now supports both npcap and winpcap at the same time. If both
    winpcap and npcap are installed at the same time, npcap is preferred.
    Building on windows now doesn't need neither cgo nor npcap/winpcap sdks.
    This fixes #500

commit 8448a24abf90ad1a39746b2ce170196234b4e5cc
Merge: bce22d2 ed5e228
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jan 3 18:57:32 2019 +0100

    Merge pull request #553 from notti/fix_pfring
    
    Fix pf_ring 7.2 and maybe performance issues. This fixes #467, #419

commit ed5e228351744309cdff9262f2e17fece074460f
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jan 3 18:53:26 2019 +0100

    Add missing copyright notice

commit bce22d2ca4d2c19e22eab49a084978731a1875c7
Merge: 6d81e56 9db46a8
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jan 3 14:01:23 2019 +0100

    Merge pull request #580 from jpbede/sflow-enterprise-decode
    
    sFlow decode when enterprise id is 0

commit 6d81e5661bc8ae1efe3fbd78bd790daef871b489
Merge: aae514b ce2b7e7
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Jan 3 13:43:20 2019 +0100

    Merge pull request #582 from x-way/sip_request_uri
    
    Extract SIP Request-URI

commit ce2b7e76f99d5d4eaa4f58496fcde6385cf5b89e
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Wed Dec 26 12:57:24 2018 +0100

    Extract SIP Request-URI

commit 9db46a8a4547c4327619f73ad1c83feb75a3c30a
Author: Jan-Philipp Benecke <jan-philipp.benecke@jpbe.de>
Date:   Sun Dec 23 17:02:15 2018 +0100

    decode sflow records only when enterprise id is 0

commit aae514bb9b6e0b934378e3eb1381a7783821fc16
Merge: 629bfd0 fa8c0c3
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Dec 23 11:32:10 2018 +0100

    Merge pull request #574 from jpbede/sflow-ethernet-frame
    
    added support for sflow ethernet frame flows

commit fa8c0c38f1abba420a9e63100b2643ac8583c38f
Author: Jan-Philipp Benecke <jan-philipp.benecke@jpbe.de>
Date:   Sat Dec 22 18:07:27 2018 +0100

    added missing field & added test

commit 629bfd0814dbc9d18f8ce97475f373da77c10637
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Dec 21 22:08:35 2018 +0100

    Use ZeroCopyPacketDataSource in afpacket example

commit ee01b228e9c0231b927a6b10aaf969baea240c98
Merge: ffcd710 14876e3
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Dec 21 22:03:25 2018 +0100

    Merge pull request #460 from negbie/master
    
    Fix fragment too small log output

commit ffcd71022adfc6e78fe4b0aa3abce64e763a8726
Merge: 3c037fb 42b3c22
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Dec 21 20:06:42 2018 +0100

    Merge pull request #578 from jandos/reassembly_review
    
    reassembly: small optimizations to overlapExisting

commit 42b3c22bc0a1830b573502d753b2c747222d2eef
Author: Zhandos Zhylkaidar <zzhylkai@gmail.com>
Date:   Thu Dec 20 14:14:24 2018 +0600

    reassembly: small optimizations to overlapExisting

commit 1ad5166abe6f6c73fdd7bfeef0797ad3d6f1d493
Author: Jan-Philipp Benecke <jpb@cleverreach.com>
Date:   Mon Dec 17 09:54:52 2018 +0100

    added support for sflow ethernet frame flows

commit 3c037fb4650eaecb208dfa07c0bf4c7e3bb3b7be
Author: WGH <wgh@torlan.ru>
Date:   Tue Dec 11 15:11:11 2018 +0300

    Clarify pcapgo ZeroCopyReadPacketData docs

commit 1900a329f9ebf41fa8da28819e8c835a547f2307
Author: WGH <wgh@torlan.ru>
Date:   Tue Dec 11 15:07:04 2018 +0300

    Add ZeroCopyReadPacketData to pcapgo.Reader

commit d5dee4e2f7c6d5f85ef56fd3f09456496c853bd8
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Fri Nov 30 07:34:04 2018 +0100

    Add PPTP in 4over6 testcase

commit c1e72fb410523f6ffe31c7da4c4aee6b7379b98b
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Fri Nov 30 07:31:34 2018 +0100

    Add serialization support for PPTP header

commit ea0e354856d89645bf8c801e464d34d8d182f2fd
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Thu Nov 29 06:09:16 2018 +0100

    Add support for HDLC-like PPP as used in PPTP

commit 8f564df4399608dc2ad3001544d70dbf5d471385
Author: Christian Mäder <cma@nine.ch>
Date:   Tue Dec 4 17:36:46 2018 +0100

    Fix length of DHCPv6Option when FixLenghts is true

commit a3c4a85b4a4cecfbf39ebd0c6a892bd22f485978
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Tue Nov 27 10:00:10 2018 +0100

    Add support for GRE Ack as used in PPTP

commit 89f9712bff4037085efc4ee1a0a2509fb85a5a22
Author: Andreas Jaggi <andreas.jaggi@waterwave.ch>
Date:   Tue Nov 27 11:26:48 2018 +0100

    Add PPP Ethernet Type

commit cee91fa3787e2658d40189e5ad829ed98d9639e0
Author: Achille Roussel <achille@segment.com>
Date:   Wed Jun 6 19:59:34 2018 -0700

    DNS: cache errors to avoid dynamic memory allocations

commit f9c2682ee3ac012620becb7b6c48fa1e5d425177
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Nov 11 11:52:40 2018 +0100

    pcapgo/pcapng provide a method to convert NgResolution to TimestampResolution

commit 078576c2de9c4fab8ffc25b414a46177cbc2d749
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Nov 11 11:41:12 2018 +0100

    Move tstamp precision hack for _fopen/_hopen to _unix.go/_windows.go

commit ffa4f2aa0e19f053a76a6a31f288bbc8f9ebaddb
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sun Nov 11 11:39:31 2018 +0100

    Add comment explaining tstamp trickery for libpcap <v1.5 to pcap.go

commit ec90f6c2c025516eabdf6bf374b615ff0bf32c21
Author: Philipp Mieden <dreadl0ck@protonmail.ch>
Date:   Thu Nov 8 10:07:53 2018 +0100

    reassemblydump example: Fixed data races on errorsMap and tcpStream

commit f9d6df4cf07e221be4221834a9f903ee7688ba7a
Merge: 15363c5 f281b86
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Wed Nov 7 23:35:13 2018 +0100

    Merge pull request #548 from christophert/master
    
    add additional 802.11-2016 options

commit 8135e97e3da1077feb03c4d6c9714fe92e2636a5
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Wed Nov 7 23:12:41 2018 +0100

    Add missing stdint.h

commit 15363c5bb3e9bbe8a234d4525bf854df4a406644
Merge: 0d76b76 7c53096
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Nov 5 20:31:33 2018 +0100

    Merge pull request #556 from FaranIdo/ip4defrag-id-fix
    
    Ip4defrag - set IPv4 Id field to match the value of the packets instead of 0

commit 7c53096710c6f39e9b4207a2bdb77b99d3d760a2
Author: FaranIdo <idoosbron@gmail.com>
Date:   Mon Nov 5 00:01:11 2018 +0200

    Fix linting

commit e0e93a0ee361c0ce0c738031f7e59f898433e1cf
Author: FaranIdo <idoosbron@gmail.com>
Date:   Sun Nov 4 23:41:49 2018 +0200

    Update ID field in defrag, add matching test

commit 9c44213d35daef2b8ff927c9afb20f49a3d3e9b9
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Nov 3 22:29:01 2018 +0100

    Add nanosecond timestamp resolution to pcap.
    
    In case libpcap (version < 1.5), the file, hardware, or os does not
    support nanosecond resolution, microsecond is used. Actual resolution
    can be queried with Resolution().
    This fixes #298

commit 97e2a55fb1662dbbb08f74a2e79242104923f3ec
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Nov 3 21:12:18 2018 +0100

    Add timestamp resolution support to pcapgo

commit 7a6d506fd3240e26844edacf1b9bf4c9186adac2
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Nov 3 21:03:33 2018 +0100

    Add timestamp resolution support to pcapng

commit a5a72b54d9bdc2a784385635a4a51c2265e2173b
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Sat Nov 3 21:03:01 2018 +0100

    Add timestamp resolution api

commit 0d76b763fa06849d9c0eca7f98644c7dd4d19c09
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Nov 2 17:43:12 2018 +0100

    Add 12/14 raw link type
    
    On non-openbsd link type 12 is raw - on openbsd 14.
    See https://github.com/the-tcpdump-group/libpcap/blob/170f717e6e818cdc4bcbbfd906b63088eaa88fa0/pcap/dlt.h#L85
    https://github.com/wireshark/wireshark/blob/854cfe53efe44080609c78053ecfb2342ad84a08/wiretap/pcap-common.c#L508
    
    This fixes #99

commit 68f08e6fa7f250bc7b1ace020577c01bc079a64c
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Nov 1 23:04:10 2018 +0100

    Fix panic in tcp option serialization
    
    Rest of the serialization uses `2+len(o.optionData)`. This mismatch can
    lead to an out of bounds panic at the later `Padding`-`copy` due to
    wrong start calculation. This fixes #123

commit 213026569880091daafb06a718a4b15940495830
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Nov 1 18:04:19 2018 +0100

    Fix gofmt issues

commit 230b5b8851df6c1db9da33c284c6602c0df1418a
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Nov 1 00:20:05 2018 +0100

    Fix pf_ring 7.2 and maybe performance issues. This fixes #467, #419
    
    Rework of the core parts of pfring. Due to the use of packed structures in
    7.2 cgo can't access some fields of `struct pfring_pkthdr`.
    This copies the needed fields to a non-packed struct first.
    
    To improve speed, `pfring_recv` is now called with a length of zero,
    enabling zero copy. The old version caused the userlab pf_ring library
    to copy the packet contents. This maybe fixes #543, #185.
    Additionally, pfring now uses `timestamp_ns` instead of `ts`, which increases
    the timestamp resolution from microsecond to nanosecond. Furthermore,
    cgo usage was improved by using the same techniques as in pcap
    (allocations on the heap).
    
    Added `ZeroCopyReadPacketData`. This one uses not zero copy from kernel
    space directly to the buffer. The old `ReadPacketDataTo` caused pf_ring
    userspace library to copy the data (buffer_len != 0). The new
    `ReadPacketDataTo` still does the copy (but now in gocode) since zero
    copy is not possible with the current interface. This method is there to
    keep legacy code working, but newer versions should switch over to
    `ZeroCopyReadPacketData`.
    
    The following benchmarks were performed in a virtual machine by using
    pktgen kernel module on the host and virtio-net in the guest. Since
    there is no `ZeroCopyReadPacketData`, the `PfringReadZero` lines compare
    `ReadPacketDataTo` in the old implementation with
    `ZeroCopyReadPacketData` in the new version.
    
    65536 byte size packets:
    ```
    name              old time/op    new time/op    delta
    PfringRead-2        47.5µs ±10%    42.8µs ± 7%    -9.85%  (p=0.012 n=8+10)
    PfringReadZero-2    42.5µs ±25%    32.9µs ± 7%   -22.65%  (p=0.000 n=10+10)
    PfringReadTo-2      42.5µs ±25%    36.8µs ± 9%      ~     (p=0.143 n=10+10)
    
    name              old speed      new speed      delta
    PfringRead-2      1.30GB/s ±26%  1.53GB/s ± 7%   +17.57%  (p=0.003 n=10+10)
    PfringReadZero-2  1.58GB/s ±22%  1.99GB/s ± 7%   +25.90%  (p=0.000 n=10+10)
    PfringReadTo-2    1.58GB/s ±22%  1.79GB/s ± 9%      ~     (p=0.143 n=10+10)
    
    name              old alloc/op   new alloc/op   delta
    PfringRead-2        65.6kB ± 0%    65.5kB ± 0%    -0.02%  (p=0.000 n=10+10)
    PfringReadZero-2     16.0B ± 0%      0.0B       -100.00%  (p=0.000 n=10+10)
    PfringReadTo-2       16.0B ± 0%      0.0B       -100.00%  (p=0.000 n=10+10)
    
    name              old allocs/op  new allocs/op  delta
    PfringRead-2          2.00 ± 0%      1.00 ± 0%   -50.00%  (p=0.000 n=10+10)
    PfringReadZero-2      1.00 ± 0%      0.00       -100.00%  (p=0.000 n=10+10)
    PfringReadTo-2        1.00 ± 0%      0.00       -100.00%  (p=0.000 n=10+10)
    ```
    
    58 byte size packets:
    ```
    name              old time/op    new time/op     delta
    PfringRead-2        46.8µs ±23%      3.2µs ±85%    -93.15%  (p=0.000 n=10+10)
    PfringReadZero-2    2.48µs ±11%     2.33µs ± 2%     -6.37%  (p=0.022 n=10+8)
    PfringReadTo-2      2.48µs ±11%     2.63µs ± 6%       ~     (p=0.053 n=10+9)
    
    name              old speed      new speed       delta
    PfringRead-2      1.27MB/s ±24%  21.17MB/s ±60%  +1570.88%  (p=0.000 n=10+10)
    PfringReadZero-2  23.5MB/s ±10%   24.9MB/s ± 2%     +6.33%  (p=0.017 n=10+8)
    PfringReadTo-2    23.5MB/s ±10%   22.0MB/s ± 6%       ~     (p=0.053 n=10+9)
    
    name              old alloc/op   new alloc/op    delta
    PfringRead-2        65.6kB ± 0%      0.1kB ± 0%    -99.90%  (p=0.000 n=10+10)
    PfringReadZero-2     16.0B ± 0%       0.0B        -100.00%  (p=0.000 n=10+10)
    PfringReadTo-2       16.0B ± 0%       0.0B        -100.00%  (p=0.000 n=10+10)
    
    name              old allocs/op  new allocs/op   delta
    PfringRead-2          2.00 ± 0%       1.00 ± 0%    -50.00%  (p=0.000 n=10+10)
    PfringReadZero-2      1.00 ± 0%       0.00        -100.00%  (p=0.000 n=10+10)
    PfringReadTo-2        1.00 ± 0%       0.00        -100.00%  (p=0.000 n=10+10)
    ```

commit 4a840851b59d36c81f4259f382632fc7a53bc794
Author: Vitor Garcia Graveto <victor.graveto@gmail.com>
Date:   Tue Oct 30 19:49:55 2018 +0000

    Comments and String method added to type ModbusProtocol

commit 6561ecbe671bfd336fdd37f93480eeecdf83d6bf
Author: Vitor Garcia Graveto <victor.graveto@gmail.com>
Date:   Tue Oct 30 19:35:06 2018 +0000

    ModbusProtocol enum added and minor comments corrections

commit 724fcd62b872cfde69279342ef34a40692bcdaec
Author: Vitor Garcia Graveto <victor.graveto@gmail.com>
Date:   Tue Oct 30 17:20:07 2018 +0000

    Added Author and corrected copyright

commit 94e18bdd545d9f26716064592aa036e329cbcddd
Author: Vitor Garcia Graveto <victor.graveto@gmail.com>
Date:   Tue Jun 26 16:00:47 2018 +0100

    Adding new protocol ModbusTCP decoder
    
    Declaring the new LayerTypeModbusTCP
    
    Mapping ModbusTCP to TCP port 502
    
    Minor changes to comments in file
    
    run gofmt on ModbusTCP file
    
    run gofmt on ports.go file
    
    run gofmt on some files

commit 947b7d857faafca8ced07bf0eb1b0bbeda78a73b
Author: Christian Mäder <cma@nine.ch>
Date:   Fri Oct 26 17:51:31 2018 +0200

    Adds missing copyright notice

commit 935d5bb48b454dc8c24290c4ad20c0032a5a252c
Author: Christian Mäder <cma@nine.ch>
Date:   Fri Oct 26 11:50:25 2018 +0200

    Recognize More DHCPv6 Options
    
    This commit adds names to all of the IANA-listed DHCPv6 options
    [1] as of 2018-10-26.
    
    [1]: https://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml

commit d533435fee711155c34af792b4d5c9562e1b931b
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Mon Oct 29 23:58:59 2018 +0100

    Fix ip4 option handling and add missing length checks
    
     - Padding was not reset correctly
     - End of options didn't stop option decoding due to incorrect use of
       break

commit cce0499332347dde253b6bdb28636ef56065902e
Author: Sentryo R&D <developers@sentryo.net>
Date:   Mon Oct 29 14:05:30 2018 +0100

    macs: parse flags at startup
    
    Parse command flags at startup to make the URL customizable as was
    originally intended.

commit be2f208233b3b53fb00fc3e1212dfd2c2b80c36d
Author: assafmo <assaf.morami@gmail.com>
Date:   Sun Oct 28 12:26:18 2018 +0200

    pcapgo/read.go: ReadPacketData also check that CaptureLength <= Length
    ( According to the packet header specs: https://wiki.wireshark.org/Development/LibpcapFileFormat#Record_.28Packet.29_Header )

commit f281b86a716b47f451456e2cb7f1edbfefb72045
Author: Christopher Tran <me@christran.in>
Date:   Fri Oct 26 00:53:00 2018 -0400

    run go fmt on dot11.go

commit bf034b970165d4f0a134ad6ad9d3c2846c8d4976
Author: Christopher Tran <me@christran.in>
Date:   Fri Oct 26 00:28:21 2018 -0400

    add additional 802.11-2016 options

commit a35e09f9f224786863ce609de910bc82fc4d4faf
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue Oct 23 12:10:25 2018 +0200

    Add missing length check to decoding of ip4, ip6, tcp, udp
    
    This is actually dictated by CONTRIBUTING.md and should be there.
    Without this out-of-bounds panics happen in truncated files (e.g.
    http://mawi.wide.ad.jp/mawi/samplepoint-F/2017/201702011400.html)
    
    This shouldn't add too much overhead since this also removes tons of
    slice bounds checks.
    
    Benchmark old vs new (some changes don't make sense - no idea why this
    happened):
    
    name                                       old time/op  new time/op  delta
    LayerClassSliceContains-40                 1.20ns ± 6%  1.20ns ± 4%     ~     (p=0.737 n=10+10)
    LayerClassMapContains-40                   7.12ns ±10%  7.07ns ±11%     ~     (p=0.796 n=10+10)
    LazyNoCopyEthLayer-40                       527ns ± 8%   531ns ± 8%     ~     (p=0.617 n=10+10)
    LazyNoCopyIPLayer-40                        995ns ± 4%  1006ns ± 8%     ~     (p=0.424 n=10+10)
    LazyNoCopyTCPLayer-40                      1.62µs ± 8%  1.63µs ± 8%     ~     (p=0.955 n=10+10)
    LazyNoCopyAllLayers-40                     1.87µs ±12%  1.86µs ±13%     ~     (p=0.436 n=10+10)
    Default-40                                 1.87µs ±11%  1.82µs ±12%     ~     (p=0.183 n=10+10)
    SerializeTcpNoOptions-40                    216ns ± 6%   217ns ±12%     ~     (p=0.888 n=9+10)
    SerializeTcpFixLengths-40                   239ns ± 4%   215ns ± 5%  -10.25%  (p=0.000 n=9+10)
    SerializeTcpComputeChecksums-40             529ns ± 4%   531ns ± 8%     ~     (p=0.781 n=10+10)
    SerializeTcpFixLengthsComputeChecksums-40   545ns ± 5%   538ns ± 6%     ~     (p=0.411 n=9+10)
    Lazy-40                                     434ns ± 5%   447ns ± 6%   +3.02%  (p=0.049 n=10+10)
    NoCopy-40                                  1.41µs ± 5%  1.44µs ± 9%     ~     (p=0.764 n=9+10)
    LazyNoCopy-40                               203ns ± 4%   200ns ± 3%     ~     (p=0.254 n=10+10)
    KnownStack-40                               104ns ± 4%   102ns ± 7%     ~     (p=0.190 n=10+10)
    DecodingLayerParserIgnorePanic-40           166ns ± 5%   167ns ± 6%     ~     (p=0.780 n=9+9)
    DecodingLayerParserHandlePanic-40           230ns ± 4%   227ns ± 4%     ~     (p=0.398 n=9+9)
    Alloc-40                                   0.37ns ± 4%  0.38ns ± 3%     ~     (p=0.117 n=10+10)
    Flow-40                                    16.9ns ± 3%  16.9ns ± 6%     ~     (p=0.882 n=9+9)
    Endpoints-40                               2.20ns ± 4%  2.20ns ± 3%     ~     (p=0.984 n=10+9)
    TCPLayerFromDecodedPacket-40               14.4ns ± 2%  14.1ns ± 5%     ~     (p=0.063 n=9+9)
    TCPLayerClassFromDecodedPacket-40          33.8ns ± 7%  34.1ns ± 4%     ~     (p=0.265 n=9+9)
    TCPTransportLayerFromDecodedPacket-40      3.20ns ± 5%  3.14ns ± 5%     ~     (p=0.147 n=10+10)
    DecodeFuncCallOverheadDirectCall-40        0.37ns ± 3%  0.37ns ± 6%     ~     (p=0.695 n=9+10)
    DecodeFuncCallOverheadDecoderCall-40       6.67ns ± 4%  6.89ns ± 5%   +3.20%  (p=0.029 n=10+9)
    DecodeFuncCallOverheadArrayCall-40         11.5ns ± 4%  11.5ns ± 5%     ~     (p=0.948 n=9+10)
    FmtVerboseString-40                        40.1µs ±12%  39.0µs ±10%     ~     (p=0.280 n=10+10)
    PacketString-40                            59.7µs ± 1%  59.7µs ± 2%     ~     (p=0.796 n=10+10)
    PacketDumpString-40                        60.0µs ± 3%  59.9µs ± 1%     ~     (p=0.447 n=10+9)
    DecodeICMP-40                              1.52µs ± 1%  1.51µs ± 2%     ~     (p=0.781 n=10+10)
    DecodeICMP6-40                             1.78µs ± 1%  1.77µs ± 1%     ~     (p=0.381 n=10+10)
    DecodeMPLS-40                              1.70µs ± 2%  1.70µs ± 2%     ~     (p=0.306 n=10+10)
    DecodePPPoEICMPv6-40                       2.26µs ± 1%  2.25µs ± 1%     ~     (p=0.093 n=10+10)
    DecodePacketDNSRegression-40               2.44µs ± 1%  2.43µs ± 0%     ~     (p=0.395 n=10+8)
    DecodePacketDot11CtrlCTS-40                1.01µs ± 1%  0.99µs ± 7%     ~     (p=0.380 n=10+10)
    DecodePacketDot11MgmtBeacon-40             5.77µs ± 1%  5.69µs ± 3%   -1.30%  (p=0.001 n=8+9)
    DecodePacketDot11DataQOSData-40            2.28µs ± 1%  2.19µs ± 1%   -3.81%  (p=0.000 n=9+9)
    DecodePacketDot11MgmtAction-40             1.34µs ± 1%  1.33µs ± 1%   -0.59%  (p=0.045 n=10+9)
    DecodePacketDot11CtrlAck-40                1.01µs ± 1%  0.97µs ±11%     ~     (p=0.139 n=8+10)
    DecodePacketDot11DataARP-40                2.48µs ± 1%  2.31µs ±12%   -7.06%  (p=0.000 n=8+10)
    DecodePacketDot11DataIP-40                 4.66µs ± 1%  4.56µs ± 9%   -2.15%  (p=0.015 n=8+9)
    DecodePacketP6196-40                       1.53µs ± 1%  1.45µs ± 2%   -5.12%  (p=0.000 n=8+8)
    DecodePacketEAPOLKey-40                    20.8µs ± 3%  20.6µs ± 6%     ~     (p=0.837 n=7+9)
    DecodeGeneve1-40                            669ns ± 1%   674ns ± 2%     ~     (p=0.305 n=9+10)
    DecodePacketGRE-40                         2.25µs ± 1%  2.23µs ± 0%   -0.91%  (p=0.003 n=8+9)
    EncodePacketGRE-40                          406ns ± 7%   414ns ± 4%     ~     (p=0.128 n=10+9)
    DecodePacketEthernetOverGRE-40             2.48µs ± 9%  2.38µs ±12%     ~     (p=0.073 n=10+10)
    EncodePacketEthernetOverGRE-40              414ns ±14%   425ns ±12%     ~     (p=0.305 n=10+10)
    Decodeigmpv1MembershipReportPacket-40      1.13µs ±11%  1.10µs ±10%     ~     (p=0.494 n=10+10)
    Decodeigmpv2MembershipQueryPacket-40       1.17µs ±10%  1.14µs ±11%     ~     (p=0.541 n=10+10)
    Decodeigmpv2MembershipReportPacket-40      1.36µs ±12%  1.32µs ±10%     ~     (p=0.256 n=10+10)
    Decodeigmp3v3MembershipQueryPacket-40      1.44µs ± 9%  1.34µs ±12%   -6.40%  (p=0.029 n=10+10)
    Decodeigmpv3MembershipReport2Records-40    1.76µs ±12%  1.68µs ±10%     ~     (p=0.105 n=10+10)
    DecodePacketIPSecAHTransport-40            1.69µs ±10%  1.62µs ±11%     ~     (p=0.072 n=10+10)
    DecodePacketIPSecAHTunnel-40               2.08µs ± 1%  1.91µs ±11%   -8.22%  (p=0.000 n=8+10)
    DecodePacketIPSecESP-40                    1.19µs ± 2%  1.14µs ±10%     ~     (p=0.100 n=8+10)
    DecodePacketMPLS-40                        1.85µs ± 1%  1.77µs ±11%     ~     (p=0.306 n=9+10)
    DecodePacketPacket5-40                     1.40µs ± 1%  1.34µs ±13%   -4.46%  (p=0.021 n=9+10)
    DecodePacketPacket0-40                     1.36µs ± 1%  1.30µs ±10%     ~     (p=0.152 n=8+10)
    DecodePacketPacket6-40                     1.38µs ± 7%  1.35µs ±13%     ~     (p=0.459 n=9+10)
    DecodePacketPacket1-40                     1.28µs ±10%  1.31µs ±11%     ~     (p=0.542 n=10+10)
    DecodePacketPacket7-40                     1.41µs ±11%  1.37µs ±13%     ~     (p=0.926 n=10+10)
    DecodePacketPacket2-40                     1.75µs ± 1%  1.71µs ±10%     ~     (p=0.326 n=8+10)
    DecodePacketPacket8-40                     3.04µs ± 1%  3.03µs ± 1%     ~     (p=0.898 n=8+8)
    DecodePacketPacket3-40                     3.56µs ± 1%  3.56µs ± 2%     ~     (p=0.832 n=9+8)
    DecodePacketPacket9-40                     1.91µs ± 1%  1.92µs ± 1%     ~     (p=0.268 n=8+8)
    DecodePacketPacket4-40                     1.87µs ± 8%  1.93µs ± 1%   +3.30%  (p=0.001 n=9+8)
    DecodePacketPrism-40                       1.75µs ± 7%  1.77µs ± 1%     ~     (p=0.796 n=9+8)
    DecodePacketRadiotap0-40                    960ns ± 2%   958ns ± 1%     ~     (p=0.435 n=9+8)
    DecodePacketRadiotap1-40                   1.17µs ± 1%  1.19µs ± 2%   +1.29%  (p=0.041 n=8+8)
    DecodeSFlowPacket1-40                      19.4µs ± 1%  19.4µs ± 1%     ~     (p=0.963 n=9+8)
    DecodeSFlowPacket2-40                      14.8µs ± 2%  14.7µs ± 1%     ~     (p=0.661 n=9+10)
    DecodeSFlowPacket3-40                       653ns ± 7%   676ns ± 2%     ~     (p=0.064 n=10+9)
    DecodeSFlowPacket4-40                       621ns ±11%   674ns ± 1%     ~     (p=0.165 n=10+8)
    DecodeSFlowLayerPacket1-40                 22.3µs ±12%  22.7µs ±12%     ~     (p=0.579 n=10+10)
    DecodeSFlowLayerPacket2-40                 14.0µs ± 8%  14.1µs ±12%     ~     (p=0.853 n=10+10)
    DecodeDNS-40                               1.94µs ± 2%  1.97µs ± 2%   +1.86%  (p=0.001 n=9+9)
    DecodeDNSLayer-40                          1.21µs ±10%  1.20µs ±13%     ~     (p=0.754 n=10+10)
    DecodePacketUSB0-40                         805ns ± 9%   793ns ± 8%     ~     (p=0.542 n=10+10)
    DecodeVRRPPacket0-40                       1.40µs ±11%  1.35µs ± 9%     ~     (p=0.165 n=10+10)
    DecodePacketVXLAN-40                       3.00µs ± 7%  2.87µs ± 9%     ~     (p=0.315 n=9+10)

commit d447a1fa67fde0e31a46199af2ab4bfad29ad936
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 18 22:16:46 2018 +0200

    Change goto to break looplabel

commit 86f51361ae0d5ca90252b26b2241df210c548110
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 18 22:09:24 2018 +0200

    Fix copyright notice

commit 509fd26aef6bbfc045a4d820743e9a787b294dd7
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 18 22:02:58 2018 +0200

    Changed named single value error returns to unnamed

commit c6ccc1fae947a7d56b25050d2fea271a90c100fb
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 18 11:00:55 2018 +0200

    Moved pcapnggo -> pcapgo; Rename everything to ng*/Ng*

commit d68ef417973dd44ac1ce5cb363fcff5cd83504c7
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Wed Oct 17 23:04:55 2018 +0200

    Add go implementation for handling pcapng files
    
    This is a native pcapng implementation for reading and writing files.
    
    Code was optimized with the help of benchmarking and analysing compiler
    output by
     * trying to eliminate bounds checks
     * limit itab use (interfaces)
     * limit number of go function calls
     * trying to inline as much as possible without duplicating too much
       code (manually and automatically)
     * named return values
    
    Things that lead to surprising results:
     * use of unsafe for writing (pcapng states one should use native
       endianess) - encoding.binary is way too optimized
     * binary.*.PutUint16(..., 0) is faster than assigning 0 to both slice
       elements
     * Inline budget is already used up by just calling io.ReadFull(r.r,
       ...)

commit d83d96bc69c8d2d3c01c55ff018480c6c1ed9b30
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 18 10:14:02 2018 +0200

    Fix golint repo location (see golang/lint@ead987a)

commit d67ddb98d5a1b7c79a8977ec2d552e1db45eda86
Author: ATpiu <623754476@qq.com>
Date:   Wed Oct 10 18:23:24 2018 +0800

    Update parser.go
    
    the same issue in Example usage should also be corrected and the url is https://godoc.org/github.com/google/gopacket

commit 3de64ff200ebb5a7560a4d4836d0277645ce69eb
Author: Jose Selvi <jselvi@pentester.es>
Date:   Wed Oct 10 08:59:08 2018 -0700

    Partial TLS Support (#534)
    
    Added partial TLS support
    
    * Remove commented code
    
    * Split TLS into several files
    
    * Added TLS ports
    
    * Added TLS Alert Records support
    
    * Add Change Cipher Spec records support
    
    * Added tls files to .lint_blacklist
    
    * LayerTypeTLS moved and re-numbered to 140
    
    * Restored DecodeStreamsAsDatagrams if
    
    * Contributor name moved to AUTHORS file
    
    * Using CamelCase for names
    
    * Changed TLSVersion from struct to uint16
    
    * Returning LayerTypeZero instead of LayerTypePayload for TLS
    
    * Removed SerializeTo(). Payload() returns nil.
    
    * Addind numeric value when we receive unknown alert
    
    * Renamed DecodeFromBytes into decodeFromBytes for non-layer structs
    
    * Fixed a problem with test. Now using DecodeOptions properly.
    
    * Fixing problem with .travis.gofmt.sh
    
    * Added comments in godoc format
    
    * Fixing again a problem with .travis.gofmt.sh
    
    * Typo in filename
    
    * Test now using DeepEqual
    
    * Refactoring DecodeFromBytes and tests added
    
    * Renamed Appdata to AppData

commit d78765a6cecd9fcdd509444f5239ee13ebe3e2e6
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Mon Oct 8 18:23:22 2018 +0200

    geneve fix infinite loop with options len miss-matching the total option len

commit 50ff8cd644cfeb41739e00ad085e67167ec3eb4d
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 4 19:53:46 2018 +0200

    Retry on EINTR in afpacket instead of failing

commit 4eeb3494f90698178d94296b6ae7f45ed55885ae
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 4 19:41:39 2018 +0200

    Improved generated code in afpacket

commit 640567247f42bc7c1c2d7e69dbb4b7b064318d5e
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 4 13:20:25 2018 +0200

    Fix poll in afpacket. This fixes #529
    
    As mentioned in #529 Revents is empty. Well the original code copied
    h.pollset into a slice as argument to unix.Poll and then discards this
    slice.... -> unix.Poll modified the slice, which was immediately
    discarded. No wonder h.pollset.Revents is empty.
    
    This removes pollset from the TPacket struct (according to the compiler
    pollset doesn't escape to the heap anyway), and properly uses a slice
    for everything.

commit 9e80279794c6814f885f0bec3a2de321504ab971
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Thu Sep 20 14:57:45 2018 +0200

    make pcapgo compilable on non linux machine

commit 936926d165805b21f57bac9abf4819391aeb4720
Author: Lehner Florian <dev@der-flo.net>
Date:   Mon Oct 1 11:11:24 2018 +0200

    Fix DHCPv6 Status Code
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit c5b434497bea7a3417dc45b84c70282c4a5b3b3d
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Oct 4 12:25:43 2018 +0200

    Fix 64-bit alignment of sync.atomic accesses in afpacket and pcap. This fixes #512
    
    This is documented at the end of sync.atomic help (caller is responsible
    for 64-bit alignment of 64-bit accesses). First word of allocated
    structs can be relied upon to be 64-bit aligned -> this pull request
    moves 64-bit sync.atomics to the top of the structs in afpacket and pcap.
    
    Tested in a 32-bit virtual machine (without this patch afpacket crashes
    as reported in #512)

commit 9f64f498dcfc67d74ca3eb8384ee77ff9f860d7e
Author: Christian Mäder <cimnine@users.noreply.github.com>
Date:   Tue Oct 2 19:09:58 2018 +0200

    Adds MLDv1 and MLDv2 (Multicast Listener Discovery) [rebased onto #530] (#533)
    
    * Adds support for Multicast Listener Discovery V1
    
    Based on https://tools.ietf.org/html/rfc2710
    
    Some tests currently fail because of an error in the
    serialization of IPv6 Hop-By-Hop Options, see
    https://github.com/google/gopacket/issues/517
    
    * Implemented Multicast Listener Discovery V2
    
    * Includes some refactoring to MLDv1
    * Adds tests to ICMPv6
    
    * Properly split layers
    
    * Make code ready for submission
    
    * Commented test that are not working due to #517
    
    IPv6HopByHop serialization fails, so I commented the tests that depend
    on correct serialization. See https://github.com/google/gopacket/issues/517
    
    * Fixes failure in reassembly of MLDv2
    
    * Edit copyright notice
    
    * Prefix const values
    
    * Improved function comments
    
    * Force reserved area to be 0x0000 in mldv1
    
    * Ensure correct length of IPv6 addresses
    
    - MulticastAddress in MLDv1 and MLDv2
    - SourceAddresses in MLDv2

commit 8b9dff44a28aa2f482f105ac3a978fca24596dfe
Author: Christian Mäder <cimnine@users.noreply.github.com>
Date:   Tue Oct 2 17:03:02 2018 +0200

    Serialized Layer Introspection [Fixes #517] (#530)
    
    * Adds introspection capabilities to SerializeBuffer
    
    This change allows a layer to check if a certain other layer has already
    been successfully serialized. This is useful when an option is encoded
    as part of the packet layer, but also encoded as separate option layer.
    
    An example is the IPv6 HopByHop option: It is present as part of the
    IPv6 struct, but also serialized as IPv6HopByHop layer. So when
    serializing, it's import for the IPv6 packet to check whether the
    HopByHop option was already serialized to prevent serializing the option
    a second time. This was described in #517.
    
    Closes #517
    
    * Fix golint complaints
    
    * Avoid unnecessary malloc

commit 9b9af424be8c676a5dd011b22824bc8e259809b7
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Wed Sep 26 12:59:20 2018 +0200

    Fix geneve options parsing

commit 5644b958de0d2e80c6c8086794d3764610f658ae
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Wed Sep 26 12:59:20 2018 +0200

    handle truncated geneve packets

commit a6b099ece4680a8bdea84fa78166d0712108a95c
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Thu Sep 20 17:35:12 2018 +0200

    add icmpv6 echo serialize function

commit b0d0b285fa9601e0fe507f78367e71d1749e6a45
Author: Jie Cai <hellocj2013@gmail.com>
Date:   Wed Sep 19 23:34:52 2018 +0800

    Fix panic when decode icmpv6 option (#520)

commit a2aa39de42126f2f776871ddb0a7a694e49d2dd1
Author: sentryo <github@sentryo.net>
Date:   Thu Sep 13 17:26:27 2018 +0200

    Update default OUI database URL and regenerate (#515)
    
    * macs: update default OUI database URL
    
    * macs: update MAC prefixes

commit d55259681298bb6468695799a333194726d848c2
Author: Rob King <deadpixi@users.noreply.github.com>
Date:   Thu Sep 6 17:52:29 2018 -0500

    Add support for out-of-band VLAN IDs on afpacket sources. (#462)
    
    * Added support for out-of-band VLAN tagging.
    
    The Linux kernel suports VLAN offloading, which can end up
    stripping VLAN headers off of captured packets.
    
    For those who need it, the `afpacket.OptAddVLANHeader` option
    will add in a synthetic VLAN header created from the out-of-
    band information reported by the kernel. This is great, but
    slow.
    
    This commit instead provides that information out-of-band,
    which is faster but works out-of-band from the normal layer
    decoding mechanism.
    
    * Add AncillaryData to CaptureInfo.
    
    * Report capture VLAN via AncillaryData.

commit e3d24fb4a282b1108f5bdb3096755c2abca09a7b
Author: Rob King <deadpixi@users.noreply.github.com>
Date:   Thu Sep 6 17:51:16 2018 -0500

    Added accessors to the private socket stats fields. (#463)
    
    * Added accessors to the private socket stats fields.
    
    * Add QueueFreezes accessor.

commit 92e5e65befe96b77a96b8dd7cbba7d9f318b4afb
Author: Ralph Schmieder <ralph.schmieder@gmail.com>
Date:   Fri Sep 7 00:50:21 2018 +0200

    chg: implement CanDecode() for ICMPv6 messages (#506)
    
    * chg: implement CanDecode() for ICMPv6 messages
    
    * i

commit 99994c0d845ab5fc6c5e2e49131fec87bb64e4d5
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Fri Aug 31 16:50:56 2018 +0200

    Reset Length field in Ethernet.DecodeFromBytes
    
    This is necessary since the DecodingLayer interface states that the
    whole layer must be reset.

commit 86330a9645c2d1edbb544ce47654c58be0f016b4
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Sep 6 13:34:07 2018 +0200

    Only use preallocated options in tcp, if it is nil
    
    Old behaviour didn't even work correctly, since tcp.Options was always
    set to tcp.opts[:0] and therefore never nil.
    
    This improves number of allocations for decoding every packet in a 15 minute
    MAWI dataset 201702011400[1] from
    3608468 tcp.Options = append(tcp.Options, TCPOption{OptionType: TCPOptionKind(data[0])})
    to
      54290 tcp.Options = append(tcp.Options, TCPOption{OptionType: TCPOptionKind(data[0])})
    using in place decoding.
    
    Numbers are still a bit high since my implementation uses a ringbuffer
    of packets.
    
    [1] http://mawi.wide.ad.jp/mawi/samplepoint-F/2017/201702011400.html

commit a596417db1ca70100838d6a8d0b4964cab905bb9
Author: Michael Stapelberg <stapelberg@google.com>
Date:   Sun Jun 17 15:10:51 2018 +0200

    pcapgo: add OpenEthernet and a full capture example

commit 891bcf2f83cd6437da93839daef90f158ad63b25
Author: Yukino Song <nutosservice@gmail.com>
Date:   Thu Sep 6 23:44:33 2018 +0800

    Allow pcap_next_ex return value to be greater than 1 (#510)
    
    * Allow pcap_next_ex return value to be greater than 1
    
    * Fix code sytle
    
    * Add comments about pcap_next_ex

commit b6da84c0b8d2c57637b6cba3b055bc05ec15bfe5
Author: Mike Baynton <mike@mbaynton.com>
Date:   Thu Aug 30 11:52:08 2018 -0400

    Post-check whether requested offset is in range of available bytes. (#501)
    
    Without this, it seems a request for the capture info at, for example,
    byte 1, will tend to return the empty CaptureInfo struct.

commit 26846a826a54539ec169a71e03e0280543c65090
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Thu Aug 30 17:48:16 2018 +0200

    Convert LLC and SNAP to DecodingLayer interface (#505)
    
    * Convert LLC and SNAP to DecodingLayer interface
    
    * Make llc implementation pass linter (no underscores)

commit 14876e3f80ab71a6833b56a578424c4eefc02c1a
Author: negbie <nupagadi@posteo.de>
Date:   Tue Aug 28 14:41:20 2018 +0200

    Use flag vars only in main

commit 511567d6ae8083f45de05b8c00a4a300b51efa3b
Author: negbie <nupagadi@posteo.de>
Date:   Tue Aug 28 12:50:26 2018 +0200

    Extend afpacket example
    
    Use PacketDataSource interface so the user can easily switch between afpacket and pcap.

commit d9ba49ce8619de3c5fbd2f58168903b35b2ed0e0
Author: 1nflktd <henscalon@hotmail.com>
Date:   Mon Aug 13 12:39:25 2018 -0300

    Addition of DHCPv6 (#482)
    
    * commit inicial
    
    * dhcpv6 msg type addition
    
    * added string options
    
    * added more fields
    
    * added decoding
    
    * Adjusts
    
    * added option duid decoding
    
    * merge branch master
    
    * removed file wrong place
    
    * removed file wrong place
    
    * removed file wrong place
    
    * Added dhcpv6 test
    
    * removed newline
    
    * Adjusts merge
    
    * Adjusts merge
    
    * Adjust gofmt, govet, golint
    
    * Adjust govet
    
    * Update ports.go
    
    * changed duid to DUID and added net.HardwareAddr to LinkLayerAddress

commit 937a53e2c7008805200ec013147e9d600fc077b9
Merge: beae80d 55cbbb9
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Mon Jul 30 20:12:03 2018 +0200

    Merge pull request #485 from rschmied/master
    
    Add NewBPF func to create BPF from a dead (unassociated) handle

commit 55cbbb94d88255b94c9d2a95123c2565afaa67bf
Author: Ralph Schmieder <rschmied@cisco.com>
Date:   Mon Jul 30 10:54:06 2018 +0200

    Add: NewBPF allows to create a BPF without requiring an existing handle
    
    Signed-off-by: Ralph Schmieder <rschmied@cisco.com>

commit beae80d825632ab29bf430d9d8db5044f85bd14f
Merge: 588bd33 1b4c932
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Sun Jul 29 11:22:33 2018 +0200

    Merge pull request #495 from assafmo/patch-1
    
    Fix links indentation in the docs of pcapgo/read.go

commit 1b4c932bd70787603ac6f636ac44bf1b44143ddb
Author: Assaf Morami <assaf.morami@gmail.com>
Date:   Sun Jul 29 10:21:18 2018 +0300

    Fix docs indentation in pcapgo/read.go

commit 588bd3389721d8c1b0e3f3a327a100a28abaa1ca
Author: noibar <noibarr@gmail.com>
Date:   Wed Jul 25 15:29:52 2018 +0300

    reassmebly: Accept() with next expected ack comparison

commit c7727224fb67354e51bd820d2fc9fa7aa1273e2c
Author: noibar <noibarr@gmail.com>
Date:   Wed Jul 25 15:23:27 2018 +0300

    reassembly: add tcp options test

commit bcf23b5a944d1888105834c7b4e0e537c6ba8812
Author: John Shenk <john_shenk@hotmail.com>
Date:   Mon Jul 23 17:01:57 2018 -0500

    reassembly NewAssembler inits a byteContainer zero-len slice rather than array; addresses #483
    
    Revert "reassembly NewAssembler inits a byteContainer slice rather than array; addresses #483"
    
    This reverts commit 6a78fdc452a6cbb61a922052171d0707778ba5d4.
    
    reassembly NewAssembler inits a byteContainer slice rather than array; addresses #483
    
    removes unused const
    
    mods ret to initialize with zero len

commit ccf6d25d8f36eefaf2faac2405db46783fc1f8cb
Author: Greig Bannister <gbannister@nubeva.com>
Date:   Sat Jul 21 12:03:14 2018 +1000

    Fix for zeroing memory returned from PrependBytes()
    
    PrependBytes() expects the user to overwrite all bytes.  This fix
    ensures that all bits in all bytes are correctly overwritten

commit 315a3fcad6267bdb02fb178794a5955b8fed8945
Author: Mathieu <mathieu@bodjikian.fr>
Date:   Mon Mar 5 12:26:14 2018 +0100

    Implementation of SIP layer
    
        - Parsing first packet line (Request / Response)
        - Parsing headers (multi line and compact headers handled)
        - Useful getters for common headers (GetFrom, GetTo, ...)
        - Tests

commit 6fe0cc5ed59f93445f8b09026104521646db6d4f
Author: noibar <noibarr@gmail.com>
Date:   Wed Jul 18 16:52:45 2018 +0300

    reassembly: fix closing bug, close connection only if two halfs should be closed

commit 82725bd03c57879086686259cc58d3ba061a8ce9
Author: noibar <noibarr@gmail.com>
Date:   Wed Jul 18 16:44:35 2018 +0300

    tcpassembly: add flushing test - test doesn't pass because there is a bug in half connection closing

commit 79cff32cd2cb4b955635abee1ed8a632133d3420
Author: Gustaf Johansson <gustaf@pinon.se>
Date:   Thu May 24 09:00:27 2018 +0200

    layers: Add name & getters to LCM
    
    Adds getter for fingerprint of a LCM layer, getter for all Supported
    LCM fingerprints and the string representation of the LCM name when
    registering a new LCM payload layer.
    
    Co-Authored-By: TacoVox <jonas@derkahler.de>

commit d26664f9dcd3d61e328bc0bd3ad94eac7ce49ecb
Author: Noi Bar <noibarr@gmail.com>
Date:   Tue Jun 26 15:57:36 2018 +0300

    ip4defrag: delete flow from defragmenter on flush.
    
    https://github.com/google/gopacket/issues/475

commit c03e107cbba27aa2a0114b1308fce8d35da8b1f4
Author: Assaf Morami <assaf.morami@gmail.com>
Date:   Mon Jun 25 20:20:33 2018 +0300

    Comment on SetSnaplen existence
    
    SetSnaplen sets the snapshot length of the capture file.
    
    This is useful when a pcap file contains packets bigger than then snaplen. Pcapgo will error when reading packets bigger than snaplen, then it dumps those packets and reads the next 16 bytes, which are part of the "faulty" packet's payload, but pcapgo thinks it's the next header, which is probably also faulty because it's not really a packet header. **This can lead to a lot of faulty reads.**
    
    The SetSnaplen function can be used to set a bigger snaplen to prevent those read errors.
    
    This snaplen situation can happen when a pcap writer doesn't truncate packets to the snaplen size while writing packets to file. E.g. In Python, dpkt.pcap.Writer sets snaplen by default to 1500 (https:dpkt.readthedocs.io/en/latest/api/api_auto.html#dpkt.pcap.Writer) but doesn't enforce this when writing packets (https:dpkt.readthedocs.io/en/latest/_modules/dpkt/pcap.html#Writer.writepkt).
    
    When reading, tools like tcpdump, tcpslice, mergecap and wireshark ignore the snaplen and use their own defined snaplen. E.g. When reading packets, tcpdump defines MAXIMUM_SNAPLEN (https:github.com/the-tcpdump-group/tcpdump/blob/6e80fcdbe9c41366df3fa244ffe4ac8cce2ab597/netdissect.h#L290) and uses it (https:github.com/the-tcpdump-group/tcpdump/blob/66384fa15b04b47ad08c063d4728df3b9c1c0677/print.c#L343-L358).
    
    For further reading:
    - https:github.com/the-tcpdump-group/tcpdump/issues/389
    - https:bugs.wireshark.org/bugzilla/show_bug.cgi?id=8808
    - https:www.wireshark.org/lists/wireshark-dev/201307/msg00061.html
    - https:github.com/wireshark/wireshark/blob/bfd51199e707c1d5c28732be34b44a9ee8a91cd8/wiretap/pcap-common.c#L723-L742
      - https:github.com/wireshark/wireshark/blob/f07fb6cdfc0904905627707b88450054e921f092/wiretap/libpcap.c#L592-L598
      - https:github.com/wireshark/wireshark/blob/f07fb6cdfc0904905627707b88450054e921f092/wiretap/libpcap.c#L714-L727
    - https:github.com/the-tcpdump-group/tcpdump/commit/d033c1bc381c76d13e4aface97a4f4ec8c3beca2
    - https:github.com/the-tcpdump-group/tcpdump/blob/88e87cb2cb74c5f939792171379acd9e0efd8b9a/netdissect.h#L263-L290

commit 10a4317e6f5f0b72993a89ecfaa8ad207347df34
Author: Assaf Morami <assaf.morami@gmail.com>
Date:   Mon Jun 25 11:31:53 2018 +0300

    SetSnaplen to better control read parameters
    
    To better control what packet size to allow to read and what packet size to dump

commit 165a0afa8d2975ef02eff12550e6aa75d6a1c828
Author: Richard Strand <richard@nubolabs.com>
Date:   Thu Jun 14 21:18:23 2018 +0100

    Fix infinite loop when parsing malformed OSPF packet

commit 05f186d6f8f5e5e764b375e54aec3f8b6672db82
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jun 20 09:47:40 2018 -0600

    govet checks for includes, we can't vet pfring :(

commit b3bbc52482b07ed8b3544deb6fc91f89373c5d72
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jun 20 09:43:58 2018 -0600

    Fix install dep.
    
    Use this:
    https://docs.travis-ci.com/user/installing-dependencies/

commit d6dd2ce33f43a13623c367460f7d659c1618e1a1
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jun 20 09:41:19 2018 -0600

    Random fixes for golint.

commit 055652d5cea2b6a2fde00cfc331add6e413af636
Author: TacoVox <jonas@derkahler.de>
Date:   Mon Jun 4 07:31:14 2018 +0200

    Moved Defragmenter to New Folder Structure
    
    As discussed in https://github.com/google/gopacket/pull/449, the
    defragmenter was moved to a seperate package that will only contain the
    LCM defragmenter. This is done in order to enable a more clean package
    setup.

commit 7ecba9593fed743bf1865025a862c92594d60f7c
Author: TacoVox <jonas@derkahler.de>
Date:   Tue May 8 07:46:41 2018 +0200

    Fixed NextLayerType() Return
    
    As the LCM defragmenter will build the defragmented package under the
    header of the very first fragment, NextLayerType() should return the
    matching LayerType() in case the message is not fragmented or the first
    message of a fragmented one. Otherwise (all other fragmented messages),
    the method should return LayerTypeFragment.
    This patch fixes that.

commit b5b9f8450a3a41e7f7d285b6bbe829a78caddb14
Author: TacoVox <jonas@derkahler.de>
Date:   Fri May 4 10:19:14 2018 +0200

    Add Support for LCM Defragmentation
    
    This patch includes support for defragmentation of LCM packages, as
    specified in the LCM protocol description
    (https://lcm-proj.github.io/udp_multicast_protocol.html). This patch
    code should also be used in combination with an upcoming PR towards the
    GitHub LCM repository that adds golang + gopacket support.

commit 01424bd8d8897f73a955ee141cfb064b23bb1aa8
Author: Eugen Biegler <nupagadi@posteo.de>
Date:   Mon May 28 17:39:28 2018 +0200

    Fix fragment too small log output

commit 60ab61cd59496fcfa4d208b265ba79b1e37c1476
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun May 13 19:29:36 2018 +0200

    layers: Decode ICMPv6 Pings
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit ffe439921b3bd5510313e3dd812a6910aa52b7de
Author: Irfan Abid <irf.abid@gmail.com>
Date:   Sun May 13 15:00:59 2018 +0400

    Removed extraneous interface. Added all mandatory TLVs in SerializeTo function

commit 4474c6f19c04bfd4c573d9eb62d59d95a67b35b8
Author: Irfan Abid <irf.abid@gmail.com>
Date:   Sun May 13 15:00:59 2018 +0400

    Removed extraneous interface. Added all mandatory TLVs in SerializeTo function

commit 32f717f5b09b0bb80e4f78f383b49afc2945804c
Author: Irfan Abid <irf.abid@gmail.com>
Date:   Wed May 9 16:09:36 2018 +0400

    Added SerializeTo to LinkLayerDiscovery to statisfy SerializableLayer interface. ChassisID now satisfies a new interface LLDPSerializableTLV which ensures that each TLV is responsible for its own serialization

commit 3180281c2b3a62fb0ec4a30888197136ba0ff7d6
Author: Irfan Abid <irf.abid@gmail.com>
Date:   Wed May 9 16:09:36 2018 +0400

    Added SerializeTo to LinkLayerDiscovery to statisfy SerializableLayer interface. ChassisID now satisfies a new interface LLDPSerializableTLV which ensures that each TLV is responsible for its own serialization

commit 4d50fe9596458fdfc04f073751bf05496514f04c
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri May 4 11:37:46 2018 -0600

    AF_PACKET:  Adding back VLAN header optional.
    
    Makes the adding back of the VLAN header for AF_PACKET packet data
    optional and defaulted to off.  Especially for ZeroCopy, the addition of
    VLAN headers is a performance hit (I clocked a 10x slowdown on a fast,
    VLAN'd network).  While unfortunately it's counter-intuitive that the
    kernel (or NIC, or whatever) removes the VLAN header, it's also
    counter-intuitive that we return something to the user that the kernel
    didn't return to us.  So, let's go for the thing that's at least fast,
    while allowing for users to request the VLAN header if they'd like.

commit 642c535b3048e059773b7600b48b59208c553670
Author: TacoVox <jonas@derkahler.de>
Date:   Fri May 4 09:15:06 2018 +0200

    (layers) Added support for LCM protocol
    
    This patch features support for LCM layers. The code is based on the LCM
    protocol definition (https://lcm-proj.github.io/).
    LCM is a lightweight communications protocol that is used e.g. in the
    automotive industry for testing and developing purposes.
    
    The submitted patch allows for decoding LCM headers plus the registration
    of underlying decoders (which should be used in combination with an
    incoming patch towards the LCM GitHub repository that will emit gopacket
    code based on LCM defintions).

commit 28a83096fbe78359d86ddf0387ea7395f66321e6
Author: Gustaf Johansson <gustaf@pinon.se>
Date:   Thu May 3 11:08:46 2018 +0200

    Update ip4defrag with correct limits from RFC791
    
    This patch updates the limits set on the ip4defrag Layer to follow
    the definition in RFC791.
    Fragment offset according to the RFC:
        This format allows 2**13 = 8192 fragments of 8 octets each for a
        total of 65,536 octets. Every internet module must be able to
        forward a datagram of 68 octets without further fragmentation.
        This is because an internet header may be up to 60 octets, and the
        minimum fragment is 8 octets.

commit a5fcaa8c680ece28c600516a76d05f5b19eb46bc
Author: Richard JP Le Guen <richard.jp.leguen+github@gmail.com>
Date:   Wed May 2 20:56:45 2018 +0000

    Fixing bug with Router Advertisement `ManagedAddressConfig` and `OtherConfig` flags

commit f1dcaa0fbe0cbf307fc9247ecc348f48b0c2f4d3
Author: Richard JP Le Guen <richard.jp.leguen+github@gmail.com>
Date:   Tue Apr 24 16:11:51 2018 +0000

    Adjusting beginning of payload for IPv6 packets which include HopByHop options
    
    Without this fix the bytes for the HopByHop options end up beind decoded as part of the next layer
    
    https://github.com/google/gopacket/issues/435

commit a07aaf2710bebf587aaa3182a9469462e20c3a94
Merge: e2d74e7 98bb515
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 24 12:51:48 2018 -0600

    Merge pull request #349 from charredlot/eapol-key
    
    Add EAPOL-Key layer for 802.1x authentication

commit e2d74e7fb75416f896be012f4c35a7f6391fe0c7
Author: artagel <dan@syssec.biz>
Date:   Tue Jan 30 09:00:49 2018 +0400

    gofmt on file.

commit d0b391a14eb3246fa07c105f57318bd09153e9c6
Author: artagel <dan@syssec.biz>
Date:   Sat Jan 27 16:59:42 2018 +0400

    Added all Dot11 Information Elements in parser

commit f6c93e19b5879871dddffe4c12139ac33f65dc78
Author: jerome-laforge <jerome.laforge@gmail.com>
Date:   Fri Oct 28 21:57:31 2016 +0200

    According RFC:
    The value of the length octet does not include the two octets specifying the tag and length.
    The length octet is followed by "length" octets of data.
    Any options defined subsequent to this document MUST contain a length octet even if the length is fixed or zero.

commit 98bb515da1e68632d3c4d844683615f412a52050
Merge: 9404517 617ce7e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 24 12:47:33 2018 -0600

    Merge branch 'master' into eapol-key

commit 617ce7eefeb627daacef99697ae7d923aa50e4ef
Author: Richard Strand <richard@nubolabs.com>
Date:   Fri Apr 20 18:22:39 2018 +0100

    Add test for 802.11 HT Control packet

commit b37abca0312b0ecc62d4e74eaaafd3fef1d934ac
Author: Richard Strand <richard@nubolabs.com>
Date:   Fri Apr 20 18:22:32 2018 +0100

    Remove non standard 802.11 padding in radiotap layer

commit 67c6f1eaece6c88801bc5486fcbbf885f07ff28b
Author: Richard Strand <richard@nubolabs.com>
Date:   Fri Apr 20 18:22:27 2018 +0100

    Decode dot11 WEP layer after data layer

commit 2d4ef08e194403197a517c2509408abdeda202da
Author: Richard Strand <richard@nubolabs.com>
Date:   Fri Apr 20 18:22:11 2018 +0100

    Add support for 802.11 HTC information in 802.11-2016

commit 9d0c2435c1e2a38eef8f8d67e0377212388f8d0d
Author: Sylvain Afchain <safchain@gmail.com>
Date:   Thu Mar 8 09:23:25 2018 +0100

    Add Vlan support to afpacket

commit 0d98085faf0e154aa7a48dc5612795135c6068b2
Author: Aleksey Kiselev <bass3t@gmail.com>
Date:   Mon Feb 12 16:43:09 2018 +0300

    Add functions to open offline pcap file by *File

commit 65d144d4c3f90014ab2ed32d73f0a8d90e33f737
Merge: 157f9f8 5e0ed67
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 24 12:34:23 2018 -0600

    Merge pull request #417 from Palen/master
    
    New protocol GTP

commit 5e0ed679ebe3cc1e0325a3817c850e1c308f3a8a
Merge: 1f16dc4 157f9f8
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 24 12:32:36 2018 -0600

    Merge branch 'master' into master

commit 157f9f84344746b9ed8ca4e92db2419ad94d4fc6
Author: Aleksandr Rogozin <aleksandr@rogozin.us>
Date:   Mon Apr 9 20:34:31 2018 -0400

    Grammar fix

commit 1d3841317373a001d49e2abcc5be4e442211d454
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Tue Mar 20 13:40:13 2018 -0700

    gopacket: fix vet errors
    
    Omit values from range.

commit 3135c7f221d3899af4ec9a71c9f2e53f3cae9dea
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Wed Feb 28 18:32:52 2018 -0800

    layers: last bit of polish for NDP
    
    Add Stringer for ICMPv6Opt and ICMPv6Option. Add LayerClass for NDP
    messages.

commit 3f3cb44dc14c5a2512a08d49af8335961210073b
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Wed Feb 28 17:08:27 2018 -0800

    layers: add documentation to NDP
    
    Add documentation for all exported names.

commit 9e8095a5ac449ca907df03795d31443aaf20e76c
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Fri Feb 23 18:18:22 2018 -0800

    layers: mostly working ICMPv6 NDP
    
    Implement SerializeTo. Change how `checkLayers` works so that it checks
    layers up to the payload.
    
    Needs documentation still.

commit be8987ba4eb82a1f2e63281cbdd66399bf91fee4
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Fri Feb 23 15:36:12 2018 -0800

    layers: fix flag decoding for icmp6 messages
    
    Add missing decoding and fix bit masking.

commit a2ac8ef9759d3bdd5caf683b76e06dd9ae1fc9e8
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Fri Feb 23 12:40:47 2018 -0800

    layers: partially complete ICMPv6 NDP
    
    Implementing decoders for the neighbor discovery protocol. Decoding
    seems to be working on a couple of simple test cases.

commit b40365fca6ccb41d3892c4caa0f6e7545ee2fdcf
Author: José Carlos Nieto <jose.carlos@menteslibres.net>
Date:   Sun Feb 11 14:00:25 2018 -0600

    add time type for Android

commit 1f16dc4531344109b777dcddd8c2a92ccc6de472
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 18:40:57 2018 +0100

    Fix golint

commit 8c602674d1c37d2e02d7c6ff52789483728cdb64
Merge: 12e36ec 1cfbee1
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 17:59:30 2018 +0100

    Merge pull request #3 from Palen/add_gtp_protocol
    
    Add gtp protocol

commit 1cfbee1e8653a4a67dcac815234f214da6699e8a
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 17:55:39 2018 +0100

    Done

commit a774b93c17654780ae85843c99306ab3055849f8
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 12:31:56 2018 +0100

    Fix BaseLayer

commit 12e36ec2b90269a0a031a8293d3106b847bf7ab4
Merge: f8085a7 2418465
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 10:50:57 2018 +0100

    Merge pull request #2 from Palen/add_gtp_protocol
    
    Add gtp protocol

commit 2418465e943316f4d9133abdbae9564076e21f41
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 10:45:53 2018 +0100

    Fix Copyright

commit a1354b2eec14cb5d92f06a2d230fea4aee806995
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Mon Feb 5 10:38:38 2018 +0100

    Fix extension header

commit d679aeb5f85b1cd9305d21e976b4b14ba8158f22
Author: Albert Palenzuela <albert.palenzuela@gmail.com>
Date:   Fri Feb 2 15:19:43 2018 +0100

    Add gtp protocol

commit f6e8249cb86ffabb46d458db0983147fbea89a6d
Author: Gernot Vormayr <gernot.vormayr@nt.tuwien.ac.at>
Date:   Wed Jan 31 21:57:34 2018 +0100

    Remove now unneded 386 sockopt calls from afpacket

commit 6b9887d9b3f81b4eb80afebfc100c00d2aa456f2
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Jan 26 09:48:08 2018 -0700

    Fix tcpassembly overflow off-by-one.

commit 0334feee442808e595b590ff8fdce2d8645f108d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Jan 25 09:57:16 2018 -0700

    Fix new lint errors in tests.

commit 77624d100a1b55c715de93bf61998416779f2a1f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Jan 25 09:50:41 2018 -0700

    Make lint files in layers a blacklist, so new files are processed.

commit f8085a70289fe9d044ceeb8ab977636a24abe69e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Jan 12 09:58:15 2018 -0700

    Cap memory usage for bidi example.
    
    Should fix #405.

commit 73fbf50801187ea0dc46b62fd56254414aab631f
Author: Gopikrishna Kodali <gkodali@zededa.com>
Date:   Tue Jan 9 00:01:38 2018 +0530

    Changing data type of durationMillis to uint

commit 551ee30885326483696e308bf41063809a571fd5
Author: Gopikrishna Kodali <gkodali@zededa.com>
Date:   Mon Jan 8 22:52:16 2018 +0530

    Changing parameter name to SetPollDuration to make easier to understand the time unit as milli seconds

commit 633e6680fc900c4205a6ae7850dc714700f8ae49
Author: Gopikrishna Kodali <gkodali@zededa.com>
Date:   Mon Jan 8 22:19:22 2018 +0530

    go fmt changes

commit d3778eb84c85306312075feeea7d29b99f8ba39c
Author: Gopikrishna Kodali <gkodali@zededa.com>
Date:   Sat Jan 6 15:25:39 2018 +0530

    Adding comments

commit 05f4cc897a4e5c017f0c348dc6c8c67f09ee880e
Author: Gopikrishna Kodali <gkodali@zededa.com>
Date:   Sat Jan 6 15:19:41 2018 +0530

    Added apis for setting pfring's poll_watermak and poll_duration

commit cd2c957bda20a83d89ba6a0c5eb1eb66e95fba4d
Author: Lehner Florian <dev@der-flo.net>
Date:   Wed Jan 3 20:45:41 2018 +0100

    Rename to old names
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit e42a7cc208f45fa1cbd5b29d3e9ae6949958f553
Author: Lehner Florian <dev@der-flo.net>
Date:   Tue Jan 2 16:20:23 2018 +0100

    layers: Improve OSPFv2 decoder
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit b42c052c5272831e5d93ddd6b5a261a78e753e3e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Dec 13 15:30:39 2017 -0700

    Use different data for test_ethernet.
    
    Fix #399.

commit 388ed4dd62a765d0006e84e6055a7cab4fc81435
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Dec 5 22:46:25 2017 -0700

    Fix up DNS encoding, it was adding 2 extra bytes to every resource
    record.

commit 9a4831ae31a22522f371b0209aa6774946f9a975
Author: Kris Watts <kris.watts@gravwell.io>
Date:   Tue Dec 5 08:18:33 2017 -0700

    Updated the radiotap layer to reallocate when creating a non-existent FCS checksum.  This is a better behavior because it doesn't force callers to use reflection to set cap=len on packets

commit 67a21c4470a0598531a769727aef40b870ffa128
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Nov 28 15:01:57 2017 -0700

    Reset all parts of Reassembly for new page.
    
    Before this, the Skip part of the Reassembly was sometimes not correctly
    reset for new pages.  Fixes #389

commit b8bab68a4d8cb61dc32887af5095121b2b1829b4
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Nov 27 09:54:10 2017 -0700

    Fix #385 by truncating DHCP option list.

commit c3190312b3b0f82ebb562249861afe41e82b9f2c
Author: Scott Meeuwsen <3615587+nu11ptr@users.noreply.github.com>
Date:   Mon Nov 27 11:04:18 2017 -0500

    Move writePacketHeader buffer into struct

commit 67815a118d0d46bcf80c4e0a98d98674b22aa143
Merge: 78066d7 735dd88
Author: florianl <florianl@users.noreply.github.com>
Date:   Wed Nov 22 21:25:11 2017 +0100

    Merge pull request #381 from corny/fix-docs
    
    Fix example code in docs

commit 78066d76c48e545c2b6fdda7ebbc089928b53f3e
Author: Ralph Schmieder <rschmied@cisco.com>
Date:   Sat Nov 4 14:45:37 2017 +0100

    go fmt changes

commit edf9cfcfa49033174e735ac8b0f23af641fa9edb
Author: Ralph Schmieder <rschmied@cisco.com>
Date:   Sat Nov 4 14:25:45 2017 +0100

    Activate(): handle PCAP_WARNING, provide proper error message

commit 92f75c8d3f9249a2aa47fd0aaff4c881051ba3d4
Merge: b4efbcb fa2cf54
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Nov 2 09:54:09 2017 -0600

    Merge pull request #382 from jcrussell/master
    
    pcap: potential fix for performance regression

commit fa2cf54d72acd452a072ef005e231b5d7a7b5ebd
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Thu Nov 2 06:57:45 2017 -0700

    pcap: potential fix for performance regression
    
    Rely on libpcap's blocking when the timeout is set to BlockForever and
    make sure to waitForPacket at least once before trying to read again
    when the timeout is greater than 0.
    
    Updates #339, #372.

commit 735dd88284ad8f26348f0228ed24df9fff7d613d
Author: Julian Kornberger <jk+github@digineo.de>
Date:   Sat Oct 28 14:08:31 2017 +0200

    Fix example code in docs

commit b4efbcb7f32ff9331ca217f0b4799b39118e28d6
Merge: 80f4fb3 6de5ba9
Author: florianl <florianl@users.noreply.github.com>
Date:   Tue Oct 24 21:57:20 2017 +0200

    Merge pull request #373 from florianl/datalink
    
    Extend Datalink API

commit 80f4fb33facd42362e1007ba5923b766338d042c
Merge: b89fd41 162f2eb
Author: florianl <florianl@users.noreply.github.com>
Date:   Tue Oct 24 21:56:34 2017 +0200

    Merge pull request #375 from florianl/SnapLen
    
    Extend pcap API

commit b89fd41bc03cd49a19f60c9c51ec719dbdacc51e
Merge: 339db95 0c15e85
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 24 09:44:35 2017 -0600

    Merge pull request #377 from gconnell/master
    
    Utilize some trickiness to reduce init memory usage in enums.

commit 0c15e8551d08cb75a0799a640e6ae4863eed4e19
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Oct 23 10:21:14 2017 -0600

    Add function comments into enums_generated.

commit 8c5cfc5ae25c08c58287b22231251f3f9c155ec6
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Oct 23 10:15:33 2017 -0600

    Attempt to reduce memory usage caused by enums.go strings.

commit 162f2ebc80a409c91696a96546ca823f39cea2f7
Author: Lehner Florian <dev@der-flo.net>
Date:   Sat Oct 21 21:29:11 2017 +0200

    Extend pcap API
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 6de5ba9993083e4b5ee60a2c1a4ed87bc84ce744
Author: Lehner Florian <dev@der-flo.net>
Date:   Thu Oct 12 21:31:34 2017 +0200

    Extend Datalink API
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 339db9544045260e6b5720b7dc50a08ea1bab18b
Merge: 518dd06 09ef05c
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 10 14:00:45 2017 -0600

    Merge pull request #371 from notti/udp_testing
    
    Add internal testing function for ports to udp (copied from tcp)

commit 09ef05cc7c92c604465aba8fcdfb13b4d2648ee7
Author: Gernot Vormayr <gvormayr@gmail.com>
Date:   Tue Oct 10 21:35:22 2017 +0200

    Add internal testing function for ports to udp (copied from tcp)

commit 518dd067dfd4885c065f214a31830a6e34ddb6c3
Merge: eb81728 0e1d984
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 10 12:14:00 2017 -0600

    Merge pull request #370 from gconnell/master
    
    Allow DecodingLayerParser to ignore unsupported layers.

commit 0e1d984258d7af797a140444a3d135389c7ac389
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 10 11:38:10 2017 -0600

    Allow DecodingLayerParser to ignore unsupported layers.

commit eb817282622df2e88d0f214136b9c435d7d2799c
Merge: 3ed3928 47e614f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 10 11:03:37 2017 -0600

    Merge pull request #368 from gconnell/master
    
    Stop pointers-of-pointers from escaping with cgo.

commit 47e614fcdb33f819d0074378e15aa2628ae88b3f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 10 09:54:59 2017 -0600

    Stop pointers-of-pointers from escaping with cgo.
    
    Yet more evidence that escape analysis in Go is really weird.  It
    appears that the pointers to pkthdr and bufptr were being allocated on
    the heap... attaching them to the handle itself appears to have helped
    out with this.
    
    This has pretty hacky cast-to-uintptr magic in it to get around cgo's
    error:
    
      panic: runtime error: cgo argument has Go pointer to Go pointer

commit 3ed392865dcc6faee63c38c27a1f116ff85f30df
Merge: 5a4b920 c763468
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Oct 9 09:16:26 2017 -0600

    Merge pull request #366 from florianl/RawSockaddr
    
    Add check if value exists

commit c7634682e33f7b3e35873ecf47e467fb6805d4ae
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun Oct 8 22:07:12 2017 +0200

    Add check if value exists
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 5a4b920265665e5e79734a35e4b96c86c8b1e15f
Merge: 51d8d38 980628a
Author: florianl <florianl@users.noreply.github.com>
Date:   Sun Oct 8 16:11:47 2017 +0200

    Merge pull request #363 from florianl/iface
    
    Add element to Interface struct

commit 51d8d3839ed06957c1c6b6bd04f948207c234d82
Merge: 8e484f3 cbf11f9
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Oct 6 13:49:36 2017 -0600

    Merge pull request #364 from florianl/ifaceAddr
    
    Add broadcast and P2P address to InterfaceAddress struct

commit cbf11f98749d22c65738191239bd43731cff2d8c
Author: Lehner Florian <dev@der-flo.net>
Date:   Fri Oct 6 21:12:06 2017 +0200

    Add broadcast and P2P address to InterfaceAddress struct

commit 980628a13beb579735f3adcf10303767e96a37ce
Author: Lehner Florian <dev@der-flo.net>
Date:   Thu Oct 5 20:59:41 2017 +0200

    Add element to Interface struct
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 8e484f31b1237166f00e4896d27ddde259540632
Merge: 89f72a5 93b20de
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Oct 2 11:56:00 2017 -0600

    Merge pull request #332 from florianl/ospf-layer
    
    [proposal] ospf layer

commit 93b20de5914220e0f7ca8b21eb2bc9b249e4f0cc
Merge: c0efdfa 89f72a5
Author: florianl <florianl@users.noreply.github.com>
Date:   Mon Oct 2 19:52:49 2017 +0200

    Merge branch 'master' into ospf-layer

commit 89f72a52536125efb2fb81765c311aa4b835bff8
Author: Andrew Gutekanst <andrew.gutekanst@gmail.com>
Date:   Tue Sep 19 22:36:09 2017 -0700

    Fix IPv4 routing
    
    Code was differentiating between IPv4 and IPv6 by using the length of a net.IP type,
    which made in wrongly assume that all IP addresses were IPv6.
    
    To quote the docs (https://golang.org/pkg/net/#IP):
    "Referring to an IP address as an IPv4 address or an IPv6 address is a semantic property
    of the address, not just the length of the byte slice: a 16-byte slice can still be an IPv4 address."

commit c8777b2259a56bb0ab51af6fd8d4150e5f07b7b9
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Sep 19 13:08:34 2017 -0600

    Regenerate ports/macs.

commit e133721a84d69f54a8b6b8a8bfedb4c2508dc769
Author: Lehner Florian <dev@der-flo.net>
Date:   Mon Oct 2 19:01:09 2017 +0200

    Add expected error check

commit feff7a8c3dbf2dc29de99e7051c8f0f69ac760c4
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun Oct 1 17:23:32 2017 +0200

    add unknown file format test
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 8476ae4a955c7b8ce4aece5d87c9eac5aa9f3a55
Author: Jonathan Thurman <jthurman@thurmantech.com>
Date:   Fri Sep 29 22:05:49 2017 -0700

    Add layer for Bidirectional Forwarding Detection control packets

commit 11c65f1ca9081dfea43b4f9643f5c155583b73ba
Author: Todd Neal <todd@tneal.org>
Date:   Thu Sep 28 09:01:00 2017 -0500

    fix nfds error in select statement
    
    From man page for select "nfds should be set to the highest-numbered
    file descriptor in any of the three sets, plus 1". This was causing
    one of our apps to never capture packets as the fd returned by
    pcap_get_selectable_fd was 8 and then never checked.

commit c0efdfa3d150f178dfaac87f762ff8d092ee1f0e
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun Sep 24 20:31:45 2017 +0200

    Fix format
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 1a29faf4f27cdce2abfcc293d7be3871b05b232b
Merge: b2243ca 93b7821
Author: florianl <florianl@users.noreply.github.com>
Date:   Sun Sep 24 20:27:27 2017 +0200

    Merge branch 'master' into ospf-layer

commit 93b782132903d1846aab74cb1f62e6138564949f
Author: Nicolas PLANEL <nplanel@redhat.com>
Date:   Wed Sep 20 09:53:10 2017 +1000

    add a simple STP decoder

commit 26ec6f897fc7b8152729c2f52f91dfa54c791ca1
Author: Jonathan Thurman <jthurman@newrelic.com>
Date:   Sat Sep 16 15:31:43 2017 -0700

    more elegant solution for decodeExtendedRouterFlowRecord address type detection, matching decodeExtendedGatewayFlowRecord

commit 940451764f073c1bca137b5252f6a3f65fb07d4f
Author: charredlot <charredlot@gmail.com>
Date:   Sat Sep 16 14:26:09 2017 -0700

    Add EAPOL-Key layer for 802.1x authentication

commit 92028c3b3f02c1ff69b17058a2302ba1bb44b16f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Sep 12 10:04:44 2017 -0600

    Fix pcap's timeout for Unix.
    
    For PCAP, we should:
    
    1) if we have a timeout, return an error when that timeout has been hit
    and no packet received.
    2) if we have a negative timeout, loop forever waiting for a packet,
    checking every -timeout.

commit de4561503ce64dc19446ee65022ac2ced9ff553f
Author: Lehner Florian <dev@der-flo.net>
Date:   Sat Sep 9 21:23:39 2017 +0200

    Improve own decoder example
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 0d29d95ae0f17f4e256fbf453fdd5685bae39328
Author: Ian Rose <ianrose14@gmail.com>
Date:   Thu Sep 7 09:11:47 2017 -0400

    add Snaplen() method to Reader to access private snaplen value

commit 336d525da0394e7a6b59df317fc113db4b5e1443
Merge: 728d569 9b17b2c
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Thu Sep 7 17:31:00 2017 +0200

    Merge pull request #342 from jthurman42/jthurman/sflow-decodeExtendedRouterFlowRecord
    
    Fix: sflow Extended Router Flow Record skipping IP type field

commit 9b17b2c8bc5dc07e6cda078960cde707046013c0
Author: Jonathan Thurman <jthurman@newrelic.com>
Date:   Wed Sep 6 10:14:03 2017 -0700

    sflow decodeExtendedRouterFlowRecord was missing address type detection, and decoding was off by 4 bytes if ExtendedRouterFlowRecord was not the last sample

commit 728d569fa6e42a8fe1c6ef4bd9ca7b26ff1ba3c2
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Aug 30 11:42:12 2017 -0600

    Add test for nonexistent file to pcap.

commit 895488bc9260b091df44a3937a15cef7b0aaae6a
Author: ci4ic4 <ci4ic4@gmail.com>
Date:   Mon Aug 21 18:32:46 2017 +0100

    Add NetBSD support
    
    Found during build of mongoreplay on NetBSD.

commit b2243ca953e89d2be96e2bbde6263ec7aada2ac9
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun Aug 20 00:25:35 2017 +0200

    Handle error message
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 10f1d9c0864090d95182d24c59db28f5faeba87f
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun Aug 20 00:17:01 2017 +0200

    Add short documentation
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit d4f74fddb76fd0b471c3da08383caae696c0554d
Author: Lehner Florian <dev@der-flo.net>
Date:   Sat Aug 19 22:58:24 2017 +0200

    Extend test for LSA
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit bcf45cc0e938215adea87f0797dfebd6ee841299
Author: Lehner Florian <dev@der-flo.net>
Date:   Sat Aug 19 20:01:47 2017 +0200

    Implement LSAs
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 1fa3904ae7ea9e68949fd979982df7e6f39ee406
Author: Lehner Florian <dev@der-flo.net>
Date:   Fri Aug 18 23:10:49 2017 +0200

    Add LinkStateAcknowledgment Pkg
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 4606ee3ec1c76563a868ce34c7f45aa1f7538cde
Author: Lehner Florian <dev@der-flo.net>
Date:   Fri Aug 18 22:44:34 2017 +0200

    Add LinkStateRequest packet
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 4592587c2ac2ae9c68c0903aca00f306bb5b4552
Author: Lehner Florian <dev@der-flo.net>
Date:   Fri Aug 18 22:28:06 2017 +0200

    Add test for HelloPkg and DbDescPkg
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit bf22df3e556da9b34fde32d81cb25810da0f60c3
Author: Lehner Florian <dev@der-flo.net>
Date:   Fri Aug 18 22:27:26 2017 +0200

    Add DatabaseDescription packet
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 87f93cd575cd6f1de62b3d9e679ab4df17c01843
Author: Lehner Florian <dev@der-flo.net>
Date:   Thu Aug 17 22:45:02 2017 +0200

    Implement Hello Packet
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 9230aeb46595095b67592c67b29b53bc7bc6e6e6
Author: Jan Zaeske <j.zaeske@addmore.de>
Date:   Thu Aug 17 11:28:22 2017 +0200

    adding support for discarding on captured data

commit ead5261a648e60e586838ef49b7dc6923f87fcd6
Merge: 6b425dd 81b9c4b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Aug 17 09:24:56 2017 -0600

    Merge pull request #337 from jzaeske/fix-reassembly
    
    fixing memory leak in reassembly

commit 81b9c4b8d3d64e81a49d6455e907c90d332c60ad
Author: Jan Zaeske <j.zaeske@addmore.de>
Date:   Thu Aug 17 11:38:49 2017 +0200

    fixing memory leak in reassembly

commit 37d0b4b862017297b22f5e1c0ecea043457ef4cb
Author: Lehner Florian <dev@der-flo.net>
Date:   Wed Aug 16 21:04:48 2017 +0200

    Refactor code
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 6b425ddcd965cc865db6c3f06227ca2d2b95084b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Aug 11 08:46:29 2017 -0600

    Fix windows errors introduced in
    7d9ba85c47bb41298fed10f5769f793741de187f

commit 5a61445f7db0711d6d51751ce9c5f25c8e7a89e9
Author: Lehner Florian <dev@der-flo.net>
Date:   Tue Aug 8 20:31:40 2017 +0200

    Remove empty line
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 7d9ba85c47bb41298fed10f5769f793741de187f
Merge: 8af772c 25a8a4c
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Aug 8 11:56:35 2017 -0600

    Merge pull request #256 from jcrussell/master
    
    pcap: make stoppable when no packets to sniff

commit 25a8a4cf0ce54e2461c8467c3857f8d00a302fe3
Merge: ca174c4 8af772c
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Tue Aug 8 08:18:20 2017 -0700

    Merge remote-tracking branch 'origin/master'

commit 7e2cbb9e93522c76fb700dca622484fe454156a4
Author: Lehner Florian <dev@der-flo.net>
Date:   Mon Aug 7 21:52:23 2017 +0200

    Add missing comments
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit dadf3cc8ad99fdef27cefc02bca5cbc2534f75b1
Author: Lehner Florian <dev@der-flo.net>
Date:   Sun Aug 6 15:18:44 2017 +0200

    Merge OSPF version 2 and version 3
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 471f801998579de6e65b8c8b03e4a498d29e7a86
Author: Lehner Florian <dev@der-flo.net>
Date:   Sat Aug 5 23:07:53 2017 +0200

    Register OSPFv3
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 70a687bbfc03b2f38b8bbb923f8cf5ad42bd5800
Author: Lehner Florian <dev@der-flo.net>
Date:   Sat Aug 5 22:17:41 2017 +0200

    Start to add OSPFv3 Layer
    
    Signed-off-by: Lehner Florian <dev@der-flo.net>

commit 8af772c0bcc826f671fd7c133917fec9686d720d
Author: Christopher Tran <me@christran.in>
Date:   Mon Jun 26 20:50:14 2017 -0400

    Run go fmt on EAPOL code

commit d5555246bc3d415d1b9cc9604bc4949844441dda
Author: Christopher Tran <me@christran.in>
Date:   Mon Jun 26 20:12:00 2017 -0400

    import binary library

commit e9967249fd94d9bcf4447dcc7710b193eaebf70e
Author: Christopher Tran <me@christran.in>
Date:   Mon Jun 26 17:44:30 2017 -0400

    implemented EAPOL length field and serializeTo method from issue #249

commit e20408befa7dcef61c3c35f53df06d3f8a194e60
Author: miros <mirosm@mirosm.ru>
Date:   Mon Jun 5 13:28:22 2017 +0300

    reset IPv4 Options slice during new data decoding

commit f8cc1fb9ff67a83a8a202df16e5639c38c08aab4
Author: Toon Schoenmakers <schoentoon@users.noreply.github.com>
Date:   Sat May 27 15:16:45 2017 +0200

    Fixed a bracket issue in the documentation

commit f10e8ef82a38b32acce3de1d6cec5453a2a28c74
Author: Jente Hidskes <hjdskes@gmail.com>
Date:   Sun Mar 19 21:07:28 2017 +0100

    Register decodeDot11 for LinkTypeMetadata

commit 95f187446464ce95c6dbcb26475ebe7a82e1d3ed
Author: Steven H. Wang <wang.steven.h@gmail.com>
Date:   Wed Mar 22 13:59:24 2017 -0700

    vxlan: add SerializeTo method

commit 97d28e1fb0a3bdc5ef98981fb8de1d9632ccac4f
Author: nogoegst <nogoegst@users.noreply.github.com>
Date:   Wed May 3 09:33:17 2017 +0000

    Fix a typo

commit a803ad07c6e4673207771e030a5f6241212c14ba
Author: Sylvain Baubeau <sbaubeau@redhat.com>
Date:   Fri May 12 14:11:24 2017 +0200

    Allow overriding ICMPv6 decoder

commit 9a4afe4251043d5c4c66a914ecb0a1227f7070d9
Author: Dmitry Savintsev <dmitris@users.noreply.github.com>
Date:   Tue May 23 15:55:07 2017 +0200

    fix typo in comment
    
    s/soruce/source

commit 0b5422b293708336751b8204b135a20eda9e003b
Merge: 9cdfdb6 a5a75e6
Author: Sylvain Baubeau <sbaubeau@redhat.com>
Date:   Tue May 23 13:32:00 2017 +0200

    Merge pull request #318 from dmitris/patch-1
    
    fix typo

commit a5a75e6f1c46c45b03f4ac84552142f62e8d0dc8
Author: Dmitry Savintsev <dmitris@users.noreply.github.com>
Date:   Tue May 23 11:39:56 2017 +0200

    fix typo
    
    s/symetric/symmetric

commit 9cdfdb6114d5e6438bd519a60e4fcfd29af087b8
Author: Ivan Markin <twim@riseup.net>
Date:   Wed May 3 22:44:18 2017 +0000

    Simplify NTP parsing

commit c07b1da80519a57fe241d6b2949279862096a03d
Author: Ivan Markin <twim@riseup.net>
Date:   Wed May 3 22:35:36 2017 +0000

    Simplify NTP serialization

commit 66e5b2db337a241f4eea6914a313132dc0d89c7e
Author: Sigurd Hogsbro <sigurd@pegasus.ae>
Date:   Wed May 10 00:50:24 2017 +0400

    1. Corrected LinkType enums
    2. Corrected dimensions of lookup tables
    3. Enable LinkType 105 (802.11) decoding

commit eb9a4a92b3b915bbc31bb5c73e633f0a50474af9
Author: Ivan Markin <twim@riseup.net>
Date:   Mon May 8 00:42:43 2017 +0000

    Implement SerializePacket

commit b0b789be7511f047cf2cf6bf9ef61bf83ebfb8c3
Author: Ivan Markin <twim@riseup.net>
Date:   Wed May 3 21:52:36 2017 +0000

    Implement SerializeTo() for NTP layer

commit a9784fc2b9489431cc621a74e8b54893ec145c97
Author: xuzhaokui <xuzk1992@gmail.com>
Date:   Wed Apr 26 09:55:12 2017 +0800

    x

commit 89d8340dddc888299b04102c0844cc02ee9f4bc1
Author: xuzhaokui <xuzk1992@gmail.com>
Date:   Tue Apr 25 11:05:20 2017 +0800

    fix af_packet get socket stats stuck

commit 7d979f41c79b4e95e8af43df848b48f80df6d73e
Author: James Rouzier <rouzier@gmail.com>
Date:   Fri Apr 21 23:30:35 2017 -0400

    Fix the calculation of the length

commit 23e6c6ceb324fa5c95a7226364949b86b8a4920b
Author: James Rouzier <rouzier@gmail.com>
Date:   Fri Apr 21 18:09:38 2017 -0400

    Add test for DHCPOptPad off by one

commit 35a6286ae5bf525c31eab28ca01e7680dd9009e4
Author: James Rouzier <rouzier@gmail.com>
Date:   Fri Apr 21 18:08:31 2017 -0400

    Fix off by one error with the dhcp pad option

commit 5a957b58181fbfba836748ad7de5c5c9aece09c5
Author: James Rouzier <rouzier@gmail.com>
Date:   Thu Apr 20 16:26:22 2017 -0400

    Avoid the double free of the bpf object

commit 67129f01f11f309703e3cc04ae9af1684227cc38
Author: Zvi Cahana <zvic@il.ibm.com>
Date:   Tue Apr 18 14:31:55 2017 +0300

    determine IP endpoint type based on structure rather than length

commit 26acf8742bf9df387415503f476867f3bddc256e
Author: Sentryo R&D <developers@sentryo.net>
Date:   Mon Mar 20 11:25:17 2017 +0100

    ip4defrag: add TODO about duplicate data handling
    
    The current code doesn't handle the situation where we receive a
    fragment that contains both duplicate and new data; add an explicit TODO
    so that we can fix it later.

commit 525e3600ce106bb8a9ca8c5cfad8221cc5413c19
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 9 16:20:14 2016 +0100

    ip4defrag: flush fragment list and ignore duplicates
    
    This commit fixes two major issues.
    
    The first bug was that the fragment list per IPv4 flow was *never*
    flushed. We are now flushing it after each successful packet rebuild.
    
    The second one was that when we received a duplicate fragment, we were
    considering it as a valid one. We are now ignoring any new fragment at
    the same offset as an earlier one.

commit b28ce7147a06b23a37cacd4bf2119f9da8dd51c4
Author: Sylvain Afchain <safchain@redhat.com>
Date:   Fri Jan 13 16:34:03 2017 +0100

    avoid call to header.next after poll error
    
    In case of a poll error it is a mistake to call
    next to the header. This patch introduces a
    variable that protect this call.

commit 49ce4fa2ca24b5e1374fe92ebb9d4664269c66c1
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Mar 6 10:56:05 2017 -0700

    Remove a lot of stuff from CONTRIBUTING.
    
    Some of this was due to old code.google.com workflow.

commit 02895cc6ff65ce93b436fd2834b45f80bd243729
Author: Joe LeGasse <joelegasse@gmail.com>
Date:   Fri Mar 3 16:40:27 2017 -0500

    afpacket: add SetBPF method
    
    Sometimes, only a subset of the traffic found on an interface is of
    importance to an application. Rather than always capturing all of the
    traffic, this change would allow the user to attach a raw BPF filter
    directly to the socket.

commit e3b37923d2d3d9cba7d45038a2be5656eccfe291
Author: Ben guidarelli <ben.guidarelli@gmail.com>
Date:   Tue Feb 21 09:07:54 2017 -0500

    adding Dot11TypeCtrl so we dont get unknown on MainType function call

commit 84db73380852e283a2aa5082a29a84e148b5c987
Author: Todd Neal <todd@tneal.org>
Date:   Fri Feb 10 08:19:53 2017 -0600

    add ability to compile pcap filters offline
    
    Use pcap_open_dead to create a handle and then compile the filter.
    According to the docs this is what pcap_compile_nopcap does internally,
    but this method allows extracting an error message which
    pcap_compile_nopcap swallows.

commit d6d1f9a63c5c9c7cddc7297e9756e49c610a5ca0
Author: Levi Gross <levi@levigross.com>
Date:   Fri Feb 10 11:55:21 2017 -0500

    Fixed some bugs in the new AF_PACKET implementation
    
    I found some bugs in the AF_PACKET code that I introduced yesterday. I have
    fixed and tested these fixes.
    
    Signed-off-by: Levi Gross <levi@levigross.com>
    
    C.Uint can be int64 in Go
    
    Signed-off-by: Levi Gross <levi@levigross.com>
    
    C.Uint can be int in Go
    
    Signed-off-by: Levi Gross <levi@levigross.com>

commit 46f8258863e40995c2772c336cd3ea09dc553a35
Author: Levi Gross <levi@levigross.com>
Date:   Thu Feb 9 17:54:27 2017 -0500

    package afpacket
    
    Signed-off-by: Levi Gross <levi@levigross.com>

commit 40f176238ab24d061786d0a134ddf0961572ef86
Author: Levi Gross <levi@levigross.com>
Date:   Thu Feb 9 17:51:41 2017 -0500

    Go fmt update

commit 491fd5907b3be11c873d1824b5af68fb3dbd4ac6
Author: Levi Gross <levi@levigross.com>
Date:   Thu Feb 9 17:49:35 2017 -0500

    Updated copyright headers

commit 5527bfcadcaabe78fa8db887e997d3a71171d425
Author: Levi Gross <levi@levigross.com>
Date:   Thu Feb 9 17:00:00 2017 -0500

    This commit removes a lot of the CGo used by AF_PACKET
    
    It does this by enabling afpacket to make raw set/getsockopt syscalls and
    making use of the golang.org/x/unix syscall interface.
    
    Signed-off-by: Levi Gross <levi@levigross.com>

commit 043692b45a3fafe1813e5d479fe35938ac0d114d
Author: Sentryo R&D <developers@sentryo.net>
Date:   Thu Feb 9 10:55:20 2017 +0100

    Drop SetConsumed() API
    
    We use this API in our in-house fork for some TCP-based layers which we
    decode as datagrams, but there's no direct equivalent in the open-source
    version so just drop it for now, and we will reintroduce it later when
    we contribute the corresponding layers.

commit fa035f329e83bf3ab4e8e1f7c1c310c9581dc6d7
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 16 11:48:31 2016 +0100

    Third round of review changes from Graeme

commit 3082ad896bd8b0b7fc7b42b2dd63c90e5560b715
Author: Sentryo R&D <developers@sentryo.net>
Date:   Mon Dec 12 18:37:52 2016 +0100

    Omnibus commit to address Graeme's review comments

commit cb42ef4a2ea84dcd52e315e033902eb651559e3a
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 9 15:19:05 2016 +0100

    [RFC] Add reassembly package and accompanying reassemblydump example
    
    This is the current state of our reassembly package which does full
    (IPv4 and TCP) bidirectional reassembly, implements a TCP state machine
    and various security checks on TCP traffic. It is based on the existing
    tcpassembly package. A reassemblydump program is provided which uses the
    reassembly package, with support for DNS and HTTP reassembly.
    
    This is the second submission of this code after a first round of review
    by Graeme. It is probably still not fit for merging as-is, however all
    comments and feedback are welcome at this stage.

commit f2069106901871946677e14161eee5612e413fb8
Author: Paul McMillan <paul@mcmillan.ws>
Date:   Tue Jan 24 06:02:23 2017 -0800

    Remove clipboard error
    
    Fixes accidental garbage copy-pasted into the copyright header. Non-functional change.

commit e05fe4743d0fadb83f01c697de8388808396e5ba
Author: Paul McMillan <paul@mcmillan.ws>
Date:   Sat Jan 21 20:59:40 2017 -0800

    fix typo in docs
    
    Fix typo in DecodingLayerParser docs

commit 705830d9f1fe29ce9c730f09f270c4647b13d9a2
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 13 10:38:08 2017 -0700

    Fix lint error.

commit 1ce6bea01ca79c7139296be1af12f76ff02c5981
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 13 10:31:17 2017 -0700

    Update macs and ports.

commit b1011a6f2f7c7b3cddf35649adebbb51097aa5d1
Author: Dhananjay Nakrani <dhananjaynakrani@gmail.com>
Date:   Thu Dec 29 20:38:43 2016 -0800

    Fix memory leak.

commit 64d84ac3b05d2d0aa2e32b41eb7cf936050b968d
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 3 10:11:09 2017 -0700

    DNS Panic Fix.
    
    Fix #277

commit 64e82e7d0584a6c30c5dfc9684777b5b5ea717df
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 15 15:47:45 2016 -0700

    MOAR DNS.
    
    Fix #276.

commit 2539fef753ec0ac56b0eddd5741241f53fba3e93
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 15 13:42:25 2016 -0700

    Fix synscan main, another DNS bugfix.
    
    Fix #275.

commit d2caae9fae840f54682b3686f6f31363f191d2e3
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 15 11:36:21 2016 -0700

    Fix DNS malformed packet issue.
    
    Fix #274.

commit 5a11e0385774a7bd3bb005075e1010146324cdc6
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 15 10:12:58 2016 -0700

    BENCH Remove deprecated changelog.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.7.1 linux/amd64
    
    TEST BENCHMARKS "."
    BenchmarkTypeAssertion-12                       2000000000               0.63 ns/op
    BenchmarkMapLookup-12                           300000000                4.89 ns/op
    BenchmarkNilMapLookup-12                        500000000                3.26 ns/op
    BenchmarkNilMapLookupWithNilCheck-12            2000000000               0.81 ns/op
    BenchmarkArrayLookup-12                         2000000000               0.54 ns/op
    BenchmarkTypeToInterface1-12                    2000000000               0.54 ns/op
    BenchmarkTypeToInterface2-12                    2000000000               0.54 ns/op
    BenchmarkPassDecodeOptionsByValue-12            2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer-12          2000000000               0.27 ns/op
    BenchmarkLockOSThread-12                        1000000000               2.42 ns/op
    BenchmarkUnlockOSThread-12                      2000000000               1.93 ns/op
    BenchmarkLockUnlockOSThread-12                  300000000                4.08 ns/op
    BenchmarkLockDeferUnlockOSThread-12             20000000                83.5 ns/op
    BenchmarkUnbufferedChannel-12                    1000000              1286 ns/op
    BenchmarkSmallBufferedChannel-12                 1000000              1083 ns/op
    BenchmarkLargeBufferedChannel-12                 1000000              1334 ns/op
    BenchmarkEndpointFastHashShort-12               200000000                7.90 ns/op
    BenchmarkEndpointFastHashLong-12                50000000                20.4 ns/op
    BenchmarkFlowFastHashShort-12                   100000000               10.7 ns/op
    BenchmarkFlowFastHashLong-12                    50000000                33.5 ns/op
    PASS
    ok      github.com/google/gopacket      31.694s
    BenchmarkLayerClassSliceContains-12                     2000000000               0.92 ns/op
    BenchmarkLayerClassMapContains-12                       300000000                5.35 ns/op
    BenchmarkLazyNoCopyEthLayer-12                           2000000               652 ns/op
    BenchmarkLazyNoCopyIPLayer-12                            1000000              1126 ns/op
    BenchmarkLazyNoCopyTCPLayer-12                           1000000              1724 ns/op
    BenchmarkLazyNoCopyAllLayers-12                          1000000              2040 ns/op
    BenchmarkDefault-12                                      1000000              2003 ns/op
    BenchmarkSerializeTcpNoOptions-12                       10000000               166 ns/op
    BenchmarkSerializeTcpFixLengths-12                      10000000               157 ns/op
    BenchmarkSerializeTcpComputeChecksums-12                 3000000               450 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums-12       3000000               440 ns/op
    BenchmarkLazy-12                                         3000000               494 ns/op
    BenchmarkNoCopy-12                                       1000000              1499 ns/op
    BenchmarkLazyNoCopy-12                                   5000000               261 ns/op
    BenchmarkKnownStack-12                                  20000000               109 ns/op
    BenchmarkDecodingLayerParserIgnorePanic-12              10000000               167 ns/op
    BenchmarkDecodingLayerParserHandlePanic-12               5000000               287 ns/op
    BenchmarkAlloc-12                                       100000000               10.0 ns/op
    BenchmarkFlow-12                                        100000000               20.8 ns/op
    BenchmarkEndpoints-12                                   100000000               16.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket-12                   100000000               12.3 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket-12              100000000               20.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket-12          1000000000               2.55 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall-12            2000000000               0.32 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall-12           200000000                6.93 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall-12             100000000               10.6 ns/op
    BenchmarkFmtVerboseString-12                               50000             34802 ns/op
    BenchmarkPacketString-12                                   30000             55332 ns/op
    BenchmarkPacketDumpString-12                               30000             56404 ns/op
    BenchmarkDecodeICMP-12                                   1000000              1359 ns/op
    BenchmarkDecodeICMP6-12                                  1000000              1387 ns/op
    BenchmarkDecodeMPLS-12                                   1000000              1548 ns/op
    BenchmarkDecodePPPoEICMPv6-12                            1000000              1798 ns/op
    BenchmarkDecodePacketDNSRegression-12                    1000000              2338 ns/op
    BenchmarkDecodePacketDot11CtrlCTS-12                     1000000              1041 ns/op
    BenchmarkDecodePacketDot11MgmtBeacon-12                   300000              5890 ns/op
    BenchmarkDecodePacketDot11DataQOSData-12                 1000000              3073 ns/op
    BenchmarkDecodePacketDot11MgmtAction-12                  1000000              1364 ns/op
    BenchmarkDecodePacketDot11CtrlAck-12                     1000000              1059 ns/op
    BenchmarkDecodePacketDot11DataARP-12                     1000000              2543 ns/op
    BenchmarkDecodePacketDot11DataIP-12                       300000              4748 ns/op
    BenchmarkDecodePacketP6196-12                            1000000              1337 ns/op
    BenchmarkDecodePacketGRE-12                              1000000              2083 ns/op
    BenchmarkEncodePacketGRE-12                              5000000               316 ns/op
    BenchmarkDecodePacketEthernetOverGRE-12                  1000000              2341 ns/op
    BenchmarkEncodePacketEthernetOverGRE-12                  5000000               308 ns/op
    BenchmarkDecodeigmpv1MembershipReportPacket-12           1000000              1094 ns/op
    BenchmarkDecodeigmpv2MembershipQueryPacket-12            1000000              1169 ns/op
    BenchmarkDecodeigmpv2MembershipReportPacket-12           1000000              1276 ns/op
    BenchmarkDecodeigmp3v3MembershipQueryPacket-12           1000000              1383 ns/op
    BenchmarkDecodeigmpv3MembershipReport2Records-12         1000000              1791 ns/op
    BenchmarkDecodePacketIPSecAHTransport-12                 1000000              1564 ns/op
    BenchmarkDecodePacketIPSecAHTunnel-12                    1000000              1907 ns/op
    BenchmarkDecodePacketIPSecESP-12                         1000000              1073 ns/op
    BenchmarkDecodePacketMPLS-12                             1000000              1619 ns/op
    BenchmarkDecodePacketPrism-12                            1000000              1746 ns/op
    BenchmarkDecodePacketRadiotap0-12                        1000000              1066 ns/op
    BenchmarkDecodePacketRadiotap1-12                        1000000              1036 ns/op
    BenchmarkDecodeSFlowPacket1-12                            100000             18909 ns/op
    BenchmarkDecodeSFlowPacket2-12                            100000             14808 ns/op
    BenchmarkDecodeSFlowPacket3-12                           2000000               650 ns/op
    BenchmarkDecodeSFlowPacket4-12                           2000000               645 ns/op
    BenchmarkDecodeSFlowLayerPacket1-12                       100000             18521 ns/op
    BenchmarkDecodeSFlowLayerPacket2-12                       200000             10582 ns/op
    BenchmarkDecodeDNS-12                                    1000000              2213 ns/op
    BenchmarkDecodeDNSLayer-12                               1000000              1001 ns/op
    BenchmarkDecodePacketUSB0-12                             1000000              1084 ns/op
    BenchmarkDecodeVRRPPacket0-12                            1000000              1645 ns/op
    BenchmarkDecodePacketVXLAN-12                            1000000              3332 ns/op
    PASS
    ok      github.com/google/gopacket/layers       123.233s
    
    PCAP BENCHMARK
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 158c4d7aed08c67b6aedff68b32c4994a273b292
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    BenchmarkTypeAssertion-12                       2000000000               0.63 ns/op
    BenchmarkMapLookup-12                           300000000                4.98 ns/op
    BenchmarkNilMapLookup-12                        500000000                3.21 ns/op
    BenchmarkNilMapLookupWithNilCheck-12            2000000000               0.81 ns/op
    BenchmarkArrayLookup-12                         2000000000               0.54 ns/op
    BenchmarkTypeToInterface1-12                    2000000000               0.54 ns/op
    BenchmarkTypeToInterface2-12                    2000000000               0.55 ns/op
    BenchmarkPassDecodeOptionsByValue-12            2000000000               0.29 ns/op
    BenchmarkPassDecodeOptionsByPointer-12          2000000000               0.31 ns/op
    BenchmarkLockOSThread-12                        1000000000               2.78 ns/op
    BenchmarkUnlockOSThread-12                      1000000000               2.14 ns/op
    BenchmarkLockUnlockOSThread-12                  300000000                4.20 ns/op
    BenchmarkLockDeferUnlockOSThread-12             20000000                83.0 ns/op
    BenchmarkUnbufferedChannel-12                    3000000               598 ns/op
    BenchmarkSmallBufferedChannel-12                 3000000               609 ns/op
    BenchmarkLargeBufferedChannel-12                 2000000               554 ns/op
    BenchmarkEndpointFastHashShort-12               200000000                7.44 ns/op
    BenchmarkEndpointFastHashLong-12                100000000               18.7 ns/op
    BenchmarkFlowFastHashShort-12                   100000000               10.7 ns/op
    BenchmarkFlowFastHashLong-12                    50000000                33.3 ns/op
    PASS
    ok      github.com/google/gopacket      35.137s
    BenchmarkLayerClassSliceContains-12                     2000000000               0.89 ns/op
    BenchmarkLayerClassMapContains-12                       300000000                5.35 ns/op
    BenchmarkLazyNoCopyEthLayer-12                           2000000               653 ns/op
    BenchmarkLazyNoCopyIPLayer-12                            1000000              1111 ns/op
    BenchmarkLazyNoCopyTCPLayer-12                           1000000              1717 ns/op
    BenchmarkLazyNoCopyAllLayers-12                          1000000              1983 ns/op
    BenchmarkDefault-12                                      1000000              2016 ns/op
    BenchmarkSerializeTcpNoOptions-12                       10000000               136 ns/op
    BenchmarkSerializeTcpFixLengths-12                      10000000               143 ns/op
    BenchmarkSerializeTcpComputeChecksums-12                 3000000               407 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums-12       3000000               414 ns/op
    BenchmarkLazy-12                                         3000000               566 ns/op
    BenchmarkNoCopy-12                                       1000000              1497 ns/op
    BenchmarkLazyNoCopy-12                                   5000000               274 ns/op
    BenchmarkKnownStack-12                                  20000000               103 ns/op
    BenchmarkDecodingLayerParserIgnorePanic-12              10000000               151 ns/op
    BenchmarkDecodingLayerParserHandlePanic-12              10000000               226 ns/op
    BenchmarkAlloc-12                                       100000000               10.0 ns/op
    BenchmarkFlow-12                                        100000000               20.2 ns/op
    BenchmarkEndpoints-12                                   100000000               16.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket-12                   100000000               12.1 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket-12              100000000               20.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket-12          1000000000               2.58 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall-12            2000000000               0.31 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall-12           200000000                5.81 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall-12             100000000               10.5 ns/op
    BenchmarkFmtVerboseString-12                               50000             36203 ns/op
    
    // failure of old code after this point :(
    
    OLD PCAP BENCHMARK

commit cc1eec85c8f685de32dfb09f6abb16b4ebd22c07
Author: Sylvain Afchain <safchain@redhat.com>
Date:   Wed Dec 14 10:11:46 2016 +0100

    Add Geneve tunneling protocol support
    
    Introduce Geneve tunneling protocol
    described in :
    
    https://tools.ietf.org/html/draft-ietf-nvo3-geneve-03

commit 7cbf4dc8eaff4017fa6f2366e13b93f4fefda868
Author: Péter Szilágyi <peterke@gmail.com>
Date:   Thu Dec 15 16:17:58 2016 +0200

    Fix possible IP comparison error
    
    A net.IP may be represented by both by a 4 as well as a 16 byte long
    byte slice. Because of this, it is not safe to compare IP addresses
    using bytes.Equal as the same IP address using a different internal
    representation will produce mismatches.

commit 3eaf4b83f7e888957f371baf5ff19dafdc4a1779
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 15 09:39:35 2016 -0700

    Handle invalid root query.
    
    Fix #273.

commit e1ff2c5f5c6309980abef5e9ae003a6a892fd11d
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 14 10:43:04 2016 -0700

    Add ability to override layer type, and fix DNS issue.

commit b14ccee21573e98d442bd366d400773db479a294
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 12 12:50:49 2016 -0700

    Fix Error->Errorf.

commit 41c558591c2f987b9c28f73e675fe8481e841297
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 12 12:46:30 2016 -0700

    Return error for invalid DNS index.
    
    Fix #269.

commit 4c43d792dc5bd7fcb1dea5adadce01dd7265d818
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 12 08:52:57 2016 -0700

    Add time types for OpenBSD, which uses bsd_timeval.
    
    Fixes #268.

commit 24eb854d1e62e2496504340dbace901f36c4a643
Author: Sylvain Afchain <safchain@redhat.com>
Date:   Mon Nov 7 17:49:57 2016 +0100

    Add poll timeout option to afpacket for non-blocking purpose

commit ce5c3da34b687f91ed8c36e1d983a512f2fe1403
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 9 11:56:04 2016 +0100

    doc: specify sh for commands block

commit a0389645ebf3d8ced2b15c9eb36fa0cbfbce0fe2
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 9 12:04:07 2016 +0100

    layers/dhcp: remove debug print stmt from TestDHCPv4EncodeResponse
    
    It shows up in `go test` output and it was probably not meant to land on
    master.

commit ee467e424cd0d3fa879439ad4449e15264ce469b
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 9 11:27:42 2016 +0100

    pcapdump: support BPF filtering offline capture files
    
    This can be convenient when working on larger captures without having to
    cherry-pick the packets into another PCAP file.

commit d3a88c0b09e3a8e82ea5dc039eeb5e8c53f0cfbc
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Dec 9 11:46:48 2016 +0100

    layers/tcpip: remove dead code in csum computation
    
    Since the loop exits when csum fits in 16 bits, csum >> 16 is always 0.
    It was probably an attempt to remove the loop (9688856 "Add serialization
    to a number of layers.")

commit 2f515f11cd2d2efe085b0bcf2913932b7a3fc37c
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 9 09:56:03 2016 -0700

    Add ability to concat finite packet sources.

commit 58db4386b08b5b4cf105b6ab5a32448173a7637d
Merge: db9df78 96abdc0
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Thu Dec 8 21:20:03 2016 +0100

    Merge pull request #252 from safchain/sflow-ext
    
    Add sFlow additional tunnel structures.
    
    Add structures / records described in :
    http://sflow.org/sflow_tunnels.txt
    
    Signed-off-by: Sylvain Afchain safchain@redhat.com

commit 96abdc085a83ed47f0c0fe9c64cc1595bebde93c
Author: Sylvain Afchain <safchain@redhat.com>
Date:   Wed Nov 9 16:51:31 2016 +0100

    Add sFlow additional tunnel structures
    
    Add structures / records described in :
    http://sflow.org/sflow_tunnels.txt
    
    Signed-off-by: Sylvain Afchain <safchain@redhat.com>

commit db9df78486c4f9145fbdb2efd32d41880df9d495
Merge: a12eb5b 98f8c4e
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Sun Dec 4 22:04:14 2016 +0100

    Merge pull request #259 from denisvm/dns-string
    
    Add string function for DNSClass, DNSType and DNSOpCode

commit 98f8c4e65163a259d7620d936b20cd155184503d
Author: Denis Volpato Martins <denis@ostec.com.br>
Date:   Fri Dec 2 19:02:09 2016 -0200

    Add string function for DNSClass, DNSType and DNSOpCode

commit ca174c46821599ebc6474362091a1588719f636e
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Sun Nov 27 11:21:27 2016 -0800

    pcap: split on windows/non-windows functionality
    
    Create pcap_windows and pcap_unix for windows and non-windows
    functionality, respectively. libpcap does not support
    pcap_get_selectable_fd on Windows so we cannot use it. In the best case,
    this issue does not exist on Windows.

commit 09b133cd42a06bf5e38956a5ec1dde152956dac4
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Fri Nov 18 12:52:10 2016 -0800

    pcap: rewrite getNextBufPtrLocked loop
    
    Rewrite `getNextBufPtrLocked` to try to read a packet first before
    calling `pcap_wait` which uses an expensive `select` syscall. Replaced
    `stop` channel with atomic uint64.

commit 11e5af0c66cea714cf0d2cc4c8f1ed61d0dc6a2f
Author: Jon Crussell <joncrussell@gmail.com>
Date:   Fri Nov 18 08:12:26 2016 -0800

    pcap: make stoppable when no packets to sniff
    
    In newer versions of libpcap (1.8.1), the read timeout will not cause
    the read to return if there are no packets to sniff. To fix this, I
    changed the pacp handle to non-blocking and added a new helper,
    pcap_wait, that uses `select` to wait up to the read timeout for
    packets. I have tested that it has the desired behavior but I have not
    benchmarked it to determine how much of a slowdown, if any, there is.
    
    Fixes #253.

commit a12eb5bddccf95ff01d94445993b768547a33a62
Author: Nicolas PLANEL <nplanel@redhat.com>
Date:   Tue Nov 8 22:24:06 2016 +1100

    [afpacket] Avoid sending empty block
    
    In TPacketV3 we can receive empty block on timeout, as some kernel didn't
    include this patchset https://lkml.org/lkml/2015/2/24/9
    
    Signed-off-by: Nicolas PLANEL <nplanel@redhat.com>

commit 02b1b44a6dc7fe2d7b44394c6fd2c48a1761e95a
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Oct 25 14:08:06 2016 -0600

    Add link to stackoverflow on Windows 10 winpcap issues.

commit 006e0f7c185336e10b0fd64ef697db63bdddd4ac
Author: Jean-Philippe Braun <eon@patapon.info>
Date:   Thu Oct 20 19:30:55 2016 +0200

    Improve UDPPort LayerType mapping code

commit be3a7493e1e5ae124789ee3efe769843ce964123
Merge: 993e599 8f8a328
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Thu Oct 20 15:08:34 2016 +0200

    Merge pull request #242 from eonpatapon/udpport-nextlayer
    
    Allow to register UDP underlaying layertypes

commit 8f8a3287175b16a6c48e111f017205421c2bc714
Author: Jean-Philippe Braun <eon@patapon.info>
Date:   Thu Oct 20 12:28:21 2016 +0200

    Allow to register UDP underlaying layertypes

commit 993e599d717ced33d0b49768826263ebd82e0e31
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Oct 19 11:31:32 2016 -0600

    Add per-file linting to layers/ subdir.

commit a960cb27f65e8a8a4cdded15b0d6a37207452ccf
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Oct 19 11:29:05 2016 -0600

    Golint for DNS.

commit d92d03b2802aa0057d99c9542554a61f4a62c2ca
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Oct 19 11:15:24 2016 -0600

    Starting golint work for layers.

commit b83f94714c36e30ce851be1d5a0a5226f9f1bca4
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Oct 19 10:18:40 2016 -0600

    Guard a second instance of pcap_compile.

commit de3f5d8b78486bd45868b6a545f7113cf17b00cc
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Oct 19 10:17:39 2016 -0600

    pcap_compile isn't thread-safe... protect it.

commit e06b8732631746e091e12b03464ae7793815b11f
Author: Sylvain Afchain <safchain@redhat.com>
Date:   Wed Oct 19 15:33:06 2016 +0200

    Handle POLLERR in afpacket
    
    Returns an error if POLLERR is set

commit ee033ec8c9db37c729fd262ebb8bc7626f6de8fb
Author: jerome-laforge <jerome.laforge@gmail.Com>
Date:   Sat Oct 15 10:45:28 2016 +0200

    Use errors.New instead of fmt.Errorf when it is possible.

commit 0a0e90248ecd5bf5d641258ea7eec72eb6a11ac1
Merge: 72d1603 fe45e4e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Oct 13 10:17:36 2016 -0600

    Merge pull request #234 from mewpull/master
    
    examples/pcaplay: Fix divide by zero panic.

commit 72d160354eacf1d2034a547975524ff78ed821db
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 13 09:49:43 2016 -0600

    Run travis scripts in 'gc' script.

commit 513aacf0f88021f0b340b01e736614b344768590
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 13 09:47:34 2016 -0600

    Add copyright notice to dot1q test.

commit bea69236ac0f718c9ca3839aadc8c94af2b56b1e
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 13 09:46:50 2016 -0600

    Fix routing after golint.

commit fb7fc77aa0164c664a50b45fe5aaf0f086c93f78
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 13 09:45:35 2016 -0600

    golint routing.

commit d85f20ee57ae989e275577cf33add86327820136
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 13 09:43:42 2016 -0600

    golint for pfring.

commit a1c3065f20e5974a7be1a89a6daeecf9e81b9adc
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 13 09:35:33 2016 -0600

    Add comments to fix lint errors.

commit b3eed8db240cea5bbfd10f369d75a5d66f4acfa5
Merge: e5e808e 1055fa2
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Oct 13 09:22:16 2016 -0600

    Merge pull request #212 from postwait/flush_no_close
    
    implement FlushNoCloseOlderThan for better control over idle empty connections

commit e5e808e8adbb5541edc7ae095933a035f81a483b
Merge: 8dddbbd b349fda
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Oct 13 09:17:53 2016 -0600

    Merge pull request #238 from xiaopeng163/master
    
    add layer mpls testing code

commit b349fdac47a9496cde81397172f3b1d1aff6b41a
Author: Peng Xiao <xiaoquwl@gmail.com>
Date:   Thu Oct 13 16:36:09 2016 +0800

    add layer mpls testing code
    
    Signed-off-by: Peng Xiao <xiaoquwl@gmail.com>

commit 8dddbbdd448dc811462b7a90045b6e1d06664e86
Merge: 2040752 654bafd
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Oct 3 09:28:02 2016 -0600

    Merge pull request #230 from kanemathers/dot11_SerializeTo
    
    Add SerializeTo methods to RadioTap and Dot11 types

commit 2040752af7f5cf5f83eff139e987a36d2fed62fc
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 11:23:10 2016 -0600

    golint for afpacket.

commit 7036c04887bd89897dddd39483a2d9d313eee937
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 11:17:04 2016 -0600

    Golint for tcpassembly/tcpreader.

commit bfe281f8c875f86269528a870fcd124598f61b05
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 11:08:42 2016 -0600

    Run golint on pcap, ignoring CannotSetRfMon error.
    
    We can't rename an exported error value, but golint wants us to.  Ignore that
    line.

commit 3d91f2caa33d6520ad050a3b51a40f4ba551dcbf
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 11:06:40 2016 -0600

    Golint for pcapgo.

commit 780c9311bc132aab5e9bb9b2309ffe930ef14ef5
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 11:05:03 2016 -0600

    Golint for pcap and macs.

commit 92811d6f1efab0e9c6eaf0bf1eb619915eae5e16
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:58:37 2016 -0600

    Golint for ip4defrag.

commit 2bbf2751b3a4afd17bc13eb27cdc2c16b7ff3982
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:53:26 2016 -0600

    Lint tcpassembly dir.

commit 840e9d16b05066b31394022f4425a78396a4462c
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:46:35 2016 -0600

    Fix copyright and package comment in ip4defrag.

commit 04cd9f24b029528135c4035fad02a1f458339ae9
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:41:56 2016 -0600

    Add installation of golint to golint runner.

commit 349e437b2a8fc12a28f1d546b6c21cf4f04c4f7f
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:39:37 2016 -0600

    Auto-run go vet/lint on precleaned subdirs.

commit 6b62e31b6f2038bf4d7112e86b8277e4050d4c27
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:20:55 2016 -0600

    Fixed golint on base library.

commit 05b44039b35e5bed554a535597bd8f082b15833b
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 23 10:07:35 2016 -0600

    Clean up issues found with 'go vet'

commit 5cbcf6785857156ba2fe50a2a76ea2ad2b4f5fd7
Merge: 632566d 0c4b1e6
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Sep 23 09:06:09 2016 -0600

    Merge pull request #235 from nathandfox/master
    
    Fix header checksum

commit 0c4b1e6db852d3ac8d31272fdc37a9478c178fa4
Author: Nathan(yinian) Hu <nathanhu@google.com>
Date:   Fri Sep 23 10:44:32 2016 +1000

    Fix comment.

commit 6f8a6e5184f567b9aed15ca9404b1a490e1210ae
Author: Nathan(yinian) Hu <nathanhu@google.com>
Date:   Fri Sep 23 10:17:49 2016 +1000

    https://github.com/google/gopacket/issues/231
    
    For some header the original calculation was wrong, fix it.

commit fe45e4e5fe6fa32cb904803bdd43ed12b9c0b017
Author: mewmew <rnd0x00@gmail.com>
Date:   Thu Sep 22 16:19:02 2016 +0200

    examples/pcaplay: Fix divide by zero panic.
    
    Fixes #233.

commit 654bafd8f17c096642d22181132c6ef38294f174
Author: Kane Mathers <kane@kanemathers.name>
Date:   Thu Sep 22 14:53:22 2016 +0800

    Add SerializeTo to Dot11MgmtDeauthentication

commit f53e9dc545222353f33d8dfa3da681d67a710d16
Author: Kane Mathers <kane@kanemathers.name>
Date:   Thu Sep 22 14:53:13 2016 +0800

    Add SerializeTo to Dot11MgmtAuthentication

commit d8ce20085a56234792dce60cde5f739290643b77
Author: Kane Mathers <kane@kanemathers.name>
Date:   Wed Sep 21 13:12:30 2016 +0800

    Add myself to the contributors list :)

commit b9820d8915f943ae98d70442c64888c18612cbf0
Author: Kane Mathers <kane@kanemathers.name>
Date:   Wed Sep 21 12:58:25 2016 +0800

    Decode the Dot11MgmtProbeResp and add SerializeTo

commit 3971d5e7b70f082654a679c505097abe0ded3056
Author: Kane Mathers <kane@kanemathers.name>
Date:   Wed Sep 21 08:35:03 2016 +0800

    Add SerializeTo to Dot11MgmtReassociationReq

commit 731a486a0162ccf99d40500fa275712c83e0f3a0
Author: Kane Mathers <kane@kanemathers.name>
Date:   Wed Sep 21 08:34:36 2016 +0800

    Add SerializeTo to Dot11MgmtAssociationResp

commit 44aa4273972e464ba89a76e11afcfd33d0a1ea33
Author: Kane Mathers <kane@kanemathers.name>
Date:   Wed Sep 21 08:26:55 2016 +0800

    Add SerializeTo to Dot11MgmtAssociationReq

commit 31621cf3f39a78ec3cfe21488b69d23e8ed48bcb
Author: Kane Mathers <kane@kanemathers.name>
Date:   Wed Sep 21 08:19:40 2016 +0800

    Add SeriallizeTo to Dot11MgmtDisassociation

commit b090e4bcb712ce0752ccf96146bc11cc2a533acd
Author: Kane Mathers <kane@kanemathers.name>
Date:   Mon Sep 19 13:21:53 2016 +0800

    Add SerializeTo to RadioTap

commit 1401d8074dd1b08e01b9f0452623f9de73236a9f
Author: Kane Mathers <kane@kanemathers.name>
Date:   Sun Sep 18 20:14:37 2016 +0800

    Add SerializeTo to Dot11

commit 7b399f9bd672191b8bf7461fc42cf62168b47048
Author: Kane Mathers <kane@kanemathers.name>
Date:   Sun Sep 18 14:54:10 2016 +0800

    Add SerializeTo to Dot11MgmtBeacon

commit 1055fa22ece8ebd8e46af1fd91e2ebb1f6326932
Author: Theo Schlossnagle <theo.schlossnagle@circonus.com>
Date:   Wed Sep 7 10:44:10 2016 -0400

    Revert "mass search and replace to make this work at a different base url."
    
    This reverts commit 37226ae0e066ba6b8e78905d961ec624d8020555.

commit 429405de69ff1a4c8ee6478d1df6470ea257fc87
Merge: e43ed5f f18433a
Author: Theo Schlossnagle <theo.schlossnagle@circonus.com>
Date:   Wed Sep 7 10:43:23 2016 -0400

    Merge branch 'flush_no_close' of github.com:postwait/gopacket into flush_no_close

commit e43ed5f9b7b8105668a8c50c8f7358ec6c0ccd6c
Author: Theo Schlossnagle <theo.schlossnagle@circonus.com>
Date:   Wed Sep 7 10:40:33 2016 -0400

    alter to use a FlushWithOptions approach

commit 632566d585d0456397d2058bd9cb800c48e3230b
Merge: 56c0fc5 469a760
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Aug 30 22:46:11 2016 +0200

    Merge pull request #227 from tzneal/sctp
    
    some sctp changes

commit 469a760b5a1200d1f7e7a2d2f9143efdcecd9ddc
Author: Todd Neal <todd@tneal.org>
Date:   Tue Aug 30 13:13:01 2016 -0500

    handle invalidly sized SCTP chunks
    
    Detect an invalidly sized SCTP chunk and abort decoding.
    Fixes issue #146

commit 817652ef1b8b389b4b23530f1f3a600cbded926c
Author: Todd Neal <todd@tneal.org>
Date:   Mon Aug 29 14:21:45 2016 -0500

    split SCTP data payload into its own layer
    
    The intent is to allow future decoding the payload into
    another layer.

commit 8a0581057180b8d30bef5ca20cdd988eff225532
Author: Todd Neal <todd@tneal.org>
Date:   Mon Aug 29 13:07:51 2016 -0500

    add a type for the SCTP payload protocol

commit 56c0fc5ad19ac0c741f89428f911a38c2fc2eb75
Merge: 1b746f6 97f755e
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Mon Aug 29 22:30:40 2016 +0200

    Merge pull request #203 from jdknezek/dns-fixes
    
    DNS serialization fixes

commit 1b746f68116cb7c7ada4625eb718cf45e67dc31a
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 29 10:36:11 2016 -0600

    Fix erroneous len() of int.

commit 97f755eec666df6b2525ebdf923c276c3aee3186
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Tue Jul 26 11:06:40 2016 -0500

    Added DNS TXT RR serialization

commit f063d42eb64de748e5283b3a635d2057a0df890e
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Tue Jul 26 11:06:22 2016 -0500

    Fixed DNS A RR all-zero serialization

commit f12f0f7eb90a32f14a8a27c57faf087401455f59
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Fri Jun 3 15:48:40 2016 -0500

    Added NS, PTR, MX, and SRV RR serialization

commit 546ee54b30f2d685fe73bfe2828bd07af77adb7d
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Fri Jun 3 15:44:35 2016 -0500

    Refactored and corrected size computation

commit 003a5cd90a1692f95ec0773fc3df8de176f29443
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Fri Jun 3 15:08:40 2016 -0500

    Added SOA RR serialization

commit 342fbc6881146b4a867a72930a11e0a8b51254c9
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Fri Jun 3 14:56:10 2016 -0500

    Corrected record resource serialization

commit d8e39134d89bc31b8242082e01f0b97ce5545a6f
Author: Jonathan Knezek <jonathan.knezek@ampthink.com>
Date:   Fri Jun 3 14:54:19 2016 -0500

    Removed duplicate size computation

commit 0c3ffafd005c4a34c357108bd9aa7f566baf5889
Merge: eae0891 e5ea002
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Aug 28 16:36:42 2016 -0600

    Merge pull request #224 from tzneal/errorf-not-used
    
    fix some unused fmt.Errorf values

commit eae0891ef1cc4e768911ba70e2c3eda847617dde
Merge: cc55756 1537351
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Aug 28 16:35:59 2016 -0600

    Merge pull request #221 from gconnell/master
    
    Have packet read return new packet buffers.

commit 15373513e012f7b65bb06683d31fb72b9367e50b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Aug 28 16:33:57 2016 -0600

    Fix error message for capturelength/snaplength

commit cc55756056b65619aa59ac5fbe3882686c3e4b07
Merge: c4d6479 de6ff0b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Aug 28 16:31:14 2016 -0600

    Merge pull request #223 from tzneal/master
    
    fix incorrect padding during TCP serialization

commit e5ea00298e16a4ac143aa30a2faa45ab2c0968c5
Author: Todd Neal <todd@tneal.org>
Date:   Fri Aug 26 14:49:39 2016 -0400

    fix some unused fmt.Errorf values

commit de6ff0b876f4165801db25d8043e9872b1399c57
Author: Todd Neal <todd@tneal.org>
Date:   Wed Aug 24 08:22:01 2016 -0500

    fix incorrect padding during TCP serialization

commit c4d647984d4671d9dd91770dae77923a0b48b389
Merge: 8678dd7 c40135a
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Wed Aug 17 13:48:03 2016 +0200

    Merge pull request #220 from noricube/tso
    
    TSO support fix in Windows 10 / HyperV

commit 8678dd7ce4e9f64e6122faf86f0279b26c5008a6
Merge: 9a17027 ab561ca
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Aug 16 18:30:05 2016 +0200

    Merge pull request #211 from adriantam/master
    
    Close #210 by correcting first byte's drop eligible bit

commit c40135a339aed043dda637dd065a2be7b3aaad01
Author: nori Seokju Yun <noricube@gmail.com>
Date:   Tue Aug 16 23:05:43 2016 +0900

    Add comment for TSO environment.

commit 9a1702793a04e349611e95cd173eff5ee6353367
Merge: b1af1fa f101ae2
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Mon Aug 15 00:16:40 2016 +0200

    Merge pull request #217 from kor44/SCTPDecodingLayer
    
    Implement DecodingLayer interface for SCTP

commit a10acf9f6fc487fffb3a8a4dfaca0ea00593be57
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Aug 12 11:46:11 2016 -0600

    Have packet read return new packet buffers.
    
    Returning a shared buffer makes handling multiple packets from a single
    file in parallel impossible, and it breaks the ReadPacketData contract.
    We could alternatively build a ZeroCopyReadPacketData for file reading,
    should this change be too slow for some folks.

commit a3e3c1def929b6a5a42047b134f7c7e6b2a5dd37
Author: nori Seokju Yun <noricube@gmail.com>
Date:   Thu Aug 11 23:07:59 2016 +0900

    Fix TSO support.

commit f101ae2d171a4d4f6e49a04168d2428aeb262bf3
Author: Michail Koreshkov <drkor@bk.ru>
Date:   Thu Jul 28 13:20:14 2016 +0300

    Implement DecodingLayer interface for SCTP
    
    Now can use SCTP layer in NewDecodingLayerParser

commit b1af1fa2fcae43d2eef926f31c7acb1c93c6e24f
Merge: 93c3b4b 4faec96
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Jul 26 12:23:54 2016 +0200

    Merge pull request #214 from bramp/gopcap-gzip
    
    Added support to pcapgo to read gzip compressed pcap files. Fixes #213

commit 93c3b4bf22d0a47ec7487a0b9843b0d8be738115
Merge: 4c8f913 89f4b19
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Mon Jul 18 23:59:40 2016 +0200

    Merge pull request #215 from jesseward/vrrp-v2-rfc3768
    
    Add support for VRRPv2 decoding (RFC 3768)

commit 4faec967883bdc6a29b101e39df64ddf081bb376
Author: Andrew Brampton <bramp@google.com>
Date:   Mon Jul 11 19:38:21 2016 -0700

    Added a comment be gunzipping the data.

commit 4c8f9139e3ffa96c3c15bc50823a6097baf900e2
Merge: a272c8a 406ca57
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Sun Jul 10 12:30:26 2016 +0200

    Merge pull request #216 from bramp/dns-string
    
    Added additional records types to be formatted in DNSResourceRecord.String()

commit efa40474316a5cf5a8eea15723e3f512a3c2f375
Author: Andrew Brampton <bramp@google.com>
Date:   Sat Jul 9 23:01:40 2016 -0700

    Fixed gofmt issue :(

commit 89f4b19c826a0a7d91d9ec455ccc1249aade3fca
Author: jesseward <jesse.ward@gmail.com>
Date:   Sun Jul 10 05:56:35 2016 +0000

    Removing docstring reference to CARP.

commit 406ca573f7f0be8ac45f01c959276acd01db1be6
Author: Andrew Brampton <bramp@google.com>
Date:   Sat Jul 9 22:54:26 2016 -0700

    Added additional records types to be formatted in func (rr *DNSResourceRecord) String().

commit c429eb6cbfeeb5a2d474008a9ad82af7c5b389a1
Author: jesseward <jesse.ward@gmail.com>
Date:   Sun Jul 10 05:48:52 2016 +0000

    Add support for VRRPv2 decoding
    
    Addition of a VRRP layer that provides decoding for VRRPv2 messages (rfc3768)

commit 7659437fd72b4ad350b2e4694d2bbbb5e56f9913
Author: Andrew Brampton <bramp@google.com>
Date:   Sat Jul 9 12:29:21 2016 -0700

    Added support to pcapgo to read gzip compressed pcap files. Fixes #213

commit 5813107306e8448ae67535a402cc61ff3cc4cdf5
Author: Andrew Brampton <bramp@google.com>
Date:   Sat Jul 9 12:28:12 2016 -0700

    Fixed typo in the word "magic".

commit 37226ae0e066ba6b8e78905d961ec624d8020555
Author: Theo Schlossnagle <theo.schlossnagle@circonus.com>
Date:   Wed Jul 6 22:04:26 2016 +0000

    mass search and replace to make this work at a different base url.

commit 012b5a530bf510a173a8e4f49f4a0bf3cd015300
Author: Theo Schlossnagle <theo.schlossnagle@circonus.com>
Date:   Wed Jul 6 22:03:22 2016 +0000

    implement FlushNoCloseOlderThan for better controll over idle empty connections

commit f18433a620f1bcbe963c4a616302007731e7a3ec
Author: Theo Schlossnagle <theo.schlossnagle@circonus.com>
Date:   Wed Jul 6 22:03:22 2016 +0000

    implement FlushNoCloseOlderThan for better controll over idle empty connections

commit ab561ca643a1c5a27cfd5926f0c92c9a4af263b4
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Mon Jul 4 17:21:01 2016 -0400

    Close #210 by correcting first byte's drop eligible bit

commit a272c8af6a243b4107ce36a018af82e4c7c79d80
Merge: 5f25e74 3694dba
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Jun 28 22:35:29 2016 +0200

    Merge pull request #197 from slon/igmp
    
    Adding additional parsing capabilities to layers/igmp.go
    
    Added support for IGMPv1 and IGMPv2 types. Included here is
    MembershipQuery (v[123]), MembershipReportV1, MembershipReportV2,
    MembershipReportV3 and LeaveGroup (v2)
    
    Including tests supplied in layers/igmp_test.go

commit 5f25e747415f15c485bf92a0b01beb268c1e5421
Merge: 1241db7 3f515dd
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Jun 28 22:33:52 2016 +0200

    Merge pull request #206 from tzneal/tcp
    
    Add human readable TCP option display. Based on RFC 793 terminology.

commit 1241db725253cad7e4e4bb512501765652858ee6
Merge: dcc14ab 3097a85
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Fri Jun 17 08:03:09 2016 +0200

    Merge pull request #207 from adriantam/master
    
    Fix go vet issues for decode_test.go

commit dcc14abaf52243d64bbc53443734137ba43b87cb
Merge: a5ab519 1d7a6ae
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Fri Jun 17 08:02:31 2016 +0200

    Merge pull request #208 from adriantam/govet8bit
    
    Fix go vet issue in lldp.go

commit a5ab519e82574c3fb4fdace2b3bcedb90e0442cf
Merge: 40c749c 5d38913
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Fri Jun 17 08:01:41 2016 +0200

    Merge pull request #200 from tzneal/dhcp
    
    Add support for DHCPv4

commit 40c749ccf00a08227251ddc2944c7fccdebe2e53
Merge: 15d3358 01ecc12
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Fri Jun 17 08:00:35 2016 +0200

    Merge pull request #209 from adriantam/pcapdumpGoVet
    
    Fix go vet issue in pcapdump

commit 01ecc12475ec4d81ebcd02c6907605f8941f6bf9
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Thu Jun 16 16:19:12 2016 -0400

    Fix go vet issue in pcapdump
    Formatted fatal error message should be sent via log.Fatalf, not log.Fatal

commit 1d7a6ae944c684d95c7eeb639712b5c2cd2eb96a
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Thu Jun 16 15:31:55 2016 -0400

    Fix go vet issue in lldp.go
    Trying to left shift 8 bits on byte data

commit 3097a853cdd0e3676fe575a1c67a488cc7633e2a
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Thu Jun 16 15:20:12 2016 -0400

    Fix go vet issues for decode_test.go
    go vet identifies decode_test.go as non-compliance due to function not using returned variables

commit 3f515dddeed8b5960ae4b17e51869b737f34df04
Author: Todd Neal <todd@tneal.org>
Date:   Thu Jun 16 06:36:47 2016 -0500

    add human readable TCP option display
    
    Adds a readable version of TCP Option as well as constants for various
    common TCP Option kinds.

commit 5d3891394f7fb93fa378fed7bda586828f2149e2
Author: Todd Neal <todd@tneal.org>
Date:   Wed Jun 1 08:08:32 2016 -0500

    Add support for DHCPv4
    
    Started by Vasiliy Tolstov <v.tolstov@selfip.ru>

commit 15d335845f6df958e11bd888f46fcd8cf19ecf87
Merge: f480798 8399e21
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Jun 14 22:02:46 2016 +0200

    Merge pull request #205 from kaorimatz/gre-null-sre
    
    Write a "NULL" SRE to terminate GRE routing field

commit 8399e21f0954c3d066b0b3685ba928355828a07e
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Sat Jun 11 21:39:38 2016 +0900

    Write a "NULL" SRE to terminate GRE routing field

commit 3694dba110ce25a35c20b558ca683010a8995da1
Author: Fedor Korotkiy <dartslon@gmail.com>
Date:   Fri Jun 3 10:06:22 2016 +0300

    Move function comment

commit f4807986c9ee46845a35c59a382d6ccd9304b320
Merge: dc8da3f bf04df9
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Fri Jun 3 08:07:18 2016 +0200

    Merge pull request #201 from asinghsfdc/master
    
    Fixed #191, fixed handling of handle extended router flow, processor

commit bf04df96141cde63d4dbea6cf07be49f95787f1c
Author: atul.singh <atul.singh@salesforce.com>
Date:   Thu Jun 2 20:30:05 2016 -0700

    Fixed #191, fixed handling of handle extended router flow, processor

commit a06e07b6c96e66ab14bdd4e4b71746da1c7d4908
Author: Fedor Korotkiy <dartslon@gmail.com>
Date:   Fri May 27 03:21:55 2016 +0300

    Add overflow checks to IGMP packet parser

commit 998bf7cef4436a33f93364087175a74e6b646960
Author: Fedor Korotkiy <dartslon@gmail.com>
Date:   Fri May 27 03:10:20 2016 +0300

    Fix bug in v3 membership report parsing

commit dc8da3fab98333658e9771088031771335b3cbde
Merge: b09bf40 d8f5a1d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu May 26 09:37:52 2016 -0600

    Merge pull request #198 from tzneal/master
    
    Add serialization support for the DNS layer

commit d8f5a1d8de00cfd26143e6be4c9399aee2816d12
Author: Todd Neal <todd@tneal.org>
Date:   Wed May 25 15:47:45 2016 -0500

    Add serialization support for the DNS layer

commit e7cf983613fbf119cd715006517c827ad757e333
Author: Todd Neal <todd@tneal.org>
Date:   Wed May 25 15:44:27 2016 -0500

    Return error if option length is smaller than option data

commit 5b0150b1f2acf890f54ecfee8b0fdcf70f9c6de4
Author: Fedor Korotkiy <dartslon@gmail.com>
Date:   Wed May 25 19:44:58 2016 +0300

    Fix all comments from https://github.com/google/gopacket/pull/160/files except comment about tests.

commit 40c51c08633eea8f809fdab300ef16d201d594fc
Author: Jesse Ward <jesse.ward@gmail.com>
Date:   Mon Jan 18 00:06:26 2016 -0500

    Pass #2 of the layers-igmp-feature-updates branch.
    
    Includes recommendations outlined within
    https://github.com/google/gopacket/pull/160 .
    
    * Rename IGMP objects to ensure (layers) namespace collisions are  avoided.
    * Refactor the IGMP type to ensure that existing fields are not renamed.

commit 66ffef2247d2c0dd0cc81ac126ccfefbcc7c738d
Author: Jesse Ward <jesse.ward@gmail.com>
Date:   Sat Jan 9 18:00:33 2016 -0800

    Adding additional parsing capabilities to layers/igmp.go
    
    Added support for IGMPv1 and IGMPv2 types. Included here is
    MembershipQuery (v[123]), MembershipReportV1, MembershipReportV2,
    MembershipReportV3 and LeaveGroup (v2)
    
    Including tests supplied in layers/igmp_test.go

commit b09bf408520f7646e29b7033d9adb00ed779a1c4
Merge: ebaf632 f89d0b9
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu May 12 09:06:07 2016 -0600

    Merge pull request #193 from larit/gre_encode
    
    Add GRE packet decoding and update tests and benchmarks.

commit f89d0b9351c43ec6a3699d30e1106ebe7c7041b5
Author: Paul Mullen <pmullen@google.com>
Date:   Thu May 12 09:55:05 2016 +0100

    Zeroize the checksum memory at the start to account for the case where RoutingPresent is set but ChecksumPresent is not.

commit 82339f8f94b0f69e4dfde69a61b51878bb0ae546
Author: Paul Mullen <pmullen@google.com>
Date:   Thu May 12 09:48:39 2016 +0100

    Fix some small style nits. Also reorganize the way the checksum is
    written.

commit ebaf632ec2f8629a984566118978a2ef81e51f1c
Merge: ce72b5b 38c2969
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed May 11 09:14:07 2016 -0600

    Merge pull request #195 from ross-williams/master
    
    Added support for NTP.

commit dd21b49ee681a7d45f12c5c774b920130b6d96e1
Author: Paul Mullen <pmullen@google.com>
Date:   Wed May 11 15:21:01 2016 +0100

    Add checksum tests.

commit 38c29694d0518458d8a6e2fd8e80f1e47af7f2d9
Author: Ross Williams <news@ross.net>
Date:   Sat May 7 00:53:30 2016 +0930

    Added support for NTP.

commit d0b948998021bc51740024d8d1b979677001667f
Author: Paul Mullen <pmullen@google.com>
Date:   Tue May 10 15:25:32 2016 +0100

    Add GRE packet decoding and update tests and benchmarks.

commit ce72b5bd26768866275e957345f47a09a68e1837
Merge: bdf4ee7 be630e0
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed May 4 09:16:46 2016 -0600

    Merge pull request #189 from camathieu/fix_pfring_writepacketdata_rv
    
    Fix PF_RING WritePacketData rv error

commit be630e057300632336835b6674e5678b21af32ed
Author: Charles-Antoine Mathieu <skatkatt@root.gg>
Date:   Wed May 4 16:50:04 2016 +0200

    Fix PF_RING WritePacketData rv error
    
    C.pfring_send return the number of bytes sent.
    https://github.com/ntop/PF_RING/blob/6.2.0-stable/userland/lib/pfring.h#L630
    
    rv >= 0 value is not an error but the number of bytes sent.

commit bdf4ee7eb518c56e3ce97a09ba2e91aee1bfe2e4
Merge: e8d2628 c297b00
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 26 09:07:28 2016 -0600

    Merge pull request #183 from LrsK/afpacket-allports
    
    Added ability to listen on all interfaces with afpacket.

commit e8d2628bc2ade70c04ba953f32ec06625d7bf95d
Merge: e732efe be00ae6
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 26 09:06:00 2016 -0600

    Merge pull request #188 from nplanel/workaround-mulock-pressure
    
    [pcap][workaround] Avoid deadlocking on waiting on packets

commit be00ae6256f41deb756adccc421f053b273ccc61
Author: Nicolas PLANEL <nplanel@redhat.com>
Date:   Tue Apr 26 03:58:34 2016 +1000

    [pcap][workaround] Avoid deadlocking on waiting on packets
    
    As ReadPacketData() is called usually in loop, goroutine scheduler seems
    to be not very fair when running on a 1 core CPU (GOMAXPROCS = 1 as NumCPU
    = 1)
    As the p.mu lock is re-acquired (on the next loop), a call to Close() have
    poor chance to acquire the lock.
    So the workaround is to give a chance to other goroutine waiting on a same
    Mutex if pcap handler return timeout.

commit e732efe9f49bdb679cb087d2eca7191f2f5574b6
Merge: 5fb3b04 2abc9c3
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Apr 18 09:47:41 2016 -0600

    Merge pull request #186 from lebauce/defer-mutex-unlock
    
    Unlock mutex when closing handle with empty cptr

commit 2abc9c3f5582348fb805b0cbaf217d0bbe59a87b
Author: Sylvain Baubeau <sbaubeau@redhat.com>
Date:   Mon Apr 18 17:42:15 2016 +0200

    Unlock mutex when closing handle with empty cptr

commit 5fb3b0452e96bea909e3d94a28c24f1ec1a63156
Merge: 8bd2106 5666e45
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Mar 28 08:24:14 2016 -0700

    Merge pull request #177 from david415/171.add_pcapgo_bounds_checking.0
    
    Add bounds checking for pcapgo read

commit c297b0070818f35d6ce4c98c52207f18a515d280
Author: Lars Kulseng <lars.kulseng@nhn.no>
Date:   Wed Mar 23 14:35:21 2016 +0100

    Added interface index fields and logic to pfring and pcap

commit 7dcbd21d9dbad10aab15a8854bb0a26c26047c9e
Author: Lars Kulseng <lars.kulseng@nhn.no>
Date:   Tue Mar 22 13:01:01 2016 +0100

    Added ability to listen on all interfaces with afpacket.

commit 8bd21067a5e9afe31b3a1802ce59cfe72b063367
Merge: 3e2ccf9 00b946d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Mar 21 09:02:56 2016 -0700

    Merge pull request #180 from gconnell/goptr
    
    Fix for Issue #164.

commit 3e2ccf90e2d123ff9038207e48169c1502383fbc
Merge: 8cdd14c 4d9a29e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Mar 21 09:01:48 2016 -0700

    Merge pull request #182 from LrsK/simplified
    
    Simplified code from PR #181

commit 4d9a29e04a5118f0b286ce976a15cbeecc261ff2
Author: Lars Kulseng <lars.kulseng@nhn.no>
Date:   Sat Mar 19 09:36:49 2016 +0100

    Simplified the code a little from PR #181

commit 62d226dba2e2da484a2cdccb4ce3bd63828c57aa
Author: Lars Kulseng <lars.kulseng@nhn.no>
Date:   Fri Mar 18 19:49:19 2016 +0100

    Fixed panic when getting socket stats with go 1.6

commit 00b946d3b3a38a5110832c1b0a8ee38cb214797d
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Mar 18 10:50:59 2016 -0700

    Fix for Issue #164.
    
    This should fix the Go runtime panic caused by Go-pointer-to-pointer
    introduced in Go 1.6.

commit 8cdd14ca4735e61d81a55f62761fc2c082d41898
Merge: 0c13a01 3d7bb49
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Sun Mar 6 22:35:41 2016 +0100

    Merge pull request #176 from hyakuhei/master
    
    Adding a VXLAN layer that parses RFC 7348 and vxlan group policy

commit 3d7bb49eec29a121864f2b22eed2c6f7b6f0d5b8
Author: Robert Clark <hyakuhei@gmail.com>
Date:   Sat Mar 5 23:36:10 2016 +0000

    VXLAN layer, comment fixes

commit 5666e45efcd483acdc734292df7dd59189ce13a4
Author: David Stainton <dstainton415@gmail.com>
Date:   Sat Mar 5 01:04:22 2016 +0100

    Return error on correct line
    
    this corrects the previous commit mistake

commit 4d0fbb3d92c6533aa809c42218b744aba3ac35e1
Author: David Stainton <dstainton415@gmail.com>
Date:   Fri Mar 4 22:16:43 2016 +0100

    Add error for malformed packets received from pcapgo

commit 6d329c16bfb0d3e2aafb4c2956950bee3a0a8906
Author: David Stainton <dstainton415@gmail.com>
Date:   Fri Mar 4 22:15:03 2016 +0100

    Revert "pcapgo returns error for malformed packets"
    
    This reverts commit 6cc846c3f25434a8484d0c75ab01878b27efa10e.

commit 6cc846c3f25434a8484d0c75ab01878b27efa10e
Author: David Stainton <dstainton415@gmail.com>
Date:   Fri Mar 4 21:15:14 2016 +0100

    pcapgo returns error for malformed packets

commit 0c13a01c153e510e14f147c0b044187d9a97ad09
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Mar 4 09:43:39 2016 -0700

    Add travis test for go fmt.

commit de6adb1b235031b80f5b9beed6a2a5271f186036
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Mar 3 15:37:57 2016 +0100

    Add bounds checking for pcapgo read

commit 445746376b56687f9e29ab50654597a51ff1a489
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Feb 29 11:20:50 2016 -0700

    Fix Go 1.6 layerString for embedded anon structs.
    
    In Go 1.6, reflect had a change in behavior
    (http://tip.golang.org/doc/go1.6#reflect) which was incompatible with current
    layerString code.  Basically, we kept transitioning from reflect.Value() to
    interface{} for recursive calls, but from 1.6 on, an Interface() call on an
    embedded anonymous struct panics.
    
    Change the code slightly to pass around reflect.Value when recursing, instead of
    constantly calling Interface().  We still make Interface() calls to check for
    fmt.Stringer compatibility, but that's now protected with a CanInterface()
    check.

commit dd4cd8efecc4c582ebcb72bae99366eac08af116
Merge: b20751e 1954301
Author: Robert Clark <hyakuhei@gmail.com>
Date:   Mon Feb 29 16:57:49 2016 +0000

    Merge branch 'master' of github.com:hyakuhei/gopacket
    
    Conflicts:
            layers/vxlan.go

commit b20751e4c08ee9e3d2cd21beb2089163b06f272d
Merge: 213bcd6 7470812
Author: Robert Clark <hyakuhei@gmail.com>
Date:   Mon Feb 29 09:05:09 2016 +0000

    Fixed merge conflict

commit 19543011bae0197406a4cde97149c59396699f5c
Merge: 213bcd6 7470812
Author: Robert Clark <hyakuhei@gmail.com>
Date:   Mon Feb 29 09:05:09 2016 +0000

    Fixed merge conflict

commit 213bcd6aade432963fed4bbdbaea824c00ce982a
Author: Robert Clark <hyakuhei@gmail.com>
Date:   Sun Feb 28 20:25:40 2016 +0000

    Adding a VXLAN layer that parses RFC 7348 and vxlan group policy
    
    https://tools.ietf.org/html/rfc7348
    https://tools.ietf.org/html/draft-smith-vxlan-group-policy-00

commit 7470812178fa236f364b76395de296f9c23a6e5e
Author: Robert Clark <hyakuhei@gmail.com>
Date:   Sun Feb 28 20:25:40 2016 +0000

    Adding a VXLAN layer that parses RFC 7348 and vxlan group policy
    
    https://tools.ietf.org/html/rfc7348
    https://tools.ietf.org/html/draft-smith-vxlan-group-policy-00

commit 3b097a3f06f4af581aed40162263ac34e636381e
Merge: f361903 2c63b17
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Feb 24 09:42:11 2016 -0700

    Merge pull request #174 from david415/fix-smartos-compatibility.0
    
    Fix previous mistake, solaris not smartos

commit 2c63b176d1f59cc16072620ab5317cf624d30180
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Feb 24 17:34:03 2016 +0100

    Fix previous mistake, solaris not smartos
    
    This fix makes gopacket compile on Solaris machines with the libpcap from pkgsrc

commit f3619035e0dcf56f5d5813673a849e27956415b5
Merge: 39ea18b b1d853c
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Feb 23 09:03:44 2016 +0100

    Merge pull request #172 from david415/fix-smartos-compatibility.0
    
    Merge PR #172 - Fix SmartOS compatibility

commit b1d853cfff3841df0a088f7e738ab8d3637d09df
Author: David Stainton <dstainton415@gmail.com>
Date:   Mon Feb 22 20:33:44 2016 +0100

    Add smartos build flags for pcap packet capture driver

commit 39ea18bf3ab7a1f0bfedf8d28044484242d0c163
Merge: e5560fd 12e8d44
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Feb 22 09:49:54 2016 -0700

    Merge pull request #168 from david415/167.fix_bsd_bpf.0
    
    167.fix bsd bpf.0

commit e5560fd61189f831df0e6af1259957b83904451a
Merge: cdd2162 e49bda3
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Feb 19 09:51:19 2016 -0700

    Merge pull request #166 from chrisbdaemon/serialize_llc
    
    Adding SerializeTo for SNAP and LLC

commit 12e8d446ea8463d55ce3944675ba5c93d9fbcaa1
Author: David Stainton <dstainton415@gmail.com>
Date:   Fri Feb 19 00:58:42 2016 +0100

    Return error for the corrupt BpfHdr struct case

commit dff2f399a4053b25b5f6f4e210a27af75e07a818
Author: David Stainton <dstainton415@gmail.com>
Date:   Fri Feb 19 00:47:45 2016 +0100

    Fix pickBpfDevice, panic after for loop when no bpf device is acquired

commit 5b944d0f0f121875ee43402f1b05835eae798ce9
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Feb 18 17:07:37 2016 +0100

    Make pickBpfDevice panic if no bpf device acquired

commit 60c8056a0af8b12552b713547cba508324a9afdc
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Feb 18 16:56:02 2016 +0100

    Fix bpf sniffer: add bounds checking when reading our packet capture buffer

commit e49bda36647e40cb4e76854d9079608730c27a7f
Author: Chris Benedict <chrisbdaemon@gmail.com>
Date:   Wed Feb 10 16:00:04 2016 -0700

    Adding SerializeTo for SNAP and LLC

commit cdd21628caecd1489c9204a8596414467fd6d629
Merge: e979bcc f1a59ce
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jan 13 09:44:26 2016 -0700

    Merge pull request #162 from ldnvnbl/patch-1
    
    fix decode bug

commit f1a59ce14ed52258bad14c328355a6c087e83a8b
Author: LinYushen <ldnvnbl@gmail.com>
Date:   Wed Jan 13 13:19:46 2016 +0800

    fix decode bug

commit e979bcc190a020606a9ddcc077e6edf6fe49cd81
Merge: fcd0c1d fcb33a4
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 11 09:26:00 2016 -0700

    Merge pull request #161 from ldnvnbl/master
    
    fix a SFlowDataFormat decode bug

commit fcb33a443faff6fd6569866c1627798240b44956
Author: LinYushen <ldnvnbl@gmail.com>
Date:   Mon Jan 11 18:49:07 2016 +0800

    fix a SFlowDataFormat decode bug

commit fcd0c1de5ee74764536d744176006fef28f240fd
Merge: 1831c92 d484bff
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Jan 7 09:26:47 2016 -0700

    Merge pull request #139 from breml/compilebpffilter-freecode
    
    CompileBPFFilter C.pcap_freecode

commit d484bff960724450e05eca1956f938b488200c2b
Author: Lucas Bremgartner <lucas@bremis.ch>
Date:   Thu Jan 7 16:51:01 2016 +0100

    Bugfix: prevent from calling C.pcap_freecode twice
    
    Added comment to function compileBPFFilter about responsibility
    for freeing returned _Ctype_struct_bpf_program.

commit 1831c92d2aa0584240d901d50d0851951a841c92
Merge: 03d876f 21deb41
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:38:46 2016 -0700

    Merge pull request #118 from urso/enh/loopback-decodinglayer
    
    Implement DecodingLayer interface for loopback

commit 03d876fd94adf5c67f0ef5bde31f44ede21ff10d
Merge: 62abfc0 cf0165d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:35:57 2016 -0700

    Merge pull request #128 from darxriggs/fix-contributing
    
    fix typo in CONTRIBUTING.md

commit 62abfc080e6ff492579c7ae1c48feebcf7fb6068
Merge: 28f6d2f 73e9458
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:35:42 2016 -0700

    Merge pull request #129 from darxriggs/icmp6-type-constants
    
    refactoring - use ICMPv6 type constants

commit 28f6d2f290239a1b1a4cca4656bb90728ac41d08
Merge: baaddf5 da7e32e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:35:02 2016 -0700

    Merge pull request #130 from darxriggs/icmp6-input-validation
    
    validate input data length when decoding ICMPv6

commit baaddf5a4adf9b5dcbabe91c48301c54e454908d
Merge: 39375db 7064a0a
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:34:40 2016 -0700

    Merge pull request #134 from darxriggs/icmp4-refactoring
    
    Make implementation for ICMPv4 as similar as possible to ICMPv6

commit 39375db9008a303e42c1c0c72c722ebb995f2275
Merge: ee7b62b b07ffc1
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:30:31 2016 -0700

    Merge pull request #155 from kkirsche/patch-1
    
    Use Github syntax highlighting for CONTRIBUTING.md code blocks

commit ee7b62bc69663a3041cfc8dc433073d795bce12b
Merge: b8af8b3 9bfddfd
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:30:12 2016 -0700

    Merge pull request #156 from kkirsche/patch-2
    
    Use consistent .md file extension for Markdown files

commit b8af8b378be85c1f0d1eab478b9170ce98a4601e
Merge: 1589ab7 ca9ece1
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jan 4 13:29:53 2016 -0700

    Merge pull request #158 from lhausermann/master
    
    New example program : pcaplay

commit 1589ab7c8b4946225f2d45199bacb82217823c25
Merge: ef24fd2 7df0161
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Wed Dec 30 13:25:21 2015 +0100

    Merge pull request #133 from darxriggs/cleanup-formatting
    
    fix formatting

commit ef24fd27eddaa86603f94f14c88edef2c14c5acd
Merge: 55e78a5 487c0cc
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Wed Dec 30 13:23:58 2015 +0100

    Merge pull request #152 from fclairamb/master
    
    Added raw IPv4 and IPv6 packet wrapping linktype

commit ca9ece108292518f0e18348999c72e7048610eaa
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Dec 29 17:26:45 2015 +0100

    Integrate some Sentryo team patches :
     - add nice stats about the number of packet sent, and remaining time
     - add a fast mode, to replay packet as fast as possible

commit e9308402a244c2d6b085fb316838e716ed1bc800
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Dec 29 17:12:21 2015 +0100

    Pcaplay is a simple utility program to replay a recorded pcap
    file, trying to get the same timing than the orign packets.

commit 55e78a57ea916f581027eef94ce0b54622c92e10
Merge: 2c69e07 2d4b2fe
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Dec 14 11:45:49 2015 -0700

    Merge pull request #157 from Rolinh/fix-dragonfly-support
    
    Add linking flags for DragonFly BSD libpcap

commit 2d4b2fe3f6fe1fe9bcae805ee7e59a52569ba35a
Author: Robin Hahling <robin.hahling@gw-computing.net>
Date:   Mon Dec 14 19:35:02 2015 +0100

    Add linking flags for DragonFly BSD libpcap

commit 9bfddfdd4d2872589f36650de2d44c12baeed57b
Author: Kevin Kirsche <Kev.Kirsche+GitHub@gmail.com>
Date:   Fri Dec 4 10:05:34 2015 -0500

    Use consistent .md file extension for Markdown files
    
    Rename README to be consistent with other files using the `.md` extension for markdown.

commit b07ffc1890ff46c64f5dd2a7e61f176265a10c94
Author: Kevin Kirsche <Kev.Kirsche+GitHub@gmail.com>
Date:   Fri Dec 4 10:02:39 2015 -0500

    Use Github syntax highlighting for code blocks
    
    Leverages: https://help.github.com/articles/github-flavored-markdown/#syntax-highlighting

commit 2c69e078c3a09a892c6e123b829343c9bf231c92
Merge: 1de0af9 b76f9c2
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Dec 2 12:50:54 2015 -0700

    Merge pull request #154 from kkirsche/patch-1
    
    Change references of code.google.com to github.com

commit b76f9c2332923151e7d86f9ee1f742269d1edd18
Author: Kevin Kirsche <Kev.Kirsche+GitHub@gmail.com>
Date:   Wed Dec 2 13:40:32 2015 -0500

    Change references of code.google.com to github.com
    
    Fix #135

commit 487c0cc416754a86af4a35006a8d0e0174f75629
Author: Florent Clairambault <florent@clairambault.fr>
Date:   Sun Nov 22 02:13:24 2015 +0100

    Added raw IPv4 and IPv6 packet wrapping linktype
    
    These link types are perfectly supported by tcpdump & wireshark. Instead of specifying a LinkTypeEthernet and wrapping ethernet frames, you can specify a LinkTypeIPv4 and wrap IPv4 frames (skipping the ethernet wrapping).

commit 1de0af91d20e032d5c80069ee5b63f023e87d690
Merge: 1b0b789 142c9b5
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Oct 28 10:56:01 2015 -0600

    Merge pull request #140 from LrsK/socketstats
    
    Add export of stats from a socket (afpacket)

commit 142c9b546172e64f9000c40f1e280dda0b6110c4
Author: Lars Kulseng <lars.kulseng@nhn.no>
Date:   Wed Oct 28 09:53:58 2015 +0100

    Revert "Fixed import paths"
    
    This reverts commit 375b6aaa4e1b0a283a1c92805cfc00be8a93583c.

commit 375b6aaa4e1b0a283a1c92805cfc00be8a93583c
Author: Lars Kulseng <lars.kulseng@nhn.no>
Date:   Wed Oct 28 09:30:08 2015 +0100

    Fixed import paths

commit 1b0b78901cdd351ecfc68bf1a2adafcd2ff30220
Merge: 233f0be af210a3
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Oct 6 10:06:39 2015 -0600

    Merge pull request #145 from wallclockbuilder/patch-1
    
    Add godoc info to README

commit af210a38c9ed1995c396ecd7484500d1a6a6ded3
Author: Mawueli Kofi Adzoe <wallclockbuilder@googlemail.com>
Date:   Tue Oct 6 15:38:15 2015 +0000

    Add godoc info to README

commit 233f0bee37888328a517b62b98714cb07f814bb6
Merge: 63a65fa 459d615
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Oct 5 09:47:41 2015 -0600

    Merge pull request #144 from hkwi/dot11_sequence_number
    
    [dot11] fix sequence number

commit 459d61519229f7849a245c036f6d3c2d94b11119
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Mon Oct 5 13:16:34 2015 +0000

    [dot11] fix sequence number
    
    Sequence control field (16bits) has:
     Fragment number(b0-b3)
     Sequence number (b4-b15)
    
    Signed-off-by: Hiroaki KAWAI <hiroaki.kawai@gmail.com>

commit 11242ff96501a939909d6b3b4a42fd5e9f322d5f
Author: LrsK <larskulseng@gmail.com>
Date:   Fri Sep 25 09:07:49 2015 +0200

    Update afpacket.go

commit 979ab928e7c4db8d9b8f0bcf112385ca9773579e
Author: LrsK <larskulseng@gmail.com>
Date:   Fri Sep 25 09:03:19 2015 +0200

    Added ability to get packet stats from socket

commit ae96eb0e0c1be2351fb98fc907ded9010bfa9fa2
Merge: eaf9c25 63a65fa
Author: Lucas Bremgartner <lucas@bremis.ch>
Date:   Wed Sep 23 22:50:36 2015 +0200

    Merge remote-tracking branch 'upstream/master' into compilebpffilter-freecode

commit eaf9c25fb26b74790e6a1a2d84182b20e0d364d8
Author: Lucas Bremgartner <lucas@bremis.ch>
Date:   Wed Sep 23 22:46:15 2015 +0200

    Better handling for C.pcap_freecode
    
    Added C.pcap_freecode in error case
    Moved C.pcap_freecode to function call as defer

commit 63a65fadb1b52f38084c14d3eda50c57e2101cd1
Merge: 10baa3b 454403b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Sep 22 16:17:33 2015 -0600

    Merge pull request #138 from breml/bpf-instruction-filter
    
    Add methods to apply handcrafted BPF filters

commit 10baa3bd5fac7b7d1355e2e8ad125dbe86b2cdde
Merge: 8fa4a8e 48c044d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Sep 22 16:12:00 2015 -0600

    Merge pull request #136 from breml/comply-contributors-guidelines
    
    fixup to comply to contributors guidelines

commit 9cd43efea6e2d0b64a182fdb0449c92e03d32d3c
Merge: 48c044d 454403b
Author: Lucas Bremgartner <lucas@bremis.ch>
Date:   Mon Sep 21 22:41:38 2015 +0200

    Merge branch 'bpf-instruction-filter'

commit 48c044ddedfda499ef21dc5abcad8748a8baa847
Author: Lucas Bremgartner <lucas@bremis.ch>
Date:   Mon Sep 21 22:08:21 2015 +0200

    fixup to comply to contributors guidelines
    
    * go fmt
    * copyright
    * .gitignore for binaries built by ./gc

commit 454403b95996efc4a90560627766832b8f1de151
Author: Lucas Bremgartner <lucas@bremis.ch>
Date:   Mon Sep 21 21:42:46 2015 +0200

    Add methods to apply handcrafted BPF filters
    
    Added methods
    * SetBPFInstructionFilter
    * NewBPFInstructionFilter
    * CompileBPFFilter
    to work with handcrafted BPF filters for cases, which could
    not be expressed with the pcap filter expression.

commit 21deb418a61c9f64700fe82188d6f8d7395a1427
Author: urso <steffen.siering@elastic.co>
Date:   Mon Sep 21 17:43:51 2015 +0200

    simplify decodeLoopback

commit bfc45dcb61b811f96c260f3dbf74e1072f9665a4
Author: urso <steffen.siering@elastic.co>
Date:   Mon Sep 21 17:42:56 2015 +0200

    Add some missing doc strings

commit 7df01614f1ff7c6128cb75ea1b74f4d70125c19f
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:40:38 2015 +0200

    fix formatting
    
    * run `gofmt -w .`

commit 7064a0aa3e9806c63975c348fdf6dc6c3b02ba03
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:20:21 2015 +0200

    refactor ICMPv4 input data validation
    
    * inlining error variable & adapting message

commit 1527a3fda40a1d2b07fbef8680202092d733bc34
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:15:44 2015 +0200

    add documenation for public ICMPv4 methods

commit f553862e7f42c4ad7a585d33b918e1b9f970a2f8
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:13:16 2015 +0200

    refactor decodeICMPv4() method
    
    * reduce code duplication by using a base layer method

commit 6f56bed7624637d155768b4fc3f4b4c2e4f0ef96
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:10:33 2015 +0200

    add ICMPv4TypeCode methods SerializeTo() and CreateICMPv4TypeCode()

commit ad5f1fd176180522740e0115b4abf60343d2119d
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:05:41 2015 +0200

    add ICMPv4TypeCode GoString() method

commit daf4d4aebdc02df3942ac7ffd429cc1bb5f07108
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 13:06:38 2015 +0200

    change ICMPv4 String() method to be similar to ICMPv6
    
    * introducing constants for ICMPv4 codes (for types constants already exist)

commit 5bbe2680fd2d8f9239aab745df4a7e6d5932186b
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 14:02:57 2015 +0200

    add ICMPv4 methods Type() and Code()

commit 23570b2b226e6d2d46e95966ba5c25f33ca645ab
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 12:38:31 2015 +0200

    reordering code
    
    * to be in line with layers/icmp6.go

commit 73e9458ee329d255b8604a017b65d08b9a10643c
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 11:59:51 2015 +0200

    refactoring - use ICMPv6 code constants

commit a6472da7c4a2ccac2e253ff348845e274085474c
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Sun Sep 13 11:56:42 2015 +0200

    fix ICMPv6 code -> string mapping for ParameterProblem(UnrecognizedIPv6Option)

commit 1252b04d115abae271b4312ed06f1de26b80a5b4
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Fri Sep 11 23:57:27 2015 +0200

    refactoring - use ICMPv6 type constants

commit da7e32ee792742ab8b8e7d010eb1f22a182c93cf
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Fri Sep 11 22:47:10 2015 +0200

    validate input data length when decoding ICMPv6
    
    * for ICMPv4 this was already implemented

commit cf0165dc778076cfc9d040dbd832eb6c0ffc9985
Author: René Scheibe <rene.scheibe@gmail.com>
Date:   Fri Sep 11 22:38:29 2015 +0200

    fix typo in CONTRIBUTING.md

commit 8fa4a8ede024b2038f12ba5294a7504865352b29
Merge: 1e27957 19b8e1d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Sep 9 12:30:04 2015 -0700

    Merge pull request #126 from randstr/icmp6-typecode-map
    
    ICMPv6TypeCode String() method refactoring

commit 19b8e1d8a0bf3b44adc9e7579d8c86984e469b59
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Sep 9 19:33:56 2015 +0100

    ICMPv6TypeCode String() method refactoring

commit 1e27957a4856f3e7a537e7dbfb2ae20c03f268bc
Merge: 010b64d 585dfb4
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Sep 9 09:35:07 2015 -0700

    Merge pull request #125 from randstr/icmp6-fixup
    
    icmp6.go fixup

commit 585dfb4fdec53ad9051394e41bbd176559e95b19
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Sep 9 16:29:28 2015 +0100

    icmp6.go fixup

commit 010b64d96ec9449931e724a819410785d45856c9
Merge: 0a7c87f e7b8bdd
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Sep 9 08:58:47 2015 -0700

    Merge pull request #124 from randstr/icmp6-typecode-string
    
    Add GoString() method to ICMPv6TypeCode

commit e7b8bdd415a7d468863dfa17c19b2d7ef6d71171
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Sep 9 04:06:16 2015 +0100

    Improve format for ICMPv6TypeCode String() method
    
    Don't display ICMPv6 code where it doesn't have any particular meaning,
    e.g., show "EchoRequest" instead of "EchoRequest(0)".

commit 2529b66f22695e6274eea273277ebe6ce938a9d0
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Sep 8 20:40:41 2015 +0100

    Add GoString() method to ICMPv6TypeCode

commit 0a7c87fec3d5b10b90633575cd499ea3c21fdd5d
Merge: aa09ced 3242f2b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Sep 9 07:58:04 2015 -0700

    Merge pull request #122 from randstr/icmpv6-typecode-uint16
    
    Add helper methods to handle ICMPv6TypeCode

commit 3242f2b1834b17b61989c6d33e54d5cbce0f211d
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Sep 8 20:39:11 2015 +0100

    Add godoc comments to new ICMPv6TypeCode exported methods

commit 775f17d8e5293fd3b96b40d17f0db6e456a1f2bd
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Sep 8 18:06:54 2015 +0100

    Add helper methods to handle ICMPv6TypeCode
    
    Fixes issue #84

commit aa09ced736460d76535444c825932a0742975f7d
Merge: 7abd91e 0d374b0
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Sep 4 13:42:49 2015 -0600

    Merge pull request #119 from randstr/ip6-review
    
    Add LayerGoString() to packet.go

commit 0d374b04b8f4d49c5aaa7ae5d5410e74fb05f465
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Sep 4 12:35:55 2015 +0100

    ip6.go: reorganize hop-by-hop function layout

commit c7f95d22b4fbd33cbe81fd94d42de154f3532b76
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Aug 26 20:47:19 2015 +0100

    ip6_test.go fixup
    
    Some style and formatting changes

commit f9aa4edde7d529f6abfaf120e8399e63daa90991
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Aug 26 23:34:06 2015 +0100

    Add layerGoString() function to packet.go

commit 5b21e08916059ba43cc739cbe02eb300dcc98db5
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Sep 4 12:12:36 2015 +0100

    ip6: replace serialize dryrun boolean with nil check

commit 384a6a36396f24e9b7267c258f5e3af17e72769b
Author: urso <steffen.siering@elastic.co>
Date:   Fri Sep 4 02:32:58 2015 +0200

    Implement DecodingLayer interface for loopback

commit 7abd91e1d374797e8c5b9a85a44bea266a62d7c5
Merge: 58c1be9 c65e42d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Sep 3 09:17:40 2015 -0600

    Merge pull request #117 from orivej/character-strings
    
    Fix decoding of TXT records

commit c65e42dee4ce281886a90442e2e87fcce40ba2e3
Author: Orivej Desh <orivej@gmx.fr>
Date:   Wed Sep 2 16:56:29 2015 +0000

    Update DNS TXT patch after review.

commit 36a52f7a3f792fa251034cf3b883437c057a9b21
Author: Orivej Desh <orivej@gmx.fr>
Date:   Wed Sep 2 02:43:20 2015 +0000

    Improve style.

commit d6b50eb9911a565bb6cf14b9440b2ea6b9653bcf
Author: Orivej Desh <orivej@gmx.fr>
Date:   Wed Sep 2 00:09:21 2015 +0000

    Conform in style.

commit b4fbcd19419a10795c0ee9eadf5d24d228590add
Author: Orivej Desh <orivej@gmx.fr>
Date:   Tue Sep 1 23:49:38 2015 +0000

    Introduce DNSResourceRecord.TXTs.

commit ce7d1c740b36b395cb82674a35f3d0144b201e62
Author: Orivej Desh <orivej@gmx.fr>
Date:   Tue Sep 1 23:17:55 2015 +0000

    Add failing TXT test.

commit 58c1be9fc9f60ee55691fb4a7119652a72c5cde6
Merge: 0c0a565 3917d22
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Aug 25 10:09:57 2015 -0600

    Merge pull request #111 from randstr/tlv-ptr
    
    ip6: convert more option TLVs to use pointers

commit 0c0a565278f52d70746cd1d3ed5fe2924d712dd3
Merge: 393dfed 3c66de5
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Aug 25 09:40:51 2015 -0600

    Merge pull request #110 from randstr/decode-test
    
    decode_test: use gopacket.NilDecodeFeedback instead of &nilDecodeFeed…

commit 393dfed70dbaf952a772288430887f37e5c4963d
Merge: 59eb9f3 6724338
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Aug 25 09:38:33 2015 -0600

    Merge pull request #109 from randstr/ip6-test
    
    ip6_test: Cleanup jumbogram unit tests somewhat

commit 3917d225c2cff511d23250e5c98b5de391d3f711
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Aug 25 16:20:39 2015 +0100

    ip6: convert more option TLVs to use pointers

commit 3c66de5690e4f2998701dffb92b98d01445a4dea
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Aug 25 12:58:50 2015 +0100

    decode_test: use gopacket.NilDecodeFeedback instead of &nilDecodeFeedback

commit 67243384b8ba7f1d189c9e3c856276833d8e4f6c
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Aug 25 01:12:03 2015 +0100

    ip6_test: Make jumbogram unit tests less verbose
    
    Don't dump the entire contents of a jumbogram when a test fails

commit 59eb9f32618f6cbbe562798753b1731b2322a678
Merge: 0dfcad4 220ded5
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 24 09:52:46 2015 -0600

    Merge pull request #103 from randstr/ip6-hbh-review
    
    Add serialization of IPv6 Hop-by-hop extension header

commit 0dfcad4d7e800900d022afe8ae14881c54e0d8e0
Merge: 24fb74e 00a2112
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 24 09:52:32 2015 -0600

    Merge pull request #107 from sentryo/ip4defrag-fix-max-offset
    
    ip4defrag: fix maximum fragment offset security check

commit 220ded5494a0a486b5f75c900ea10a82a127774c
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Sat Aug 8 01:25:04 2015 +0100

    Add TCP/IP checksum test for IPv6 UDP Jumbograms

commit 8493c9d8347e3e0d031000fac718e99ebac1aaa3
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Aug 7 16:38:09 2015 +0100

    Keep IPv6HopByHop as a Layer

commit a31de34688d5f1ad4d874fbb0654ceb3c2023052
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Aug 5 23:43:58 2015 +0100

    Add serialization of IPv6 Hop-by-hop header
    
    Also:
    - fix reverse order TLV serialization
    - add automatic padding for TLVs with FixLengths == true
    - add/fix Jumbo option length with FixLengths == true

commit ec15304a75b4d5ed86c388d8d7d67f3b66558aaf
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Aug 7 23:13:03 2015 +0100

    Make NoNextHeader a Payload layer type

commit 76857d8bad5097ba4d0e40e58b55b5b7534a3a19
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Aug 7 23:38:28 2015 +0100

    tcpip_test: add missing checkLayers()

commit 9ec04cde8c4e26d73ab1711be89adbd1a043b15d
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Aug 7 06:36:56 2015 +0100

    ip6_test: Fix typo

commit 00a21126fe55a6da32f649ec4ee9642be283e5fb
Author: Sentryo R&D <developers@sentryo.net>
Date:   Fri Aug 21 10:56:15 2015 +0200

    ip4defrag: fix maximum fragment offset security check
    
    The maximum acceptable value for the fragment offset is expressed in
    units of 8 bytes (8189), so the comparison must be done directly on the
    header value, before doing the multiplication.

commit 24fb74e1070a5632fe4222772376acd8b7f8f294
Merge: 696b89e 6d99209
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Aug 18 16:07:39 2015 -0600

    Merge pull request #105 from randstr/pcapgo-tstamp
    
    pcapgo: Add support for writing packets with Timestamp zero

commit 6d99209794497e6d1fc5072c18c6a65bea33ce5a
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Aug 18 22:51:19 2015 +0100

    pcapgo: Add support for writing packets with Timestamp zero
    
    If gopacket.CaptureInfo has Timestamp zero, invalid timestamps
    are produced because calling time.UnixNano() on zero is
    undefined. To fix this, and also as a convenience, use the
    current time if ci.Timestamp is not set (is zero).

commit 696b89e15cdfa8e6a575fd8c1d6258ded64dd024
Merge: 5dc6072 b021746
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Aug 6 09:50:26 2015 -0600

    Merge pull request #94 from randstr/bugfix
    
    Fix IPv6 checksums when there are IPv6 extensions.

commit b0217463d43ea2b725726928b6b02cb11a7f2a54
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Aug 4 00:04:36 2015 +0100

    Fix IPv6Destination metadata

commit d6962723b6a86d24dcee32fdcc5b93da066edfff
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Fri Jul 31 21:20:42 2015 +0100

    Add support for IPv4-mapped IPv6 addresses

commit 8e4e2293c400dd6c47bcb1f667d856da767351fb
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Thu Jul 30 22:29:21 2015 +0100

    Improve error message for IPv4/IPv6 invalid addresses
    
    The following code:
    
      ip := net.ParseIP("1.2.3.4")
      fmt.Printf("ip: %v (len %d)\n", ip, len(ip))
    
    prints
    
      ip: 1.2.3.4 (len 16)
    
    so the error message
    
      if len(ip) != 4 {
        return fmt.Errorf("invalid IPv4 %v", ip)
      }
    
    is not very helpful with IPv4-mapped IPv6 addresses ("invalid IPv4 1.2.3.4")

commit 6b7b83b82ff0db1c39a43a178cff8cea5cc7975b
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Wed Jul 29 12:59:38 2015 +0100

    Fix out of range error in pseudo-header checksum for invalid addresses
    
    Add IPv4/IPv6 address length checks

commit cbbd0e56598716d37d29641cc8e126a21a893537
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Thu Jun 25 06:12:17 2015 +0100

    Fix TCP/UDP/ICMP checksum calculation for IPv6 extension headers
    
    IP pseudo header checksum is miscalculated when there are IPv6 extension
    headers present because the next protocol value in the IPv6 header proper
    does not match the next protocol value in the IP pseudoheader.
    
    We pass the next IP protocol value of the pseudo header explicitly for
    the upper-layer header (TCP/UDP/ICMPv6)

commit fda83307786e9b4c04c5305d44fcaae505d172b1
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Sun Aug 2 01:03:03 2015 +0100

    Add test for TCP/IP checksum (using UDP)

commit f528435e304b03e7f2f32cdd8ec71be96664130b
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Sun Aug 2 00:00:47 2015 +0100

    Fix serialize of IPv6 Destination Option extension headers

commit f691ef984e71c99c8dc93e3bcb6ae3f2c3a4216e
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Sat Aug 1 23:53:29 2015 +0100

    Add test for IPv6 Destination Options extension header

commit dc17312af7e73cd21d49c62b86497f65544f1ba0
Author: João Valverde <joao.valverde@tecnico.ulisboa.pt>
Date:   Tue Jun 23 17:42:12 2015 +0100

    Fix IPv6 routing header decoder
    
    * Fix wrong header length reference
    * Add missing default switch case

commit 5dc6072c86ec3c4d63dd41e1f8936c3903c1d771
Merge: 12ae49a 60559c1
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Jul 28 23:55:58 2015 +0200

    Merge pull request #71 from lhausermann/ip4-defrag
    
    defrag: Implement a IPv4 defragmenter.
    
    IPv4 Defragmenter takes in an IPv4 packet with a fragment payload.
    It do not modify the IPv4 layer in place. It returns a ready-to be used IPv4 layer.
    If the passed-in IPv4 layer is NOT fragmented, it will immediately return it without
    modifying the layer.
    If the IPv4 layer is a fragment and we don't have all fragments, it will return nil
    and store whatever internal information it needs to eventually defrag the packet.
    If the IPv4 layer is the last fragment needed to reconstruct the packet, a new
    IPv4 layer will be returned, and will be set to the entire defragmented packet,

commit 60559c17f66a032497cae3d40444d70ddeb77be0
Merge: 5f467df 12ae49a
Author: Laurent Hausermann <laurent.hausermann@gmail.com>
Date:   Tue Jul 28 23:50:52 2015 +0200

    Merge branch 'master' into ip4-defrag
    
    Conflicts:
            dumpcommand/tcpdump.go

commit 12ae49a979e561a284450ac432efeb30a6278a05
Merge: 22636c3 70a9376
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Jul 28 08:19:17 2015 -0600

    Merge pull request #98 from adriantam/master
    
    Adding ability to encode ipv4 options

commit 70a937638a367b1ab0e092c45c8575c2b540e6c4
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Thu Jul 23 15:34:17 2015 -0400

    Adding ability to encode ipv4 options in serialize function

commit d7eb508d5a47bdc07a276c8a588318d4fc12d92a
Merge: 22636c3 e390f79
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Thu Jul 23 15:24:04 2015 -0400

    Merge branch 'master' of https://github.com/adriantam/gopacket

commit 22636c35d6ae1dcce5b5804418fa99e7f2cf4e39
Merge: 4abb813 b061ffb
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jul 1 15:02:16 2015 -0600

    Merge pull request #89 from hkwi/dot11_trunc
    
    [dot11] use SetTruncated() for too short packet

commit 4abb8130a76808523cffd9d164b3605a83c12482
Merge: 0fb158c eee1ed8
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jun 29 09:59:42 2015 -0600

    Merge pull request #91 from DrJosh9000/patch-2
    
    Fix segfault (ReadPacketData after Close)

commit 0fb158c5a58e13874dc3979fa1f38ce84957f480
Merge: f04f242 d9db4ba
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jun 29 09:53:41 2015 -0600

    Merge pull request #90 from DrJosh9000/patch-1
    
    Use BlockForever in the example

commit eee1ed82a49b8d4aa319defe7ce2b3812ec96e8c
Author: Josh Deprez <josh.deprez@gmail.com>
Date:   Mon Jun 29 23:22:10 2015 +1000

    Fix segfault (ReadPacketData after Close)
    
    Currently if you call Close on an open Handle and then try to read a packet, it will segfault.
    This is easy to do, for example, trying to use Handle.Close to stop the goroutine spawned by PacketSource.Packets.

commit d9db4ba04dfffffc9f2a0411f23fe965f4be54a5
Author: Josh Deprez <josh.deprez@gmail.com>
Date:   Mon Jun 29 22:24:56 2015 +1000

    Use BlockForever in the example

commit b061ffb41d5154fbc36ab922751a4e3142c17b8a
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Mon Jun 29 19:52:08 2015 +0900

    [dot11] fix uint8 overflow

commit 2696091959bf2afb3aa90fff51c5fdf76a06f935
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Mon Jun 29 19:29:12 2015 +0900

    [dot11] fix uint8 overflow

commit d19103c29b54ffa504ebc982683c393143c1c227
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Thu Jun 25 20:27:20 2015 +0900

    [dot11] use SetTruncated() for too short packet
    
    Captured dot11 packets are sometimes broken and too short by nature.
    That caused slice-bounds-out-of-range runtime error very often,
    and triggered builtin recovery, which cost counted.

commit f04f242e4dd8c4ee4c5f2246fce9501d3233a444
Merge: 6793422 5967a9b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Jun 19 09:04:29 2015 -0600

    Merge pull request #88 from david415/87.add-basic-bsd-bpf-sniffer.1
    
    Add rough draft BSD BPF sniffer API

commit 5967a9b5201dbf9d031a5e65a5a9fd310655db68
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 21:52:58 2015 -0700

    Move initialization logic into NewBPFSniffer

commit c990a3d670ceb868fa78071a2e57f39c9288472d
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 21:42:36 2015 -0700

    Add descriptive comment about GetReadBufLen

commit d985bf735c0a977cf646a9f108799e2ad70e23f5
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 21:33:05 2015 -0700

    Add GetReadBufLen and update comments

commit 7904ed41c04069bc28468b7f6014543ccf44a17c
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 15:19:56 2015 -0700

    Add further explainatory comments for methods + constructor function

commit 9004eecaef7f27c63f1a44269ebb456398be8c0c
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 11:29:08 2015 -0700

    Apply new variable names and set immediate default to true

commit fad0f7bad3d68eee40da05e314d1e9a7009b9b7f
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 11:14:25 2015 -0700

    Add detailed comments about Options struct

commit 8767cebff7048a1603b18303d31a41f5ea260078
Author: David Stainton <dstainton415@gmail.com>
Date:   Thu Jun 18 00:04:42 2015 -0700

    Fix ReadPacketData, set vars before read..

commit 88f2be3e6cb244cf4ac7e6953dd70ff75e988c2c
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Jun 17 13:44:46 2015 -0700

    Teach sniffer to use Options struct

commit f67b95de5159b03662c400f5fb7898298fab9006
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Jun 17 12:22:35 2015 -0700

    copyright lines first

commit e390f7981a0df1c6daf0ac511ebb24cb0d8b0fe0
Merge: 6793422 c7b76c8
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Wed Jun 17 15:15:44 2015 -0400

    Merge branch 'master' of https://github.com/adriantam/gopacket

commit c9c67a80d3175b025ba0b5a30662a13f9b095456
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Jun 17 12:09:51 2015 -0700

    remove stopchan and readchan

commit d598b08ff679aff91d9026f5c8bbdb425908ccdf
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Jun 17 00:48:32 2015 -0700

    Provide optional user set timeout

commit ca04626623802b4c0c1da7505224134866063d34
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Jun 17 00:19:08 2015 -0700

    Remove superfluous test code

commit 9303e3feac14a44c7c79b41418cb0bac6ab970ee
Author: David Stainton <dstainton415@gmail.com>
Date:   Wed Jun 17 00:15:49 2015 -0700

    Fix Init, open bpf device first

commit 0e282b426afb26f72f61058f6a0785d65ffa9ba7
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 23:52:57 2015 -0700

    Set bpf buflen before SetBpfInterface

commit 2e428af6a6cb0157614ca6abfe716347c950a6d7
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 22:51:31 2015 -0700

    Minor code cleanup...
    
    - Built and tested on FreeBSD

commit d7ec2f1c0154d58c092cfa621850c8b0f6d8d302
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 18:09:38 2015 -0700

    Fix ReadPacketData
    
    this commit hopefully fixes ReadPacketData... but i'll have to test
    it on my BSD system...

commit 2808c51c70f89c9af9f5cca1f87b3aed5c03a308
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 18:00:11 2015 -0700

    Add Close method

commit e3eb76812df29384ab088a1eeb515b11f4633812
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 17:55:08 2015 -0700

    Allow user to set bufLen and remove goroutine from ReadPacketData

commit 5d48aa0fa8328e25874d05b742950669988018cb
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 17:13:55 2015 -0700

    Allow user to select a BPF device

commit 1afe416c574947ed42f8e44b639f81f57bafecb6
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 16:59:03 2015 -0700

    Camel-case name and capitalize acronym BPFSniffer

commit cbc82c97f354b9e03f3e84834c19ba79b857743d
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 16:55:48 2015 -0700

    Make import lists pretty

commit 86dd8b70978a37f8c09cfca660324f878a514aaa
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 16:53:49 2015 -0700

    Fix license and add name to authors file

commit 427e45a08df89a0fed34d727298ddccf56a47c20
Author: David Stainton <dstainton415@gmail.com>
Date:   Tue Jun 16 15:22:53 2015 -0700

    Add rough draft BSD BPF sniffer API

commit 6793422236fe607f7d48dda70fe642855e71b82f
Merge: b03374e be7877f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Jun 16 10:07:06 2015 -0600

    Merge pull request #85 from DrJosh9000/patch-1
    
    Put the flags into a single "var (" block, and gofmt'd it.

commit be7877f6db0d0653246b55bcc330188541af6ff9
Author: Josh Deprez <josh.deprez@gmail.com>
Date:   Sun Jun 14 11:23:09 2015 +1000

    Put the flags into a single "var (" block, and gofmt'd it.

commit 5f467df56935c49f3c156f80c2e83f96251011ee
Author: Laurent Hausermann <l@hauserman.org>
Date:   Sat Jun 13 00:26:21 2015 +0200

    Rebuilding the whole IPv4 Layer, and relaunch (unsuccessfully) the decode procedure

commit b03374ef6a0b51d8723a949f80d00580dd97f094
Merge: 8985fac 8e51245
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jun 10 09:49:24 2015 -0600

    Merge pull request #82 from hkwi/radiotap_ht
    
    [layers/Radiotap] add HT, VHT field support

commit 8e512459f59daacb91cf39c9ad199aac2481f0b0
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Wed Jun 3 22:52:42 2015 +0900

    capitalize acronyms

commit 3b89e7dad993c4386a6d29c7ab67964355e9b035
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Wed Jun 3 22:50:17 2015 +0900

    remove temporal string slice allocation

commit b9b7e8d4e6898722c626d41471d13945e7021cdc
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Fri May 22 15:28:48 2015 +0900

    [layers/Radiotap] add HT, VHT field support
    
    add support for 802.11n, 802.11ac fields

commit 5069c1e53fb1049d6e0c9942ce922e427acbf5c4
Author: Laurent Hausermann <l@hauserman.org>
Date:   Tue May 19 11:40:27 2015 +0200

    Add a IPv4 command to dumpcommand
    
    Dumpcommand is used by several example program.
    When called using -defrag command line flag, we will try to defrag
    all incoming IPv4 fragment. Default value is false (don't defrag).

commit de417dd6f00904563ed0ad51315abb79175855e2
Author: Laurent Hausermann <l@hauserman.org>
Date:   Tue May 19 11:39:56 2015 +0200

    fix help message to the correct value

commit 80c503994c35b02d7b414aaff0e0a723642d9fd4
Author: Laurent Hausermann <l@hauserman.org>
Date:   Tue May 19 11:37:19 2015 +0200

    Move to github.com

commit 8985facf0b5d105cb6ba007d7eafb33db40b98e4
Merge: c1a873b f0fca9f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed May 13 09:51:34 2015 -0700

    Merge pull request #75 from kaorimatz/ipsec-ah-decoding
    
    Fix wrong interpretation of the length of AH

commit c1a873bd00b4ffd031111994d4ebe58af2f83945
Merge: bf18a4b 388e87b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed May 6 11:52:00 2015 -0600

    Merge pull request #78 from gconnell/fixes
    
    Fix pcap, copyright, and format.  Fixes Issue #77

commit 388e87ba58a92cffe7ab35cb3caf6c9839166342
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 6 11:06:26 2015 -0600

    Fix gofmt and add missing copyright notices.

commit d823bebc7bd09751f67c42c8bf8750fcc0ddbbab
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 6 11:05:41 2015 -0600

    Fix issue with pcap findalldevs nil pointers.

commit f0fca9fffccf548b66455981a1a1ccd32c1ce629
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Wed May 6 01:34:04 2015 +0900

    Revert the change which removes ipv6ExtensionBase from IPSecAH
    
    This revert slightly improves backward compatibility.

commit bf18a4b8fea5e497f687215b7cb1c6a28746a0e0
Merge: 3e96393 590b03f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue May 5 09:40:36 2015 -0600

    Merge pull request #76 from kaorimatz/transparent-ethernet-bridging
    
    Support decoding Transparent Ethernet Bridging packets

commit 590b03fbc24d2fdbf69a3777896351920ffd4e19
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 16:43:05 2015 +0900

    Support decoding Transparent Ethernet Bridging packets

commit 2ddd402400f8ff9e8ccc6265b4da35409c89a662
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 16:34:15 2015 +0900

    Add test for decoding Ethernet over GRE packet

commit aafd7afab111b384536cb3b42b6222e3dcb3898f
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 13:34:38 2015 +0900

    Add myself as a contributer in AUTHORS

commit 3e96393488d0420c602e2183b789b6979317c70e
Merge: 09bce8a af61371
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon May 4 20:56:21 2015 -0600

    Merge pull request #74 from kaorimatz/gre-header-decoding
    
    Fix GRE header decoding

commit 8c6a8c7321b45f0a00315f1a8ac3a8215e6c2ea3
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 00:59:53 2015 +0900

    Fix wrong interpretation of the length of AH
    
    The payload length field in AH specifies the length of AH in 32-bit
    words, not the 64-bit words used by other IPv6 extension headers.

commit 8f20542c9eadca8190b16243561227e24e862a38
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 00:29:39 2015 +0900

    Add a metadata for IPv4 encapsulation (protocol 4)

commit af61371fc77d05e1250261ad2ecfae62eb8d61e3
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 01:43:19 2015 +0900

    Fix backward incompatible change in GRE layer
    
    Use a linked list instead of a slice for representing a list of GRE
    source routing entries.

commit 01716cc91b3c8d4047d10b46d13af29d6fbcd77f
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Tue May 5 01:35:35 2015 +0900

    Update test to check the contents of GRE layer

commit b79719384e7117727dc43066898cb16a9f991bda
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Mon May 4 22:14:41 2015 +0900

    Add tests for IPsec AH decoding

commit c7fb9f6f928bd05579deb6b02adefea83fc9e50e
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Mon May 4 16:23:38 2015 +0900

    Add test for GRE decoding

commit 6b72c5012d98e8d5000d7176166441f3e17fa81d
Author: Satoshi Matsumoto <kaorimatz@gmail.com>
Date:   Mon May 4 13:56:19 2015 +0900

    Fix GRE header decoding
    
    - check if the optional fields exist before consuming data
    - `Routing` field is a list of SREs

commit 5cddd7eaee33c6ce42cb91114050c936af1a546a
Author: Laurent Hausermann <l@hausermann.org>
Date:   Sun May 3 00:11:24 2015 +0200

    Move to package ip4defrag with comments
    
    Rework what we don't defrag (MF=0+FragOffset=0)

commit ea885fda2e9f515b4b5b65a7804ed9f4d4cdd8ad
Author: Laurent Hausermann <l@hausermann.org>
Date:   Sat May 2 15:47:50 2015 +0200

    Rename IPv4Flow to ipv4 as its an internal struct

commit fba05525f0f0d261a2623355fa9c5d75c000d115
Author: Laurent Hausermann <l@hausermann.org>
Date:   Thu Apr 30 18:46:00 2015 +0200

    PullRequest #71: Rework the top level interface
    
    Removed interface definition, and keep high level usage of the
    package simple.
    Refactor some initialisation.

commit ecebf1462dd74f47315166c27bb1b92f850a7b56
Author: Laurent Hausermann <l@hausermann.org>
Date:   Wed Apr 29 15:21:51 2015 +0200

    PullRequest #71 : keep exported only the required structs or functions

commit 09bce8a1093e9e9824ceb15de674ef720519cb29
Merge: 5d988aa 2f3771a
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Apr 28 09:55:14 2015 -0600

    Merge pull request #73 from hkwi/radiotap_fcs
    
    FCS may be handled in Radiotap

commit 2f3771a1449618e367bb902cdce1ed560e63c89c
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Mon Apr 27 17:02:53 2015 +0900

    replace broken test packet with valid ones

commit f778bcd4f0277496a1d178bfb71c88df75506d08
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Mon Apr 27 16:52:17 2015 +0900

    FCS may be handled in Radiotap
    
    Current Dot11 parser expects FCS always present,
    so radiotap layer have to add valid FCS.

commit 5d988aa2f4d8468e28087f5cc7e98702c79e015b
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Apr 24 10:55:16 2015 -0600

    Add Travis build indicator to README markdown.

commit dd586929ba0768c3a18d3f2465224e6d5f792aba
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Apr 24 10:50:54 2015 -0600

    Fix travis to also only install certain packages.

commit 6a5faa4927747b62437aacf9c8412ef15fe00d97
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Apr 24 10:46:21 2015 -0600

    Travis config for gopacket.
    
    Note that we only currently test certain packages, specifically pure-go ones
    (IE: not pcap, afpacket, etc).

commit f39ff367ad2a35d9b9007dbedd9e54b52c36e607
Author: Laurent Hausermann <l@hausermann.org>
Date:   Mon Apr 20 17:42:20 2015 +0200

    defrag: Implement a IPv4 defragmenter (EXPERIMENTAL)
    
    This implements the DefragIPv4 interface, which embed IPv4
    defragmentation, and modify packets in place. It returns false
    if the packet is fragmented, and caller will need to give subsequent
    packets. It returns true, if the packet is in its final state (defragmented
    or just pristine).

commit 521c6020a28662df56e7f0b6f03fd2e1a4975484
Merge: c7badfe 378bbdd
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Apr 13 09:48:46 2015 -0600

    Merge pull request #65 from hkwi/radiotap_field_order
    
    fix radiotap field order and size

commit c7badfe33a6dffad299c0397dd0c91440122a625
Merge: 25f19f5 d06cb16
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Apr 13 09:47:26 2015 -0600

    Merge pull request #61 from hkwi/dot11ie
    
    Set dot11 payload for InformationElement

commit 378bbdde44d5eee77902c1a3ee621f13b19678f4
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Fri Apr 10 15:49:03 2015 +0900

    correct bad test
    
    Reference value is the tcpdump output in the comment.

commit 15d32a99469463fa06211acf8f27209f7eed6134
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Fri Apr 10 15:48:37 2015 +0900

    add radiotap test

commit 39ab586a2835b3d14d71dae603e6267239aa0d4a
Author: Hiroaki KAWAI <hiroaki.kawai@gmail.com>
Date:   Fri Apr 10 15:17:38 2015 +0900

    fix radiotap field order and size
    
    /FHSS comes after /Channel.
    /channel is u16,u16 as http://www.radiotap.org/defined-fields/Channel

commit 25f19f5449953c9ff7fc8ce564d3608f2616bf3a
Merge: 9a83e0e 8686293
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 10 09:39:50 2015 -0600

    Merge pull request #70 from dutchcoders/implement-prism-layer
    
    changed prism values to consts

commit 8686293a20d7021c618e8e90d6bcc0690081f9ea
Author: Remco <remco@dutchcoders.io>
Date:   Fri Apr 10 17:34:42 2015 +0200

    changed values to consts

commit 9a83e0efa8f7a6de2d3dd7d5649265683dd56e5e
Merge: 22dae9b 5852d28
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 10 09:31:59 2015 -0600

    Merge pull request #67 from hkwi/dot11ie_serial
    
    implement Dot11InformationElement SerializableLayer

commit 22dae9b7dfe25ff6af7522861589c1520588311f
Merge: dd5aea9 a05f729
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 10 09:29:05 2015 -0600

    Merge pull request #68 from dutchcoders/implement-prism-layer
    
    implemented support for prism monitor mode header

commit a05f729cff32072810b9a931f459884632601efb
Author: Remco <remco@dutchcoders.io>
Date:   Fri Apr 10 10:12:07 2015 +0200

    * added string values for Prism DID types
    * added support for DID types type1 and type2
    * added header code check
    * added IsSupplied for Prism value

commit cb79da6a42ce5ff1b7665c321ab318327202dd92
Author: Remco <remco@dutchcoders.io>
Date:   Thu Apr 9 20:48:16 2015 +0200

    fixed review comments

commit c7b76c848a817fc9d9746d0ff2dd2a5f99e71786
Merge: f8664ea dd5aea9
Author: Adrian Tam <adrian.c.m.tam@gmail.com>
Date:   Wed Apr 8 13:28:59 2015 -0400

    Merge remote-tracking branch 'upstream/master'

commit dd5aea93eb7218b38b50fb81be1d29bed078d8cb
Merge: 178289d a9bb4c6
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Apr 8 10:23:34 2015 -0600

    Merge pull request #63 from adriantam/dns-nil
    
    Fix #52 by setting the base layer for dns

commit 73dd0078ef24c2e817e3a7297584ff8ccdb87ffd
Author: Remco <remco@dutchcoders.io>
Date:   Wed Apr 8 11:07:36 2015 +0200

    implemented support for prism monitor mode header

commit 5852d282e9df7f35cb8a315f9eca391c81c10e02
Author: U-kawai-x230\kawai <hiroaki.kawai@gmail.com>
Date:   Wed Apr 8 14:34:39 2015 +0900

    implement Dot11InformationElement SerializableLayer
    
    Signed-off-by: Hiroaki KAWAI <hiroaki.kawai@gmail.com>

commit 178289da24d5d3339c5cd2afed5a3de4c69eefff
Merge: 2b92a1e 1722fb5
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Apr 6 11:10:18 2015 -0600

    Merge pull request #66 from gconnell/openbsd
    
    Add linking flags for openbsd libpcap.

commit 1722fb56aebdcdc1d1115a9fbff09c95daf70afb
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Apr 6 10:22:50 2015 -0600

    Add linking flags for openbsd libpcap.

commit f8664eacb414abedf765892d4ad4451c9cbd8c41
Merge: fc2fb8a 2b92a1e
Author: adriantam <adrian.c.m.tam@gmail.com>
Date:   Wed Apr 1 15:14:05 2015 -0400

    Merge pull request #1 from google/master
    
    Correctly increment # of pages per TCP conn.

commit a9bb4c66a0275d5483b349aa9763daf80135fad3
Author: Adrian Tam <atam@sandvine.com>
Date:   Wed Apr 1 13:57:38 2015 -0400

    Fix #52 by setting the base layer for dns

commit 2b92a1effab6f201b6035a66eec5717dd832cc59
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Mar 31 08:13:06 2015 -0600

    Correctly increment # of pages per TCP conn.
    
    We (correctly) create one OR MORE pages per TCP packet, since pages are
    fixed-size and TCP packets can exceed their total size.  However, we had
    incorrectly incremented the number of pages per TCP conn by only 1 per
    packet.  This fixes that to actually increment by the correct # of
    packets.

commit d06cb163f8ffe19dce7283cc61b397c3c04c576f
Author: U-kawai-x230\kawai <hiroaki.kawai@gmail.com>
Date:   Sat Mar 28 20:54:07 2015 +0900

    Set dot11 payload for InformationElement
    
    Fixes mgmt class packets returns LayerTypeDot11InformationElement
    in NextLayerType() set BaseLayer.Payload, which will be used
    in the next layer decoding phase.

commit fc2fb8aef6037fe015468281e37e67519a79bbf2
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Mar 17 12:58:12 2015 -0600

    Switch all references to github.
    
    Switch all references to the old location (code.google.com/p/gopacket) to the
    new location (github.com/google/gopacket).

commit b241a0daaa183c440e45a5d6a7b5074714816fdd
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 8 17:01:07 2015 -0700

    Add adrian (for QinQ).

commit 9dea2d8fe3605e9b0fc8bca77f708f113b37f76e
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 8 16:55:38 2015 -0700

    Add Bill Green to AUTHORS.

commit 67480e2cdddaae0266a6f794b61383a9b42ef402
Merge: d698950 de7b306
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 8 16:54:53 2015 -0700

    Merge branch 'bgreen/sflow' of https://code.google.com/p/gopacket into bgreen/sflow

commit d6989500da5a5d9daeb48347a9341f0ed7b96a4a
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 8 16:40:23 2015 -0700

    Simple spelling mistake fix.

commit e97ea855e730c952f344934f7c055912e739f462
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 8 16:39:38 2015 -0700

    Fix doc issue:  Layers() returns slice.

commit de7b306342d11c7d202c2cd4c49053787a290c44
Author: Bill Green <bgreen@newrelic.com>
Date:   Sun Dec 14 11:23:06 2014 -0800

    Operate on slices instead of reading from a buffer
    
    * instead of allocating a buffer for convenience while reading,
      pointers to slice headers are passed around so functions can
      operate on slices directly. Doesn't require any additional
      allocations
    
    * Included tests for all the SFlow packet types I have access to.
      Tests start with a complete IP packet and decode from the bottom
      ethernet layer up to ensure the next layer part works.

commit eb9ab0ca715e41ccd432b12845d7918a8dab2477
Author: Bill Green <bgreen@newrelic.com>
Date:   Thu Dec 11 07:44:52 2014 -0800

    Add better tests

commit a56c2691811d31af9d64fa1b4acdc9517c449394
Author: Bill Green <bgreen@newrelic.com>
Date:   Tue Dec 9 12:57:05 2014 -0800

    Various Cleanup
    
    * SFlow has an IANA port of 6343. added a case for this to
      layers/ports.go to map this to an SFlow layer
    * SFlowSourceFormat String function now returns 'UNKNOWN' for unknown
      types
    * removed unnecessary case statements for SFlowBaseFlowRecord's
      GetType()
    * member HeaderProtocol of SFlowRawPacketFlowRecord is now an enum
    * Capitalized 'Windows' in charset enum
    * Removed ugly 'Dot3Stats' prefix in SFlowEthernetCounters struct
    * in sflow.text, made test packet an entire IP packet containing
      an SFLOW datagram. This way, we can pass the entire packet to
      gopacket.NewPacket() to ensure correct decoding for all relevant
      layers

commit 35960c88f08138235636f33b18236050c9bdbffe
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Dec 8 09:54:14 2014 -0700

    Issue #53:  Add support for nested Dot1Q (QinQ).

commit 96b2e1ea798fd65d0041725561976ad2151c208d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Dec 8 09:48:07 2014 -0700

    Fix Issue #51:  Slice Endpoint.Raw.

commit d85dd3bc675855fcb6cd7f846a288631c5c9c96a
Merge: 35f76d1 2aca848
Author: Damjan Cvetko <damjan.cvetko@gmail.com>
Date:   Sat Dec 6 00:05:46 2014 +0100

    Merge branch 'damjan'

commit 400bf81b3bcdb1e9c5d73eac93f194032bd27e56
Author: Bill Green <bgreen@newrelic.com>
Date:   Mon Nov 24 08:54:16 2014 -0800

    Remove unnecessary io package

commit 7bead10bbe9d5e16c11d8b500b2bc3e326177edd
Author: Bill Green <bgreen@newrelic.com>
Date:   Sat Nov 22 17:12:45 2014 -0800

    Remove unnecessary decodeIP() method
    
    refactoring this layer to use bytes.Buffer instead of binary.Read
    means I just have to use buf.Next() to send decoded byte slices
    into net.IP instead of trying to decode it with a method.

commit 43443c5ae1b90eedb3ce0610249d9d8afb6afde1
Author: Bill Green <bgreen@newrelic.com>
Date:   Fri Nov 21 15:14:52 2014 -0800

    Cleanup - Removing comments

commit 21ead3357fab3a926d6934d76701e95e905bf46b
Author: Bill Green <bgreen@newrelic.com>
Date:   Fri Nov 21 14:38:15 2014 -0800

    use bytes.Buffer in place of binary.Read
    
    binary.Read uses introspection, and gconnell suggested that I
    not use it, or at least do a benchmark to get a sense for the cost.
    I replaced binary.Read with using bytes.Buffer as a reader to get
    at the byte slices. I do a lot of things like:
    
    ````binary.BigEndian.Uint32(bytes.Next(4))````
    
    which seems cumbersome, but it works?

commit 2b4474eeee10ee4908ca7f04137c97fecb410167
Author: Bill Green <bgreen@newrelic.com>
Date:   Fri Nov 21 07:37:44 2014 -0800

    Small benchmark for sflow decode
    
    Added a simple benchmark for decoding one SFlow packet containing
    5 samples, which is typical as seen on my network.

commit 13dbaa5f6b16cdf4b21e106d5d448c78a714cb84
Author: Bill Green <bgreen@newrelic.com>
Date:   Wed Nov 19 07:54:41 2014 -0800

    Separate arrays for Counter and Flow samples
    
    Instead of having a generic interface to hold both counter and flow
    sample structs, use separate arrays to hold each type. A user
    interested in only one type can range over just the one, without
    having to figure out what type it is.

commit a195a21097059542442cff729f9d6121d5d960d9
Author: Bill Green <bgreen@newrelic.com>
Date:   Wed Nov 19 07:40:36 2014 -0800

    Remove unnecessary String functions
    
    gopacket.LayerString() already exists to print layers, so the
    unnecessary String functions have been removed

commit a741ace35f82072405dc8f6d2bcae46c6874e510
Author: Bill Green <bgreen@newrelic.com>
Date:   Tue Nov 18 13:22:10 2014 -0800

    Add copyright, ensure all exports are SFlow- prefixed

commit 35f76d16d9afcf180032639ea95daf2fe846d536
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 11 16:43:59 2014 -0700

    Building PCAP in POSIX, non-glibc environments.
    
    Fixed timestamp types for PCAP when using different libc than glibc.

commit 8436f96501e89657b03f45057c3b947e5f27b146
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 11 16:42:10 2014 -0700

    Simple fix to docs.

commit 736b73650b61bfdbf957501cecb73775327f0952
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 11 16:38:19 2014 -0700

    Protect against infinite DNS recursion with limit.
    
    Uses a simple max recursion limit to make badly formed DNS packets not recurse
    infinitely.  This should put a hard upper bound on memory use for a single
    DNS packet decode.

commit 2aca84865618a672bc53f625b66137207787dd86
Merge: f082f82 1ab0474
Author: Damjan Cvetko <damjan.cvetko@gmail.com>
Date:   Wed Oct 29 09:38:37 2014 +0100

    Merge branch 'master' into damjan

commit 007e8f4b18999de5ec3178870f3efcf626f9fb3e
Author: Bill Green <bgreen@newrelic.com>
Date:   Fri Oct 24 09:58:57 2014 -0700

    Add SFlow layer

commit 1ab047412b5b30c7585364ff0928a56d560e1161
Author: Damjan Cvetko <damjan.cvetko@gmail.com>
Date:   Thu Oct 23 23:55:11 2014 +0200

    Added support for reading nanosecond and microsecond pcap files.
    Renamed const in pcapgo writer, because we are writing microsecond format not nanosecond format.

commit f082f8277fb7d43caea5a997f615a33bf65fa102
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 17 09:25:22 2014 -0600

    Add Alexandre to authors page, for patch on SetBPFFilter.

commit 2749d42cd16aca6897dfa7d89062536423a45b44
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 16 10:15:12 2014 -0600

    Ignore lookupnet failures with SetBPFFilter.

commit f42650273f6753206e08b1e94e94e8c88c3621db
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 16 10:07:50 2014 -0600

    Add LinuxSLL support to gopacket, thanks to kanobe.

commit 4f6ae80c80ffc57dc789281689348c472d4a5aeb
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 16 09:52:29 2014 -0600

    Fix httpassembly example code, and don't lookupnet for pcap files.

commit f07ff52cfb0469e481af458b749abe138a30c28f
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 16 09:45:34 2014 -0600

    Add DNS pcap.

commit bf7427225139b1c1a672cdfc056ba9acd78ffe8d
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 16 09:43:11 2014 -0600

    Hopefully fix Issue 40, bad DNS decoding.
    
    Fix the case where we get a 0x00 as the first byte after a function call, which
    before requested the slice buffer[len(buffer)+1:], which always fails.
    
    Also, add option to packet decoding to not supress panics, useful for testing.

commit a6efa31399883e135f11670c6dbf5ab34dac2fb3
Merge: 5907fe9 a566815
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Oct 14 09:03:45 2014 -0600

    Merge branch 'dev' of https://code.google.com/p/gopacket into dev

commit 5907fe9da49a819a61c60222b27ffcb3d16ccbd0
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Oct 14 09:02:00 2014 -0600

    Fix port endpoint.

commit ff9b60d1b87a2b9687f41132964c839c5b85be72
Author: Damjan Cvetko <damjan.cvetko@gmail.com>
Date:   Fri Oct 3 11:18:55 2014 +0200

    We are actually dealing with a microseconds! Nanoseconds header would be a1b23c4d

commit a5668158be6937151afef7a20a8b327cd4d4f8b1
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Sep 30 11:13:41 2014 -0600

    Add more fields to PFLog.

commit d1585c7ede45a563a0cff18afc9925c8c023ab28
Author: Damjan Cvetko <damjan.cvetko@gmail.com>
Date:   Thu Sep 18 14:23:08 2014 +0200

    Imported native go pcap file reader.

commit 1726603e953c7c67318b29a53fc31520d799aa17
Merge: f4f9872 d31ff1a
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Sep 9 10:16:45 2014 -0600

    Merge branch 'remco' into dev
    
    Conflicts:
            examples/httpassembly/main.go
            layers/iana_ports.go
            layers/layertypes.go
            macs/valid_mac_prefixes.go

commit f4f98723ecd2bbca5e31085e4b6b7e3751721100
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Sep 9 09:57:15 2014 -0600

    Update ports/macs.

commit d31ff1a8d61f4a48c8318ee83599f9de712ac972
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Sep 9 09:54:21 2014 -0600

    Fix up USB implementation a little.

commit cc4ce30a3c3bc9123dd7afca587642a563b8faac
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Aug 28 14:51:53 2014 -0600

    Write functionality for AF_PACKET.

commit ab73bee69c1f6de4a46929720b27c263d24cf172
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Aug 15 14:15:12 2014 -0600

    Add CPU profiling to all examples.

commit d5007b02aabc80b3a4373ca88f7a17903661e54a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Aug 15 10:33:53 2014 -0600

    Add support for numerous libpcap extras.
    
    Adds support for:
     * pcap_setdirection
     * pcap_set_buffer_size
     * pcap_set_immediate_mode
    
    Many thanks to Matthias Radestock for working on this.

commit 158c4d7aed08c67b6aedff68b32c4994a273b292
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Aug 13 17:35:38 2014 -0600

    BENCH Optimize DNS decoding, especially DecodeFromBytes.
    
    This change optimizes DNS decoding by drastically reducing the number of mallocs
    that occur during a DecodeFromBytes call.  We accomplish this in two ways:
    
    1) We create a single []byte buffer inside the DNS struct, and we (re)use that
       buffer for all name decoding.  This means we don't have to create new, tiny
       byte slices every time we decode a name.  In fact, the initial code had the
       potential to malloc many slices per name decode, since recursive calls
       (following DNS pointers) each created a new slice.
    2) We create some cludgy code in DecodeFromBytes (see comment) so Go doesn't
       (erroneously) think that all DNSResourceRecords we append to our Questions,
       Answers, Authorities, and Additionals slices escape from the stack.  I'm
       still at a loss as to why the compiler thinks these escape, but before this
       change each new resource record was causing a malloc.
    
    Hopefully the benchmarks will bear witness to the fact that these optimizations
    are somewhat worthwhile.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.3 linux/amd64
    
    TEST BENCHMARKS "DNS"
    PASS
    ok      code.google.com/p/gopacket      0.022s
    PASS
    BenchmarkDecodeDNS       1000000              2462 ns/op
    BenchmarkDecodeDNSLayer  1000000              1177 ns/op
    ok      code.google.com/p/gopacket/layers       4.045s
    
    PCAP BENCHMARK
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 8d302f8cdc264fd5255739371a5809440ec586ec
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    ok      code.google.com/p/gopacket      0.022s
    PASS
    BenchmarkDecodeDNS       1000000              2207 ns/op
    BenchmarkDecodeDNSLayer   500000              7916 ns/op
    ok      code.google.com/p/gopacket/layers       6.563s
    
    OLD PCAP BENCHMARK

commit 8d302f8cdc264fd5255739371a5809440ec586ec
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Aug 13 17:23:13 2014 -0600

    BENCH Modify 'gc' to benchmark only certain benchmarks.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.3 linux/amd64
    
    TEST BENCHMARKS
    PASS
    ok      code.google.com/p/gopacket      0.022s
    PASS
    BenchmarkDecodeDNSLayer   500000              9286 ns/op
    ok      code.google.com/p/gopacket/layers       5.029s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 899.51582ms, 727ns per packet
    Time to read packet data into memory from file: 899.547185ms
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 39.87084879s, 32.228us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 39.469398093s, 31.904us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 40.523542578s, 32.756us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 37.433433863s, 30.258us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 36.23631234s, 29.29us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 359.72403ms, decoded 4291186 layers, assembled 0 packets: 290ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 360.450113ms, decoded 4291186 layers, assembled 0 packets: 291ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 336.621569ms, decoded 4291186 layers, assembled 0 packets: 272ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 310.354763ms, decoded 4291186 layers, assembled 0 packets: 250ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 305.013878ms, decoded 4291186 layers, assembled 0 packets: 246ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 551.152325ms, decoded 4291186 layers, assembled 1153247 packets: 445ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 549.249262ms, decoded 4291186 layers, assembled 1153247 packets: 443ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 549.89987ms, decoded 4291186 layers, assembled 1153247 packets: 444ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 550.528169ms, decoded 4291186 layers, assembled 1153247 packets: 445ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 554.109608ms, decoded 4291186 layers, assembled 1153247 packets: 447ns per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 6b5cf45d642f631d1106785f8e2bd436aaa90369
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    ok      code.google.com/p/gopacket      0.022s
    PASS
    ok      code.google.com/p/gopacket/layers       0.191s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 926.893834ms, 749ns per packet
    Time to read packet data into memory from file: 926.924567ms
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 1.524571448s, 1.232us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 1.399014038s, 1.13us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 1.405103484s, 1.135us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 1.413209428s, 1.142us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 1.406938093s, 1.137us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 299.564193ms, decoded 4330909 layers, assembled 0 packets: 242ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 297.315919ms, decoded 4330909 layers, assembled 0 packets: 240ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 297.731409ms, decoded 4330909 layers, assembled 0 packets: 240ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 300.792804ms, decoded 4330909 layers, assembled 0 packets: 243ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 303.518127ms, decoded 4330909 layers, assembled 0 packets: 245ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 565.246587ms, decoded 4330909 layers, assembled 1153247 packets: 456ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 559.53868ms, decoded 4330909 layers, assembled 1153247 packets: 452ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 570.483938ms, decoded 4330909 layers, assembled 1153247 packets: 461ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 561.29138ms, decoded 4330909 layers, assembled 1153247 packets: 453ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 549.491029ms, decoded 4330909 layers, assembled 1153247 packets: 444ns per packet

commit 2e2df1d81219170c73250281150dd11a9e7b90af
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Aug 13 17:18:52 2014 -0600

    Add a benchmark for DNS decoding with DecodeFromBytes.

commit 40224af0781c3f56273b096666e006e7056d551d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Aug 11 13:05:50 2014 -0600

    Update MACs and ports.

commit 907290d7ac6de9904d51567c8a210aeab71001df
Merge: 24a4c80 058c73a
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sat Aug 9 00:11:02 2014 -0600

    Merge branch 'laurent'
    
    Conflicts:
            AUTHORS
            layers/layertypes.go

commit 058c73a0e5af730dfe4b5ce69a190f08d76eea85
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Aug 8 13:44:26 2014 -0600

    Quick bugfix and set truncated in DNS.

commit dc50225563df03d122b59e1294bbece904d439e7
Author: Remco <remco@dutchcoders.io>
Date:   Thu Aug 7 17:24:47 2014 +0200

    applied feedback

commit 9d6d173aa320edc5d55ef1782621011b3425997c
Author: Remco <remco@dutchcoders.io>
Date:   Thu Aug 7 17:10:03 2014 +0200

    added pcap dump support

commit 24a4c807a8ed558e5108fae2ecb584f72e238abe
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Aug 7 08:47:53 2014 -0600

    Add another contributor.

commit b7f6fab1f7f56578407345ee0862d3cb14cd750b
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Aug 6 17:10:17 2014 -0600

    Optimize packet writing by removing a copy.

commit 4c8bc2bcc000efdceb0936620873423d31f133a3
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Aug 6 11:03:48 2014 -0600

    Hopefully iron out time values for linux/mac/windows.

commit ae0b5b9cb15b90d88cd05addc2a1288c361c69a5
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Aug 5 12:58:16 2014 -0600

    Slight refactoring of DNS decoding.
    
    This refactoring does two things:
    1) Embeds DNS header data into the DNS struct, instead of making it an internal
    struct, since it's guaranteed to be around for all DNS packets.
    2) Switches all strings to []bytes.
    
    The first is pretty simple and I'm not too opinionated about it either way.  The
    second, though, I think is really important.
    
    My main concern is that currently DNS decoding requires much memory allocation,
    especially when decoding DNS names.  There's slices created and appended to, and
    there's also strings created from those slices.  Any of these could require an
    allocation, and a large number of allocations can really bog down fast packet
    decoding.
    
    Note that the switch from strings to byte slices does away with only a small
    number of allocations ([]byte->string).  However, I'm convinced that it will
    also future-proof us and allow us to eventually move towards a
    minimal-allocation model, where a DNS packet can store (and reuse on subsequent
    calls) a []byte buffer.  Having strings at all means we zero-allocation is
    impossible.  Having []byte values means it's hard but do-able.

commit e6b5b3373263a6d3e18506c02e984940337b4ddf
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Aug 5 11:22:46 2014 -0600

    Issue 30:  Add support for offline BPF filtering.

commit 70d41c6c64d8366c7f917149769f6bf612e9eff7
Author: Remco <remco@dutchcoders.io>
Date:   Tue Aug 5 18:26:29 2014 +0200

    fixed whitespace issues

commit 26e1101a278084b178ae32c3981b9220919edd18
Merge: 8d5019f d98b6fb
Author: Remco <remco@dutchcoders.io>
Date:   Tue Aug 5 18:17:28 2014 +0200

    Merge branch 'remco.implement-usb-layer' into remco

commit 8d5019f7093602e4c8ac510a4d0eb1d9c0c8f02b
Merge: 58dc020 e790a23
Author: Remco <remco@dutchcoders.io>
Date:   Tue Aug 5 18:17:16 2014 +0200

    merge

commit d98b6fba57f0034dc217902a1dfdceaba4e7d3f6
Author: Remco <remco@dutchcoders.io>
Date:   Tue Aug 5 18:13:52 2014 +0200

    initial

commit 3384f43f003356f559f201b14775a27919c571e1
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jul 29 13:57:11 2014 -0600

    Handle rfmon in winpcap, which apparently doesn't have it.

commit 58dc0200adf1b1194f53a9c6779654bbe84df009
Author: Remco <remco@dutchcoders.io>
Date:   Tue Jul 29 16:09:33 2014 +0200

    fix(ipv4): More fragments flags was incorrectly reported as Evil (flags
    were reverded)
    
    The flags are in order, from high order to low order:
    * bit 0: Reserved; must be zero.
    * bit 1: Don't Fragment (DF)
    * bit 2: More Fragments (MF)
    
    Also added some more commenting to the Evil flag.

commit 1b07f2eba5b5234abbe1484039a58c08e2af92cb
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 22:20:21 2014 +0200

    fixed some bugs with previous commit

commit f65cd9963a47e59bb674796e4da2b56fb845853e
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 20:18:30 2014 +0200

    feature(pcap): list datalinks supported for interface

commit 7c2719417f79b88e6f15c34ada04812361bd97e3
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 16:11:49 2014 +0200

    fix: removed todo, get netmask with pcap_lookupnet

commit e790a23b58a6487bf82f04b032ae8fe2a97ecc2d
Author: Remco <remco@dutchcoders.io>
Date:   Tue Jul 29 16:09:33 2014 +0200

    fix(ipv4): More fragments flags was incorrectly reported as Evil (flags
    were reverded)
    
    The flags are in order, from high order to low order:
    * bit 0: Reserved; must be zero.
    * bit 1: Don't Fragment (DF)
    * bit 2: More Fragments (MF)
    
    Also added some more commenting to the Evil flag.

commit 0ee250794a7e7c6c9f0ea11d12ed84464c6a5815
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 22:20:21 2014 +0200

    fixed some bugs with previous commit

commit dcba4e9a9de74f016d91fe584c35018aee14891a
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 20:18:30 2014 +0200

    feature(pcap): list datalinks supported for interface

commit a7c3800045de6b7d548121c8f860aca38b4c255f
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 11:19:21 2014 -0600

    Add serialization for IPv6Destination header.

commit 70a01e43be3dd83e624033d0e863d67e776c5cbd
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 11:00:41 2014 -0600

    Regenerate new ports/MACs.

commit 864ab240da83f4197c4517267b1bcccd306c9938
Merge: 4229291 0d96cd6
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 10:57:24 2014 -0600

    Merge branch 'master' of https://code.google.com/p/gopacket

commit 42292914602c97d8cfdf766539c2d6726b9a0bb2
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 10:49:34 2014 -0600

    Fix fragmentation handling for IPv4/IPv6.
    
    First off, IPv4 fragmentation flags were in the wrong order (now fixed).
    
    More importantly, our original code would incorrectly attempt to decode all
    parts of a fragmented layer (a UDP packet, for example) as the top-level header
    (IE: all fragments were decoded as the start of the UDP packet).  To get around
    this, I've introduced a top-level layer called "Fragment", and any layer that
    contains an incomplete fragment of another is returned as LayerTypeFragment.
    It's now up to the caller to reassemble that data and manually decode it.

commit 99300944289c06ac9e8134adbed923d56f2699b3
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 10:19:35 2014 -0600

    Connect up IPv6Destination in layers/enums.go.
    
    Code provided by Hiroaki Kawai in Issue 27.

commit c063f13c7093899721d228b5e434a2f7ebb43122
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 10:14:11 2014 -0600

    Use standard library crc32 checksumming.

commit 37a6d79bc293a3395496da82c684ad7f69eda172
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 09:42:44 2014 -0600

    Add tests for SCTP serialization.
    
    Note:  I had to add 0x00 padding to some of the packets that were less than
    Ethernet's minimum 60 bytes, to make the serialization match.

commit 32d69de6f28cf82a0ec8cf7bd446e492d0052f52
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 09:30:14 2014 -0600

    Initial SCTP serialization support.
    
    Code here submitted as a patch by Hiroaki Kawai in Issue 26.

commit 24c1fe2e889217eda6b6b2e433c9cf99cf778e1d
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 28 09:25:49 2014 -0600

    Fix MPLS decoding to work with multi-layer MPLS stacks.

commit 104450ec160b31b4d544b3bd59303f59fc7a3104
Merge: fb2db91 70a9543
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 16:12:28 2014 +0200

    Merge branch 'remco' of https://code.google.com/p/gopacket into remco

commit fb2db9122c0aa8967a777d7c0ea6c1e1506e8e0a
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jul 28 16:11:49 2014 +0200

    fix: removed todo, get netmask with pcap_lookupnet

commit 0d96cd656af1be84afb0097dfdc3d38c0d559b33
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Jul 11 10:13:26 2014 -0600

    Switch methods for Payload to not take pointer receivers unless
    necessary.

commit 35b977f7f6f9c3f88b051f8d71949c63d8c9b45a
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu Jul 10 08:48:58 2014 -0600

    Added vittus to authors.
    
    He's the one who suggested code for pcap rfmon stuff.

commit 70a9543b8f192951452e66a9806bb295b7658c4c
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 7 11:20:42 2014 -0600

    Add ability to set_rfmon on PCAP handles.

commit 4aac6fa5338495ffac449b27b0d8e4886a47b3dd
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 7 09:06:50 2014 -0600

    Have PacketSource.Packets always return the same channel.

commit 58ac84a7e3189dcaeb438999083e1532db05f723
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 7 08:58:45 2014 -0600

    Fix Issue 23 : Dot1Q Priority encode/decode.

commit 39870ca7398ebc83b55c04c2a5a4578ba8b5ea94
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jul 1 13:26:57 2014 -0600

    Add example code for bidirectional TCP streams.
    
    Also a minor change to packet string output.

commit 679b12ca0aa44896666432e4123dc50342f9dc21
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jul 1 10:38:54 2014 -0600

    Fix FindAllDevs to return IP if netmask fails.

commit d9c9a8fbf230518bd4269a10834ff700c0016b61
Author: Laurent Hausermann <l@hausermann.org>
Date:   Tue Jul 1 16:02:37 2014 +0200

    Switch Copyright to Google Inc.

commit 6f9bc93cfd4364c6a2ee07965e06ab2d4caaa580
Author: Laurent Hausermann <l@hausermann.org>
Date:   Tue Jul 1 15:56:27 2014 +0200

    Add myself to AUTHORS file. Thanks Graeme !

commit ecc465660685d22f4af37e06e7d6e265049b65ff
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sat Jun 28 09:45:02 2014 -0600

    Fix FindAllDevs, Issue 22.

commit cbcdda4fbe81a068de9f1230d63d9a70e07f3afc
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 26 10:15:21 2014 -0600

    Make arpscan run forever and handle goroutines better.

commit 724ba5139a6c4c7e115844941d5db279320bc08a
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 26 10:01:35 2014 -0600

    Fix ips() iterator to use a slice.

commit a3a121d10b80daec124b134718311288bbe23ecb
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 26 09:53:07 2014 -0600

    Add comment to arpscan mentioning that it's a horrible example of goroutines.

commit 6b5cf45d642f631d1106785f8e2bd436aaa90369
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 25 15:20:08 2014 -0600

    BENCH Update ports/macs.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.3 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.81 ns/op
    BenchmarkMapLookup      500000000                3.95 ns/op
    BenchmarkNilMapLookup   500000000                3.20 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.81 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               1.08 ns/op
    BenchmarkTypeToInterface2       2000000000               0.54 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.28 ns/op
    BenchmarkLockOSThread   500000000                4.20 ns/op
    BenchmarkUnlockOSThread 500000000                4.84 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.63 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                43.1 ns/op
    BenchmarkUnbufferedChannel      10000000               254 ns/op
    BenchmarkSmallBufferedChannel    5000000               303 ns/op
    BenchmarkLargeBufferedChannel    5000000               302 ns/op
    BenchmarkEndpointFastHashShort  200000000                9.02 ns/op
    BenchmarkEndpointFastHashLong   100000000               27.9 ns/op
    BenchmarkFlowFastHashShort      100000000               15.5 ns/op
    BenchmarkFlowFastHashLong       50000000                52.5 ns/op
    ok      code.google.com/p/gopacket      40.812s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.25 ns/op
    BenchmarkLayerClassMapContains  500000000                4.09 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               842 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1305 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2057 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2255 ns/op
    BenchmarkDefault         1000000              2727 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               198 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               210 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               525 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               539 ns/op
    BenchmarkLazy    1000000              1153 ns/op
    BenchmarkNoCopy  1000000              2083 ns/op
    BenchmarkLazyNoCopy      5000000               482 ns/op
    BenchmarkKnownStack     20000000               139 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               205 ns/op
    BenchmarkDecodingLayerParserHandlePanic 10000000               245 ns/op
    BenchmarkAlloc  100000000               24.5 ns/op
    BenchmarkFlow   50000000                33.1 ns/op
    BenchmarkEndpoints      100000000               21.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                40.9 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.03 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.14 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.87 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               11.4 ns/op
    BenchmarkFmtVerboseString          50000             71803 ns/op
    BenchmarkPacketString      50000             61967 ns/op
    BenchmarkPacketDumpString          50000             61787 ns/op
    BenchmarkDecodeICMP      1000000              1661 ns/op
    BenchmarkDecodeICMP6     1000000              1899 ns/op
    BenchmarkDecodeMPLS      1000000              1845 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2353 ns/op
    BenchmarkDecodePacketDot11CtrlCTS        1000000              1245 ns/op
    BenchmarkDecodePacketDot11MgmtBeacon     1000000              1578 ns/op
    BenchmarkDecodePacketDot11DataQOSData    1000000              3134 ns/op
    BenchmarkDecodePacketDot11MgmtAction     1000000              1550 ns/op
    BenchmarkDecodePacketDot11CtrlAck        1000000              1262 ns/op
    BenchmarkDecodePacketDot11DataARP        1000000              2515 ns/op
    BenchmarkDecodePacketDot11DataIP         1000000              3367 ns/op
    BenchmarkDecodePacketP6196       1000000              1609 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1472 ns/op
    ok      code.google.com/p/gopacket/layers       101.591s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 900.83028ms, 728ns per packet
    Time to read packet data into memory from file: 900.855383ms
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 1.75230302s, 1.416us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 1.649278462s, 1.333us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 2.01798188s, 1.631us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 1.636554324s, 1.322us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 1.66225894s, 1.343us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 349.802063ms, decoded 4330909 layers, assembled 0 packets: 282ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 349.78844ms, decoded 4330909 layers, assembled 0 packets: 282ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 350.033489ms, decoded 4330909 layers, assembled 0 packets: 282ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 350.117178ms, decoded 4330909 layers, assembled 0 packets: 283ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 349.910114ms, decoded 4330909 layers, assembled 0 packets: 282ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 643.945511ms, decoded 4330909 layers, assembled 1153247 packets: 520ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 648.112965ms, decoded 4330909 layers, assembled 1153247 packets: 523ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 643.102959ms, decoded 4330909 layers, assembled 1153247 packets: 519ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 647.405443ms, decoded 4330909 layers, assembled 1153247 packets: 523ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 643.113587ms, decoded 4330909 layers, assembled 1153247 packets: 519ns per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT e4ba99ebf55394c2e8401eeb5564463e65defe09
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                4.11 ns/op
    BenchmarkMapLookup      500000000                4.08 ns/op
    BenchmarkNilMapLookup   500000000                3.22 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.81 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               1.08 ns/op
    BenchmarkTypeToInterface2       2000000000               0.54 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.29 ns/op
    BenchmarkLockOSThread   500000000                4.05 ns/op
    BenchmarkUnlockOSThread 500000000                4.56 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.39 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                41.6 ns/op
    BenchmarkUnbufferedChannel      10000000               247 ns/op
    BenchmarkSmallBufferedChannel   10000000               297 ns/op
    BenchmarkLargeBufferedChannel    5000000               299 ns/op
    BenchmarkEndpointFastHashShort  200000000                8.85 ns/op
    BenchmarkEndpointFastHashLong   100000000               27.4 ns/op
    BenchmarkFlowFastHashShort      100000000               15.4 ns/op
    BenchmarkFlowFastHashLong       50000000                54.6 ns/op
    ok      code.google.com/p/gopacket      42.078s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.14 ns/op
    BenchmarkLayerClassMapContains  500000000                4.03 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               918 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1441 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2155 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2360 ns/op
    BenchmarkDefault         1000000              2804 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               203 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               224 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               542 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               524 ns/op
    BenchmarkLazy    1000000              1156 ns/op
    BenchmarkNoCopy  1000000              2166 ns/op
    BenchmarkLazyNoCopy      5000000               479 ns/op
    BenchmarkKnownStack     20000000               138 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               208 ns/op
    BenchmarkDecodingLayerParserHandlePanic 10000000               253 ns/op
    BenchmarkAlloc  100000000               25.2 ns/op
    BenchmarkFlow   50000000                38.0 ns/op
    BenchmarkEndpoints      100000000               21.5 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.1 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                40.4 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.96 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.25 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.96 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.9 ns/op
    BenchmarkFmtVerboseString          50000             71313 ns/op
    BenchmarkPacketString      50000             60784 ns/op
    BenchmarkPacketDumpString          50000             60979 ns/op
    BenchmarkDecodeICMP      1000000              1624 ns/op
    BenchmarkDecodeICMP6     1000000              1854 ns/op
    BenchmarkDecodeMPLS      1000000              1831 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2340 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1394 ns/op
    ok      code.google.com/p/gopacket/layers       87.062s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 946.79758ms, 765ns per packet
    Time to read packet data into memory from file: 946.835528ms
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 1.715498607s, 1.386us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 1.670698893s, 1.35us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 1.640986722s, 1.326us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 1.62888651s, 1.316us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 1.628940146s, 1.316us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 341.300876ms, decoded 4330909 layers, assembled 0 packets: 275ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 341.290275ms, decoded 4330909 layers, assembled 0 packets: 275ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 341.337149ms, decoded 4330909 layers, assembled 0 packets: 275ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 341.300983ms, decoded 4330909 layers, assembled 0 packets: 275ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 341.235645ms, decoded 4330909 layers, assembled 0 packets: 275ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 636.345696ms, decoded 4330909 layers, assembled 1153247 packets: 514ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 636.20898ms, decoded 4330909 layers, assembled 1153247 packets: 514ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 636.485875ms, decoded 4330909 layers, assembled 1153247 packets: 514ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 637.245984ms, decoded 4330909 layers, assembled 1153247 packets: 515ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 636.384694ms, decoded 4330909 layers, assembled 1153247 packets: 514ns per packet

commit c3aa053a1fc7aa868fa47c9f6d0cdfd5c0f69753
Merge: 9db6a90 3f0c42d
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 25 15:15:18 2014 -0600

    Merge branch 'master' into remco

commit 9db6a905dd2d2c03882d5795ff521498ab926a90
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 25 12:03:41 2014 -0600

    Add comments, make flags easier.
    
    Added a few comments.
    
    Also, make the various dot11 flag sets easier to use by adding functions to
    access their bits.

commit c913c7ef1e390dc2c33a63c40fbf299b0c135543
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 25 11:36:42 2014 -0600

    Random cleanup, comments, etc.
    
    Added comments to a number of exported functions.
    Switched string functions for flag sets to use bytes.Buffer.
    Commented out checksum failure test for dot11_test, since wireshark also says
    this packet is malformed.

commit 3f0c42d5ef26f63c3fe415cc766878aa99860197
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 25 09:43:10 2014 -0600

    Simple doc fixes.

commit 701f019d4459ff673b12a38cafa2701167d00c45
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 23 13:30:23 2014 -0600

    A few minor fixes, some gofmt, and Py style stuff.

commit d24b1212558416cf8c830d09a51accd6fb629096
Merge: d23ebfb 35e689a
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 23 13:25:14 2014 -0600

    Merge branch 'master' into remco

commit 35e689a6f395166300d5c71a1979cc98d09e9981
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 23 09:50:28 2014 -0600

    Fix Issue 15 in PFRing.
    
    Fix issue where we tried to truncate byte slice by the packet length, not the
    captured length.  Since the packet length could be longer than the input buffer,
    this can cause slice out-of-bounds errors whenever we see a packet bigger than
    our snaplen.

commit d23ebfbfc434b2f371699e7d59a30d096de2cde1
Author: Remco <remco@dutchcoders.io>
Date:   Sat Jun 21 12:10:28 2014 +0200

    updated test_creator to accept params, added Dot11WEP layer for encrypted packets, added tests for dot11, fixed some bugs

commit 56f03efc9aea94e80d85e64d58a6c13dcd40c3df
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 20 18:15:18 2014 -0600

    Minor comments/fixes, expose bytediff.
    
    Some minor additions of comments and slight refactorings in the base gopacket
    library.  Also, I've exposed byte differences, used in layers/decode_test, to
    the outside world at gopacket/bytediff.  It's a small, simple-to-use library for
    displaying differences between small byte slices (read: packets ;) to humans in
    an understandable way.

commit fc2b7bea9d03085b298f013a13bf1f529c428179
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 17 17:26:58 2014 -0600

    A bunch of stuff to do general cleanup.
    
    The biggest change is modifying how Dot11's type/subtype works (putting them
    both in a single value, making it an enum) and modifying how NextLayerType works
    for Dot11 (use enums.go Dot11TypeMetadata).
    
    Besides that, just a bit of renaming, comment moves, etc.

commit d466e01c20b249c4cbd86a1ad147e3215ca1d6bd
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 17 15:50:47 2014 -0600

    Add comment to PF_RING regarding LDFLAGS options.

commit 72bede5bff3ebb7e170667d87dbae133f1e478b6
Author: Remco <remco@dutchcoders.io>
Date:   Tue Jun 17 23:28:28 2014 +0200

    implemented changes regarding review

commit b61df41746d376a2f60ab1ba307e00da39241ec8
Author: Remco <remco@dutchcoders.io>
Date:   Tue Jun 17 18:08:47 2014 +0200

    cleanup dot11 code

commit e85012adc2d9dfa265325e9a7e11b44d65966130
Author: Remco <remco@dutchcoders.io>
Date:   Tue Jun 17 16:43:19 2014 +0200

    code cleanup

commit 3a350a0800f1b164b64b3f5e76636a36e25a1754
Author: Remco <remco@dutchcoders.io>
Date:   Mon Jun 16 23:28:44 2014 +0200

    added 802.11 layer, added radiotap layer. initial

commit bb9c00953419f97d75a82dab758d7c6364ed30ba
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 16 13:02:57 2014 -0600

    Adding Remco to authors file.

commit fffe2456bd6b22f27da51b6aea94bbaeaf42f63d
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Jun 16 10:55:51 2014 -0600

    Fix numerous small issues.
    
    Issue 12:  pfring documentation
    Issue 13:  winsock constants override enum.go
    Issue 14:  PCAP_NETMASK_UNKNOWN not in all versions of pcap

commit cebeb7b366261e236f95ae603da9efa956601580
Author: Laurent Hausermann <l@hausermann.org>
Date:   Wed Jun 4 09:08:02 2014 +0200

    Add a function to print as a string DNSResponseCode
    Remove TODO in source code
    Update an error to specify the right RFC

commit a168f98578c708d9775a98b87c7c5a32573e4ca0
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri May 30 17:05:14 2014 -0600

    Mostly style changes.
    
    A bunch of great code, this commit is mostly style changes and personal
    preferences found while reviewing it.  Here's some higher-level things
    that were done:
    
    1) prefering enums to simple types ('type Foo uint8' as opposed to
       a bare uint8).
    2) Some renaming (DNSRR -> DNSResourceRecord) for those of us that don't
       see DNS packets EVERY day, just some days ;)
    3) Some very simple style stuff:
       - using 'i' in for loops
       - returning errors as the last return value from functions
       - using 'if x := Y(); sometest(x) {' for simplicity
       - removing newlines in switch statements and start of blocks
    4) A few functionality differences:
       - removed pcap file writing, since we've already got that implemented
         in pure go in pcapgo.
       - modified DNS name construction (hopping around the packet pulling
         data from various offsets) to use []byte instead of string, to do
         less memory allocation.

commit a70a870aa683322e4a68ee8e15697c234143589e
Merge: 2c5b054 6b93cca
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri May 30 12:59:24 2014 -0600

    Merge branch 'laurent' of https://code.google.com/p/gopacket into laurent
    
    Conflicts:
            layers/layertypes.go

commit 2c5b0540bd5e51f52d21515ac2f0da722b380c64
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri May 30 00:13:27 2014 -0600

    Fix stupid english mistakes.
    
    For some reason I totally forgot that Unactivated isn't a word... it's
    "Inactive".  Sigh.  Fixed.

commit 01c3d077bd9a98fac6954a18089ad30795d1d230
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu May 29 23:13:36 2014 -0600

    Modify how timeouts and BlockForever work in pcap.
    
    This commit changes the way BlockForever works in pcap, but does so in a
    way that should:
    1) not break any current users
    2) not change any current behavior, except for BlockForever
    3) do what users expect, for BlockForever.
    
    On Macs, BlockForever was doing just that... it was waiting to fill a
    buffer with packets before returning any of them.  In low-traffic
    situations, this meant that packets were being returned to users way
    after they were seen.
    
    To combat this, we've implemented BlockForever to loop internally
    waiting for packets, ignoring timeout errors but treating successful
    reads and other errors normally.  User-defined timeouts are treated just
    as libpcap treats them, but users may pass negative durations in as
    timeouts to use BlockForever's logic with their own chosen durations.

commit c9be950d1eb93ba5422d713c4dc0064bed2fb0f0
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu May 29 12:41:33 2014 -0600

    Update documentation on Unactivated pcap type.

commit c05ae030104a8d789a11bd686b4e1d1c08468f65
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Thu May 29 12:28:31 2014 -0600

    Add Unactivated to pcap.
    
    PCAP code has for the past few commits had a bunch of extra complexity
    (and bugs) added because it needs to keep track of handle activation,
    due to the fact that timestamp sources must be set before activation,
    but BPF filters must be set afterwards, etc.
    
    This has caused a number of bugs, including:
    1) OpenOffline forgot to activate.
    2) LinkType wasn't set correctly if handle wasn't activated
    
    To get around this and force the API to always do the right thing, I've
    created the "Unactivated" type in pcap.go, which acts like a handle
    builder... Create creates a new one, then calling Activate on it returns
    an (activated) Handle.  Among other things, this drastically simplifies
    OpenLive, which no longer has to approximate the behavior of
    pcap_open_live and hope for the best.

commit b9de228a3c8f7ccf5f2982e6fb8ca777ee816e8b
Author: Graeme Connell <gconnell@google.com>
Date:   Mon May 19 16:57:10 2014 -0600

    PF Log format added.

commit 6b93cca819e498cb8f019d1b3b74a231aad0e499
Author: Laurent Hausermann <l@hausermann.org>
Date:   Fri May 16 17:28:24 2014 +0200

    Typo: fix want/got inversion

commit 4afdabd93aba54bf3a2b86f1188da220102d8790
Author: Laurent Hausermann <l@hausermann.org>
Date:   Fri May 16 16:08:05 2014 +0200

    Add a DNS layer
    
    This dissector is able to parse and decode, DNS Queries or Answers, and
    dissect most of the DNS RR fields (MX, SOA, A, AAA, etc.)

commit 3a8faeb2aa85a0ca60ba62d1c0f6df2797e9e5d5
Author: Laurent Hausermann <l@hausermann.org>
Date:   Fri May 16 16:04:27 2014 +0200

    Add a wrapper around pcap_dump_open, pcap_dump_close, pcap_dump

commit 15b0bc8dfedb708dfbd751817cefe7e245f96641
Author: Laurent Hausermann <l@hausermann.org>
Date:   Fri May 16 16:00:44 2014 +0200

    Add EthernetBroadcast const

commit c6c8002a41b4b488f4751ac2001c8b2ca7d5e27e
Author: Laurent Hausermann <l@hausermann.org>
Date:   Fri May 16 15:59:10 2014 +0200

    Update .gitignore with current directory layout (remove old binaries,
    add new examples directory)

commit 27f687237cc0529ac621309ce411beee5337d7ab
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 1 14:13:24 2014 -0600

    Fix for winpcap, which is missing a function.

commit 82fa3abea2b409943ba03fc6f58ef995324376e6
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Apr 29 10:48:39 2014 -0600

    Add PCAP tests which require root priviledges.

commit e4ba99ebf55394c2e8401eeb5564463e65defe09
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sat Apr 26 21:13:10 2014 -0600

    BENCH Capture pcap_activate errors, regen ports/prefixes.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.2 darwin/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.90 ns/op
    BenchmarkMapLookup      500000000                3.86 ns/op
    BenchmarkNilMapLookup   500000000                3.59 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.89 ns/op
    BenchmarkArrayLookup    2000000000               0.60 ns/op
    BenchmarkTypeToInterface1       2000000000               0.90 ns/op
    BenchmarkTypeToInterface2       2000000000               0.60 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.30 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.30 ns/op
    BenchmarkLockOSThread   500000000                4.55 ns/op
    BenchmarkUnlockOSThread 500000000                5.05 ns/op
    BenchmarkLockUnlockOSThread     100000000               10.4 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                76.4 ns/op
    BenchmarkUnbufferedChannel      10000000               278 ns/op
    BenchmarkSmallBufferedChannel    5000000               335 ns/op
    BenchmarkLargeBufferedChannel    5000000               331 ns/op
    BenchmarkEndpointFastHashShort  100000000               16.2 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.0 ns/op
    BenchmarkFlowFastHashShort      100000000               21.7 ns/op
    BenchmarkFlowFastHashLong       50000000                57.4 ns/op
    ok      code.google.com/p/gopacket      38.404s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.20 ns/op
    BenchmarkLayerClassMapContains  500000000                4.00 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               933 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1461 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2281 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2513 ns/op
    BenchmarkDefault         1000000              2840 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               252 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               258 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               576 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               584 ns/op
    BenchmarkLazy    1000000              1117 ns/op
    BenchmarkNoCopy  1000000              2151 ns/op
    BenchmarkLazyNoCopy      5000000               476 ns/op
    BenchmarkKnownStack     10000000               181 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               252 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               332 ns/op
    BenchmarkAlloc  50000000                35.7 ns/op
    BenchmarkFlow   50000000                43.0 ns/op
    BenchmarkEndpoints      50000000                55.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               12.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                50.7 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.17 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.19 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.70 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.8 ns/op
    BenchmarkFmtVerboseString          10000            191740 ns/op
    BenchmarkPacketString      50000             61088 ns/op
    BenchmarkPacketDumpString          50000             61121 ns/op
    BenchmarkDecodeICMP      1000000              1727 ns/op
    BenchmarkDecodeICMP6     1000000              1945 ns/op
    BenchmarkDecodeMPLS      1000000              1895 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2385 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1480 ns/op
    ok      code.google.com/p/gopacket/layers       84.545s
    
    PCAP BENCHMARK
    Local pcap file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.165674079s, 942ns per packet
    Time to read packet data into memory from file: 1.16570573s
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 1.782413711s, 1.44us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 1.57956433s, 1.276us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 1.624183055s, 1.312us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 1.658876275s, 1.34us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 1.646003362s, 1.33us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 397.893264ms, decoded 4330909 layers, assembled 0 packets: 321ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 399.336627ms, decoded 4330909 layers, assembled 0 packets: 322ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 402.378176ms, decoded 4330909 layers, assembled 0 packets: 325ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 398.963177ms, decoded 4330909 layers, assembled 0 packets: 322ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 399.818023ms, decoded 4330909 layers, assembled 0 packets: 323ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 716.477067ms, decoded 4330909 layers, assembled 1153247 packets: 579ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 713.966645ms, decoded 4330909 layers, assembled 1153247 packets: 577ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 714.703714ms, decoded 4330909 layers, assembled 1153247 packets: 577ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 717.088317ms, decoded 4330909 layers, assembled 1153247 packets: 579ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 713.728779ms, decoded 4330909 layers, assembled 1153247 packets: 576ns per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT bbaeda7e98b6fcbb5d49eee8ad941023b6a6e178
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.91 ns/op
    BenchmarkMapLookup      500000000                3.82 ns/op
    BenchmarkNilMapLookup   500000000                3.56 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.89 ns/op
    BenchmarkArrayLookup    2000000000               0.59 ns/op
    BenchmarkTypeToInterface1       2000000000               0.89 ns/op
    BenchmarkTypeToInterface2       2000000000               0.59 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.30 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.30 ns/op
    BenchmarkLockOSThread   500000000                4.51 ns/op
    BenchmarkUnlockOSThread 500000000                5.04 ns/op
    BenchmarkLockUnlockOSThread     100000000               10.4 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                76.1 ns/op
    BenchmarkUnbufferedChannel      10000000               289 ns/op
    BenchmarkSmallBufferedChannel    5000000               329 ns/op
    BenchmarkLargeBufferedChannel    5000000               331 ns/op
    BenchmarkEndpointFastHashShort  100000000               16.7 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.1 ns/op
    BenchmarkFlowFastHashShort      100000000               21.6 ns/op
    BenchmarkFlowFastHashLong       50000000                57.0 ns/op
    ok      code.google.com/p/gopacket      38.367s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.19 ns/op
    BenchmarkLayerClassMapContains  500000000                4.04 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               902 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1456 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2269 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2441 ns/op
    BenchmarkDefault         1000000              2773 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               250 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               255 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               571 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               577 ns/op
    BenchmarkLazy    1000000              1122 ns/op
    BenchmarkNoCopy  1000000              2121 ns/op
    BenchmarkLazyNoCopy      5000000               471 ns/op
    BenchmarkKnownStack     10000000               181 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               256 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               337 ns/op
    BenchmarkAlloc  50000000                35.6 ns/op
    BenchmarkFlow   50000000                43.0 ns/op
    BenchmarkEndpoints      50000000                55.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               12.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                40.2 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.22 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.19 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.67 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.8 ns/op
    BenchmarkFmtVerboseString          10000            191703 ns/op
    BenchmarkPacketString      50000             60965 ns/op
    BenchmarkPacketDumpString          50000             60962 ns/op
    BenchmarkDecodeICMP      1000000              1720 ns/op
    BenchmarkDecodeICMP6     1000000              1915 ns/op
    BenchmarkDecodeMPLS      1000000              1889 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2425 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1456 ns/op
    ok      code.google.com/p/gopacket/layers       83.548s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.102306453s, 891ns per packet
    Time to read packet data into memory from file: 1.102352274s
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 1.758718353s, 1.421us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 1.580887575s, 1.277us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 1.618946992s, 1.308us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 1.696694762s, 1.371us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 1.751296183s, 1.415us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 429.062095ms, decoded 4330909 layers, assembled 0 packets: 346ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 428.495618ms, decoded 4330909 layers, assembled 0 packets: 346ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 426.39996ms, decoded 4330909 layers, assembled 0 packets: 344ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 425.744012ms, decoded 4330909 layers, assembled 0 packets: 344ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 427.540916ms, decoded 4330909 layers, assembled 0 packets: 345ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 750.800395ms, decoded 4330909 layers, assembled 1153247 packets: 606ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 745.20974ms, decoded 4330909 layers, assembled 1153247 packets: 602ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 739.565771ms, decoded 4330909 layers, assembled 1153247 packets: 597ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 740.975055ms, decoded 4330909 layers, assembled 1153247 packets: 598ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 764.387062ms, decoded 4330909 layers, assembled 1153247 packets: 617ns per packet

commit 119a90a75eadce87a8298b307cc5d2003cf310e0
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 25 15:03:52 2014 -0600

    Fix writer to use format that older libpcap can read (microsecond
    timestamp) and write test to make sure it works.

commit fb194d02b5b45356352c30ae681d41b91d839b6e
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 25 14:20:40 2014 -0600

    Add race detection, fit printf.

commit cdc393fb06582dc80b8f75736d1ea1d5453f033b
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 25 14:16:31 2014 -0600

    Add tests to pcapgo's PCAP file writer.

commit 3964bfe2735874c72d422b29c9ab25e5ca0c1f8c
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 25 13:54:06 2014 -0600

    Rename pcaputil to pcapgo, so we can expand with other Go-native PCAP
    code.

commit 0f33fad40d4d8cd3da11c2317c24870262d44b68
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Apr 25 13:50:27 2014 -0600

    Add simple PCAP file writing in new pcaputil package.

commit 5eeda521b2fc1f48ed0e20b1d0ecf813f8018fcb
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Mar 30 22:39:52 2014 -0600

    Fix stripEmpty behavior, issue #6.

commit b3c07bdf914dd512a57899ef1c9ff2c37bf2c53f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Sun Mar 30 22:28:15 2014 -0600

    Fix issue #7 and make routing build (but not work) on a Mac

commit 53b8a197e5d943d860d4bec428ede4e0cd829224
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Mar 5 10:03:36 2014 -0700

    Fix BPF setting to activate the pcap filter after activation.

commit bbaeda7e98b6fcbb5d49eee8ad941023b6a6e178
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Feb 14 11:02:49 2014 -0700

    BENCH Add benchmarks for decodinglayerparser and tcpassembler.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.2 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.53 ns/op
    BenchmarkMapLookup      500000000                3.68 ns/op
    BenchmarkNilMapLookup   500000000                3.30 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.55 ns/op
    BenchmarkTypeToInterface1       2000000000               0.85 ns/op
    BenchmarkTypeToInterface2       2000000000               0.54 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.28 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.05 ns/op
    BenchmarkUnlockOSThread 500000000                4.75 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.33 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                58.7 ns/op
    BenchmarkUnbufferedChannel      10000000               253 ns/op
    BenchmarkSmallBufferedChannel    5000000               305 ns/op
    BenchmarkLargeBufferedChannel    5000000               304 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.6 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.7 ns/op
    BenchmarkFlowFastHashShort      100000000               22.7 ns/op
    BenchmarkFlowFastHashLong       50000000                59.8 ns/op
    ok      code.google.com/p/gopacket      39.558s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.18 ns/op
    BenchmarkLayerClassMapContains  500000000                4.01 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               888 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1427 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2209 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2384 ns/op
    BenchmarkDefault         1000000              2763 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               235 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               250 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               575 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               590 ns/op
    BenchmarkLazy    1000000              1132 ns/op
    BenchmarkNoCopy  1000000              2122 ns/op
    BenchmarkLazyNoCopy      5000000               483 ns/op
    BenchmarkKnownStack     10000000               181 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               247 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               321 ns/op
    BenchmarkAlloc  50000000                33.0 ns/op
    BenchmarkFlow   50000000                40.3 ns/op
    BenchmarkEndpoints      50000000                50.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               12.0 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.93 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.10 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.15 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.63 ns/op
    BenchmarkFmtVerboseString          10000            170625 ns/op
    BenchmarkPacketString      50000             58343 ns/op
    BenchmarkPacketDumpString          50000             58221 ns/op
    BenchmarkDecodeICMP      1000000              1663 ns/op
    BenchmarkDecodeICMP6     1000000              1883 ns/op
    BenchmarkDecodeMPLS      1000000              1887 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2378 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1417 ns/op
    ok      code.google.com/p/gopacket/layers       84.129s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 963.138426ms, 778ns per packet
    Time to read packet data into memory from file: 963.169512ms
    
    Benchmarking decode 1/5
            Read in 1237119 packets in 1.768187759s, 1.429us per packet
    Benchmarking decode 2/5
            Read in 1237119 packets in 1.512962272s, 1.222us per packet
    Benchmarking decode 3/5
            Read in 1237119 packets in 1.5518557s, 1.254us per packet
    Benchmarking decode 4/5
            Read in 1237119 packets in 1.59746741s, 1.291us per packet
    Benchmarking decode 5/5
            Read in 1237119 packets in 1.58125595s, 1.278us per packet
    
    Benchmarking decoding layer parser 1/5
            Read in 1237120 packets in 355.383173ms, decoded 4330909 layers, assembled 0 packets: 287ns per packet
    Benchmarking decoding layer parser 2/5
            Read in 1237120 packets in 350.965721ms, decoded 4330909 layers, assembled 0 packets: 283ns per packet
    Benchmarking decoding layer parser 3/5
            Read in 1237120 packets in 351.072954ms, decoded 4330909 layers, assembled 0 packets: 283ns per packet
    Benchmarking decoding layer parser 4/5
            Read in 1237120 packets in 352.086981ms, decoded 4330909 layers, assembled 0 packets: 284ns per packet
    Benchmarking decoding layer parser 5/5
            Read in 1237120 packets in 351.726342ms, decoded 4330909 layers, assembled 0 packets: 284ns per packet
    
    Benchmarking decoding layer parser with assembly 1/5
            Read in 1237120 packets in 652.869262ms, decoded 4330909 layers, assembled 1153247 packets: 527ns per packet
    Benchmarking decoding layer parser with assembly 2/5
            Read in 1237120 packets in 660.441592ms, decoded 4330909 layers, assembled 1153247 packets: 533ns per packet
    Benchmarking decoding layer parser with assembly 3/5
            Read in 1237120 packets in 676.384596ms, decoded 4330909 layers, assembled 1153247 packets: 546ns per packet
    Benchmarking decoding layer parser with assembly 4/5
            Read in 1237120 packets in 658.25211ms, decoded 4330909 layers, assembled 1153247 packets: 532ns per packet
    Benchmarking decoding layer parser with assembly 5/5
            Read in 1237120 packets in 659.623158ms, decoded 4330909 layers, assembled 1153247 packets: 533ns per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 1c4d022c0e9149bbc706a13da0a84660bbb9de8d
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.71 ns/op
    BenchmarkMapLookup      500000000                3.58 ns/op
    BenchmarkNilMapLookup   500000000                3.20 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.01 ns/op
    BenchmarkUnlockOSThread 500000000                4.69 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.45 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                60.1 ns/op
    BenchmarkUnbufferedChannel      10000000               255 ns/op
    BenchmarkSmallBufferedChannel    5000000               305 ns/op
    BenchmarkLargeBufferedChannel    5000000               305 ns/op
    BenchmarkEndpointFastHashShort  100000000               16.0 ns/op
    BenchmarkEndpointFastHashLong   50000000                35.0 ns/op
    BenchmarkFlowFastHashShort      100000000               22.6 ns/op
    BenchmarkFlowFastHashLong       50000000                59.6 ns/op
    ok      code.google.com/p/gopacket      39.438s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.10 ns/op
    BenchmarkLayerClassMapContains  500000000                3.94 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               913 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1377 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2165 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2307 ns/op
    BenchmarkDefault         1000000              2724 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               231 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               244 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               581 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               578 ns/op
    BenchmarkLazy    1000000              1114 ns/op
    BenchmarkNoCopy  1000000              2083 ns/op
    BenchmarkLazyNoCopy      5000000               478 ns/op
    BenchmarkKnownStack     10000000               178 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               243 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               305 ns/op
    BenchmarkAlloc  50000000                32.6 ns/op
    BenchmarkFlow   50000000                40.9 ns/op
    BenchmarkEndpoints      50000000                50.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.9 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                36.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                2.99 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.12 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.14 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.77 ns/op
    BenchmarkFmtVerboseString          10000            172318 ns/op
    BenchmarkPacketString      50000             58083 ns/op
    BenchmarkPacketDumpString          50000             58222 ns/op
    BenchmarkDecodeICMP      1000000              1655 ns/op
    BenchmarkDecodeICMP6     1000000              1890 ns/op
    BenchmarkDecodeMPLS      1000000              1833 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2393 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1428 ns/op
    ok      code.google.com/p/gopacket/layers       82.062s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 960.98239ms, 776ns per packet
    Time to read packet data into memory from file: 961.011014ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.868541734s, 1.51us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.757988693s, 1.421us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.79457954s, 1.45us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.812995173s, 1.465us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.756123679s, 1.419us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.687998151s, 1.364us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.608803911s, 1.3us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.555526365s, 1.257us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.558551018s, 1.259us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.552195915s, 1.254us per packet

commit 022160c7d96c1d816711772f1524243447c06ead
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Feb 13 13:50:40 2014 -0700

    Use AssembleWithTimestamp in examples.

commit 1c4d022c0e9149bbc706a13da0a84660bbb9de8d
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Feb 13 12:44:52 2014 -0700

    BENCH PCAP: set packet timestamp source.
    
    Add the ability to specify a timestamp source for PCAP handles pulling live
    traffic.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.2 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.44 ns/op
    BenchmarkMapLookup      500000000                3.55 ns/op
    BenchmarkNilMapLookup   500000000                3.17 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.79 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.26 ns/op
    BenchmarkLockOSThread   500000000                3.99 ns/op
    BenchmarkUnlockOSThread 500000000                4.49 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.26 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                58.6 ns/op
    BenchmarkUnbufferedChannel      10000000               250 ns/op
    BenchmarkSmallBufferedChannel    5000000               304 ns/op
    BenchmarkLargeBufferedChannel    5000000               306 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.8 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.4 ns/op
    BenchmarkFlowFastHashShort      100000000               22.2 ns/op
    BenchmarkFlowFastHashLong       50000000                59.0 ns/op
    ok      code.google.com/p/gopacket      38.794s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.06 ns/op
    BenchmarkLayerClassMapContains  500000000                3.92 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               907 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1403 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2284 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2453 ns/op
    BenchmarkDefault         1000000              2893 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               234 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               245 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               575 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               578 ns/op
    BenchmarkLazy    1000000              1152 ns/op
    BenchmarkNoCopy  1000000              2117 ns/op
    BenchmarkLazyNoCopy      5000000               491 ns/op
    BenchmarkKnownStack     10000000               175 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               237 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               299 ns/op
    BenchmarkAlloc  50000000                31.7 ns/op
    BenchmarkFlow   50000000                39.7 ns/op
    BenchmarkEndpoints      50000000                48.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.87 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.10 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.54 ns/op
    BenchmarkFmtVerboseString          10000            168515 ns/op
    BenchmarkPacketString      50000             57416 ns/op
    BenchmarkPacketDumpString          50000             57340 ns/op
    BenchmarkDecodeICMP      1000000              1654 ns/op
    BenchmarkDecodeICMP6     1000000              1892 ns/op
    BenchmarkDecodeMPLS      1000000              1855 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2378 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1424 ns/op
    ok      code.google.com/p/gopacket/layers       83.212s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 890.461754ms, 719ns per packet
    Time to read packet data into memory from file: 890.487143ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.569173023s, 1.268us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.522993314s, 1.231us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.554004907s, 1.256us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.567200224s, 1.266us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.574095788s, 1.272us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.588142265s, 1.283us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.588310232s, 1.283us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.581589607s, 1.278us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.5818236s, 1.278us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.582320805s, 1.279us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT ee0baca11af6dc90d587d0e6fa89936a03ecf352
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      500000000                3.56 ns/op
    BenchmarkNilMapLookup   500000000                3.17 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.79 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.26 ns/op
    BenchmarkLockOSThread   500000000                3.98 ns/op
    BenchmarkUnlockOSThread 500000000                4.50 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.26 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                58.3 ns/op
    BenchmarkUnbufferedChannel      10000000               251 ns/op
    BenchmarkSmallBufferedChannel    5000000               307 ns/op
    BenchmarkLargeBufferedChannel    5000000               306 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.7 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.5 ns/op
    BenchmarkFlowFastHashShort      100000000               22.4 ns/op
    BenchmarkFlowFastHashLong       50000000                59.0 ns/op
    ok      code.google.com/p/gopacket      38.855s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.06 ns/op
    BenchmarkLayerClassMapContains  500000000                3.90 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               907 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1402 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2197 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2372 ns/op
    BenchmarkDefault         1000000              2799 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               232 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               239 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               570 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               572 ns/op
    BenchmarkLazy    1000000              1165 ns/op
    BenchmarkNoCopy  1000000              2147 ns/op
    BenchmarkLazyNoCopy      5000000               496 ns/op
    BenchmarkKnownStack     10000000               176 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               237 ns/op
    BenchmarkDecodingLayerParserHandlePanic 10000000               297 ns/op
    BenchmarkAlloc  50000000                31.7 ns/op
    BenchmarkFlow   50000000                39.7 ns/op
    BenchmarkEndpoints      50000000                48.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.87 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.10 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.54 ns/op
    BenchmarkFmtVerboseString          10000            168389 ns/op
    BenchmarkPacketString      50000             57383 ns/op
    BenchmarkPacketDumpString          50000             57324 ns/op
    BenchmarkDecodeICMP      1000000              1652 ns/op
    BenchmarkDecodeICMP6     1000000              1905 ns/op
    BenchmarkDecodeMPLS      1000000              1855 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2373 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1423 ns/op
    ok      code.google.com/p/gopacket/layers       84.342s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 814.464902ms, 658ns per packet
    Time to read packet data into memory from file: 814.492122ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.589288933s, 1.284us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.525617561s, 1.233us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.557489589s, 1.258us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.573925009s, 1.272us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.580358283s, 1.277us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.582076713s, 1.278us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.583285942s, 1.279us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.582542394s, 1.279us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.583204198s, 1.279us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.583540421s, 1.28us per packet

commit ee0baca11af6dc90d587d0e6fa89936a03ecf352
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Feb 13 10:36:32 2014 -0700

    BENCH Pull down most recent generated data for ports/macs.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.2 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                4.15 ns/op
    BenchmarkMapLookup      500000000                4.24 ns/op
    BenchmarkNilMapLookup   500000000                3.69 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.83 ns/op
    BenchmarkArrayLookup    2000000000               0.55 ns/op
    BenchmarkTypeToInterface1       2000000000               0.85 ns/op
    BenchmarkTypeToInterface2       2000000000               0.55 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.28 ns/op
    BenchmarkLockOSThread   500000000                4.31 ns/op
    BenchmarkUnlockOSThread 500000000                4.88 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.61 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                61.2 ns/op
    BenchmarkUnbufferedChannel      10000000               264 ns/op
    BenchmarkSmallBufferedChannel    5000000               306 ns/op
    BenchmarkLargeBufferedChannel    5000000               304 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.8 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.8 ns/op
    BenchmarkFlowFastHashShort      100000000               22.4 ns/op
    BenchmarkFlowFastHashLong       50000000                59.6 ns/op
    ok      code.google.com/p/gopacket      41.057s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.08 ns/op
    BenchmarkLayerClassMapContains  500000000                3.94 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               888 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1380 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2217 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2386 ns/op
    BenchmarkDefault         1000000              2825 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               236 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               249 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               575 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               586 ns/op
    BenchmarkLazy    1000000              1167 ns/op
    BenchmarkNoCopy  1000000              2115 ns/op
    BenchmarkLazyNoCopy      5000000               507 ns/op
    BenchmarkKnownStack     10000000               177 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               240 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               305 ns/op
    BenchmarkAlloc  50000000                32.2 ns/op
    BenchmarkFlow   50000000                41.1 ns/op
    BenchmarkEndpoints      50000000                50.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.7 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.14 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.13 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.12 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000               10.1 ns/op
    BenchmarkFmtVerboseString          10000            177466 ns/op
    BenchmarkPacketString      50000             58101 ns/op
    BenchmarkPacketDumpString          50000             65632 ns/op
    BenchmarkDecodeICMP      1000000              1692 ns/op
    BenchmarkDecodeICMP6     1000000              2006 ns/op
    BenchmarkDecodeMPLS      1000000              1873 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2378 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1413 ns/op
    ok      code.google.com/p/gopacket/layers       83.261s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 963.131682ms, 778ns per packet
    Time to read packet data into memory from file: 963.161539ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.88714507s, 1.525us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.57602487s, 1.273us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.553588024s, 1.255us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.560645717s, 1.261us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.572628212s, 1.271us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.577386833s, 1.275us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.607753063s, 1.299us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.591877161s, 1.286us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.570962967s, 1.269us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.569812453s, 1.268us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 94474fda2852e447a2a131f66df4750a96024148
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.63 ns/op
    BenchmarkMapLookup      500000000                3.66 ns/op
    BenchmarkNilMapLookup   500000000                3.20 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.29 ns/op
    BenchmarkLockOSThread   500000000                4.15 ns/op
    BenchmarkUnlockOSThread 500000000                4.60 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.49 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                60.2 ns/op
    BenchmarkUnbufferedChannel      10000000               254 ns/op
    BenchmarkSmallBufferedChannel    5000000               314 ns/op
    BenchmarkLargeBufferedChannel    5000000               308 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.9 ns/op
    BenchmarkEndpointFastHashLong   50000000                36.9 ns/op
    BenchmarkFlowFastHashShort      100000000               23.1 ns/op
    BenchmarkFlowFastHashLong       50000000                59.5 ns/op
    ok      code.google.com/p/gopacket      39.832s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.09 ns/op
    BenchmarkLayerClassMapContains  500000000                3.97 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               909 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1381 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2173 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2340 ns/op
    BenchmarkDefault         1000000              2724 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               236 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               243 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               580 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               582 ns/op
    BenchmarkLazy    1000000              1134 ns/op
    BenchmarkNoCopy  1000000              2082 ns/op
    BenchmarkLazyNoCopy      5000000               474 ns/op
    BenchmarkKnownStack     10000000               175 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               243 ns/op
    BenchmarkDecodingLayerParserHandlePanic 10000000               302 ns/op
    BenchmarkAlloc  50000000                32.0 ns/op
    BenchmarkFlow   50000000                40.0 ns/op
    BenchmarkEndpoints      50000000                50.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.7 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.91 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.10 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.05 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.63 ns/op
    BenchmarkFmtVerboseString          10000            169634 ns/op
    BenchmarkPacketString      50000             57977 ns/op
    BenchmarkPacketDumpString          50000             58121 ns/op
    BenchmarkDecodeICMP      1000000              1643 ns/op
    BenchmarkDecodeICMP6     1000000              1888 ns/op
    BenchmarkDecodeMPLS      1000000              1855 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2404 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1437 ns/op
    ok      code.google.com/p/gopacket/layers       84.695s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 997.980242ms, 806ns per packet
    Time to read packet data into memory from file: 998.009848ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.910500851s, 1.544us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.778323064s, 1.437us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.813530895s, 1.465us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.578306418s, 1.275us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.571400176s, 1.27us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.572453s, 1.271us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.570522558s, 1.269us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.582784681s, 1.279us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.598131386s, 1.291us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.585144307s, 1.281us per packet

commit ae258c311531790cfe29631af515418b922f7f94
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Feb 13 10:34:43 2014 -0700

    Add some flags to statsassembly example.
    
    Adds the ability to modify behavior of statsassembly example with numerous
    interesting flags.

commit 7481860340ca4cc9d526a02c65902f056820ee7c
Merge: 011e827 d0962fb
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Feb 13 10:32:22 2014 -0700

    Merge branch 'master' of https://code.google.com/p/gopacket

commit 011e82777a94b4a673001849d8b67b8b3eea0544
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Feb 13 10:27:17 2014 -0700

    Modify assembler to take in packet timestamps.
    
    Folks were having trouble reading pcap files and reassembling streams, since
    timestamps coming from packets were not real-time times, they were stored
    timestamps read out via CaptureInfo.  This fixes the assembly API to make it
    possible to pass in CaptureInfo.Timestamp times, so FlushOlderThan works
    correctly and Reassembly.Seen times are accurate.

commit d0962fb6eb1c3b092e4ade8abab24c78622d7aea
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jan 22 22:06:16 2014 -0700

    Update docstring to mention other subpackages and examples

commit ef9a7fc1887a960d9ae40cd70e98ceca2e746acd
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Wed Jan 22 21:49:15 2014 -0700

    Move CHANGELOG just to wiki

commit 94474fda2852e447a2a131f66df4750a96024148
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 22 13:30:41 2014 -0700

    BENCH TCP Assembly work, small behavior changes.
    
    I've added a new example to show how tcpassembly can be used without tcpreader.
    It also illustrates the use of DecodingLayerParser and ZeroCopyReadPacketData.
    
    Along the way, found and fixed a few minor issues with TCP assembly, and added a
    debugging flag to provide VERY verbose logging should the need arise.
    
    Bug 1)  If a TCP stream is stopped halfway through, one side may continue to
    send some packet data until the RST reaches the other side.  All packets sent
    during this time will also trigger RSTs, meaning a bunch of packets being sent
    back over the wire without any data in them.  The problem is that with the old
    code this created a new connection object (empty, of course).  This has been
    fixed to not create connections for these "empty" packets.
    
    Bug 2)  TCP SYN received out of order:  If a SYN was received after other data
    had already been flushed (it was SUPER late), the old code would have actually
    reset nextSeq to the SYN and blindly sent it along, not a good story at all.
    The new code only sends a SYN if nextSeq shows that no packets have been sent
    yet.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.2 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.63 ns/op
    BenchmarkMapLookup      500000000                3.58 ns/op
    BenchmarkNilMapLookup   500000000                3.23 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.82 ns/op
    BenchmarkArrayLookup    2000000000               0.56 ns/op
    BenchmarkTypeToInterface1       2000000000               0.81 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.09 ns/op
    BenchmarkUnlockOSThread 500000000                4.53 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.50 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                59.0 ns/op
    BenchmarkUnbufferedChannel      10000000               253 ns/op
    BenchmarkSmallBufferedChannel    5000000               308 ns/op
    BenchmarkLargeBufferedChannel    5000000               309 ns/op
    BenchmarkEndpointFastHashShort  100000000               16.1 ns/op
    BenchmarkEndpointFastHashLong   50000000                34.9 ns/op
    BenchmarkFlowFastHashShort      100000000               22.6 ns/op
    BenchmarkFlowFastHashLong       50000000                62.2 ns/op
    ok      code.google.com/p/gopacket      39.620s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.08 ns/op
    BenchmarkLayerClassMapContains  500000000                3.94 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               877 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1362 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2139 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2303 ns/op
    BenchmarkDefault         1000000              2706 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               230 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               240 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               572 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               574 ns/op
    BenchmarkLazy    1000000              1108 ns/op
    BenchmarkNoCopy  1000000              2068 ns/op
    BenchmarkLazyNoCopy      5000000               471 ns/op
    BenchmarkKnownStack     10000000               177 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               238 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               299 ns/op
    BenchmarkAlloc  50000000                31.9 ns/op
    BenchmarkFlow   50000000                44.0 ns/op
    BenchmarkEndpoints      50000000                54.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               12.0 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                37.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.98 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.09 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.15 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.76 ns/op
    BenchmarkFmtVerboseString          10000            173119 ns/op
    BenchmarkPacketString      50000             58455 ns/op
    BenchmarkPacketDumpString          50000             58198 ns/op
    BenchmarkDecodeICMP      1000000              1692 ns/op
    BenchmarkDecodeICMP6     1000000              1980 ns/op
    BenchmarkDecodeMPLS      1000000              1867 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2406 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1516 ns/op
    ok      code.google.com/p/gopacket/layers       83.607s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 949.154065ms, 767ns per packet
    Time to read packet data into memory from file: 949.182945ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.764314354s, 1.426us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.518063063s, 1.227us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.56021317s, 1.261us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.602134797s, 1.295us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.604758522s, 1.297us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.583547905s, 1.28us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.561558827s, 1.262us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.640037612s, 1.325us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.757084824s, 1.42us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.675972214s, 1.354us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 7556c6c5158ed6f6ba7174825ef5b05d8d4a6fdc
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                4.09 ns/op
    BenchmarkMapLookup      500000000                4.26 ns/op
    BenchmarkNilMapLookup   500000000                3.79 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.94 ns/op
    BenchmarkArrayLookup    2000000000               0.63 ns/op
    BenchmarkTypeToInterface1       2000000000               0.94 ns/op
    BenchmarkTypeToInterface2       2000000000               0.64 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.31 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.31 ns/op
    BenchmarkLockOSThread   500000000                4.80 ns/op
    BenchmarkUnlockOSThread 500000000                5.36 ns/op
    BenchmarkLockUnlockOSThread     100000000               11.0 ns/op
    BenchmarkLockDeferUnlockOSThread        50000000                69.6 ns/op
    BenchmarkUnbufferedChannel      10000000               300 ns/op
    BenchmarkSmallBufferedChannel    5000000               364 ns/op
    BenchmarkLargeBufferedChannel    5000000               365 ns/op
    BenchmarkEndpointFastHashShort  100000000               19.1 ns/op
    BenchmarkEndpointFastHashLong   50000000                41.0 ns/op
    BenchmarkFlowFastHashShort      100000000               26.3 ns/op
    BenchmarkFlowFastHashLong       50000000                70.5 ns/op
    ok      code.google.com/p/gopacket      44.046s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.26 ns/op
    BenchmarkLayerClassMapContains  500000000                4.67 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1038 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1645 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2573 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2794 ns/op
    BenchmarkDefault         1000000              3246 ns/op
    BenchmarkSerializeTcpNoOptions  10000000               281 ns/op
    BenchmarkSerializeTcpFixLengths 10000000               289 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               670 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               676 ns/op
    BenchmarkLazy    1000000              1328 ns/op
    BenchmarkNoCopy  1000000              2461 ns/op
    BenchmarkLazyNoCopy      5000000               563 ns/op
    BenchmarkKnownStack     10000000               233 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               284 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               359 ns/op
    BenchmarkAlloc  50000000                37.7 ns/op
    BenchmarkFlow   50000000                46.8 ns/op
    BenchmarkEndpoints      50000000                58.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                42.0 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.45 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.27 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.25 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               11.3 ns/op
    BenchmarkFmtVerboseString          10000            200931 ns/op
    BenchmarkPacketString      50000             68417 ns/op
    BenchmarkPacketDumpString          50000             67297 ns/op
    BenchmarkDecodeICMP      1000000              1930 ns/op
    BenchmarkDecodeICMP6     1000000              2181 ns/op
    BenchmarkDecodeMPLS      1000000              2144 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2754 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1658 ns/op
    ok      code.google.com/p/gopacket/layers       91.764s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 925.00163ms, 747ns per packet
    Time to read packet data into memory from file: 925.030333ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.865679504s, 1.508us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.767544157s, 1.428us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.806912137s, 1.46us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.824212874s, 1.474us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.845799292s, 1.492us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.84048428s, 1.487us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.834548144s, 1.482us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.827650238s, 1.477us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.83048333s, 1.479us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.878186782s, 1.518us per packet

commit 4ad4154819b9c6d2d918fd7e87c60f953cd12505
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 21 09:55:13 2014 -0700

    Changelog update for v1.0.5

commit ee6c29c6a8c6ff137405d98ed04a7009a285b5d3
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 21 09:50:05 2014 -0700

    Convert PCap/PFRing timestamps correctly.
    
    We were incorrectly converting pcap and pfring timestamps into Go time.Time
    objects... they returned micros, but we treated them as nanos.
    
    Thanks to Peter Membrey for pointing this out.

commit 26330655382c1b77666e5ec896b0e96bd744b59a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 20 13:58:22 2013 -0700

    Update changelog for v1.0.4

commit 181aef30c2f5c0488c81cdfbab97fed70e7625ab
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 20 13:54:00 2013 -0700

    Add syn scanner example, update generated files.

commit b85fe5c2a16b4217bec547e073e54f7c89f595f7
Merge: dcdad37 e5b4c70
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 20 12:00:55 2013 -0700

    Merge branch 'master' into scanner

commit e5b4c70418d7d42071b14eeb3b87713564077a57
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 20 10:47:00 2013 -0700

    Fix copyrights, add copyright check to gc, changelog update.

commit 26e14693245d21d9dfb69381803f373a44dcbab6
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 20 10:36:43 2013 -0700

    Move all example code into example subdirectory.

commit 97e335167f990c1a02d3a58bb490e410385dd0a9
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 20 10:29:13 2013 -0700

    Fix TCP assembly example.
    
    The current TCP assembly example hung forever because the reader stream wasn't
    correctly initialized.  Fixed it, and also changed the library to panic should
    that type of issue happen to others, so it's easy to trace what the issue is.

commit c769fc375a4ccc9110b1b9b99eb8f1ab99eb1596
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 19 17:29:09 2013 -0700

    Example program: arpscan.
    
    arpscan scans all local networks for machines using simple ARP scanning
    techniques.

commit dcdad3736a5771dc544c1b1c52ff5a87167f07e5
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 19 15:12:12 2013 -0700

    Add simple routing using the kernel's routing tables.
    
    For packet-generation tasks, figuring out where to send packets (which
    interface/gateway) is non-trivial.  This library uses the kernel's routing
    table (gathered via Netlink) to make routing decisions.
    
    The current implementation is by no means particularly fast (or possibly even
    accurate ;), but it seems to work pretty well for simple tasks.

commit e0aa78b402c57dc540f4f664f6e1e07d2696fca8
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 9 11:34:37 2013 -0700

    Fix/add comments for gopacket.SerializeLayers.

commit be7361c024edb9df73f15d272a3b1946d6906970
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Dec 2 10:46:08 2013 -0700

    Updated changelog with recent bugfix.

commit bfd3c813ec21831d6f11467ca7924cbe18309045
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Dec 2 10:41:24 2013 -0700

    Update baked-in ports/macs.

commit e28112142a483f757bbc2c13e22cbbd7bd29fa13
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Dec 2 10:35:25 2013 -0700

    Add bytediff to tests, fix ip4/ip6 length calc.

commit 2e50664e69c34f2d5a11f1c64fe08a300e5d8bad
Merge: 7556c6c 7fa13ab
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Nov 4 21:43:52 2013 -0700

    Merge branch 'master' of https://code.google.com/p/gopacket

commit 7fa13ab29dc7a80f65eddde24abb98a6e53e740f
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon Nov 4 21:39:35 2013 -0700

    Fix TCP checksum calculation.
    
    Fix for Issue #4.

commit 7556c6c5158ed6f6ba7174825ef5b05d8d4a6fdc
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Oct 9 14:19:09 2013 -0600

    BENCH Fix TCP options pre-allocation.
    
    Somewhere along the way (probably when I converted TCP to DecodeFromBytes), I
    stopped using the preallocated options.  This rolls that back.  TCP decoding
    gains about a 40% speedup from this, as far as I can tell.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                4.10 ns/op
    BenchmarkMapLookup      500000000                4.13 ns/op
    BenchmarkNilMapLookup   1000000000               3.01 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.83 ns/op
    BenchmarkArrayLookup    2000000000               0.61 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.01 ns/op
    BenchmarkUnlockOSThread 500000000                4.51 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.36 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                84.7 ns/op
    BenchmarkUnbufferedChannel      10000000               252 ns/op
    BenchmarkSmallBufferedChannel   10000000               297 ns/op
    BenchmarkLargeBufferedChannel   10000000               297 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.2 ns/op
    BenchmarkEndpointFastHashLong   50000000                33.3 ns/op
    BenchmarkFlowFastHashShort      100000000               22.0 ns/op
    BenchmarkFlowFastHashLong       50000000                56.4 ns/op
    ok      code.google.com/p/gopacket      42.685s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.09 ns/op
    BenchmarkLayerClassMapContains  500000000                4.06 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               977 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1528 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2390 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2621 ns/op
    BenchmarkDefault         1000000              2981 ns/op
    BenchmarkSerializeTcpNoOptions   5000000               408 ns/op
    BenchmarkSerializeTcpFixLengths  5000000               413 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               734 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               740 ns/op
    BenchmarkLazy    1000000              1221 ns/op
    BenchmarkNoCopy  1000000              2266 ns/op
    BenchmarkLazyNoCopy      5000000               526 ns/op
    BenchmarkKnownStack     10000000               189 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               242 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               323 ns/op
    BenchmarkAlloc  50000000                30.1 ns/op
    BenchmarkFlow   20000000               105 ns/op
    BenchmarkEndpoints      50000000                49.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.4 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.81 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.06 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.72 ns/op
    BenchmarkFmtVerboseString          20000             85280 ns/op
    BenchmarkPacketString      50000             71536 ns/op
    BenchmarkPacketDumpString          50000             71584 ns/op
    BenchmarkDecodeICMP      1000000              1811 ns/op
    BenchmarkDecodeICMP6     1000000              2043 ns/op
    BenchmarkDecodeMPLS      1000000              2020 ns/op
    BenchmarkDecodePPPoE_ICMPv6      1000000              2583 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1618 ns/op
    ok      code.google.com/p/gopacket/layers       90.393s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 967.493632ms, 782ns per packet
    Time to read packet data into memory from file: 967.519388ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.409616949s, 1.947us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.109402471s, 1.705us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.004711572s, 1.62us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.027007763s, 1.638us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.03273311s, 1.643us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.034027659s, 1.644us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.034205326s, 1.644us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.033280517s, 1.643us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.036075271s, 1.645us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.049170902s, 1.656us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 3b909897916cebdca25f2b69c91df08a02bcc84f
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                4.08 ns/op
    BenchmarkMapLookup      500000000                4.73 ns/op
    BenchmarkNilMapLookup   500000000                3.46 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.94 ns/op
    BenchmarkArrayLookup    2000000000               0.63 ns/op
    BenchmarkTypeToInterface1       2000000000               0.94 ns/op
    BenchmarkTypeToInterface2       2000000000               0.63 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.31 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.31 ns/op
    BenchmarkLockOSThread   500000000                4.70 ns/op
    BenchmarkUnlockOSThread 500000000                5.21 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.30 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                84.6 ns/op
    BenchmarkUnbufferedChannel      10000000               248 ns/op
    BenchmarkSmallBufferedChannel   10000000               293 ns/op
    BenchmarkLargeBufferedChannel   10000000               294 ns/op
    BenchmarkEndpointFastHashShort  100000000               14.6 ns/op
    BenchmarkEndpointFastHashLong   50000000                32.4 ns/op
    BenchmarkFlowFastHashShort      100000000               21.3 ns/op
    BenchmarkFlowFastHashLong       50000000                56.2 ns/op
    ok      code.google.com/p/gopacket      43.232s
    warning: building out-of-date packages:
            code.google.com/p/gopacket
    installing these packages with 'go test -i' will speed future tests.
    
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.25 ns/op
    BenchmarkLayerClassMapContains  500000000                4.75 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1119 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1773 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2803 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3044 ns/op
    BenchmarkDefault         1000000              3481 ns/op
    BenchmarkSerializeTcpNoOptions   5000000               436 ns/op
    BenchmarkSerializeTcpFixLengths  5000000               410 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               734 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               738 ns/op
    BenchmarkLazy    1000000              1208 ns/op
    BenchmarkNoCopy  1000000              2275 ns/op
    BenchmarkLazyNoCopy      5000000               522 ns/op
    BenchmarkKnownStack     10000000               188 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               241 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               328 ns/op
    BenchmarkAlloc  50000000                30.0 ns/op
    BenchmarkFlow   20000000               108 ns/op
    BenchmarkEndpoints      50000000                49.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                36.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.82 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.02 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.69 ns/op
    BenchmarkFmtVerboseString          20000             86878 ns/op
    BenchmarkPacketString      50000             71415 ns/op
    BenchmarkPacketDumpString          50000             71316 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1558 ns/op
    ok      code.google.com/p/gopacket/layers       82.346s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 956.330474ms, 773ns per packet
    Time to read packet data into memory from file: 956.360471ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.402407032s, 1.941us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.318985798s, 1.874us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.358850005s, 1.906us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.378795366s, 1.922us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.386797395s, 1.929us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.389922175s, 1.931us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.390623216s, 1.932us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.404801431s, 1.943us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.391056175s, 1.932us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.413339721s, 1.95us per packet

commit 3ca16665ad69a6d77b07e6c2de53909587a48862
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Oct 7 15:26:56 2013 -0600

    Verbose errors for pfring's Open function.

commit 7f8fe1afe6945d7f1f2bb30d9a374d6ec951c568
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Fri Oct 4 21:50:21 2013 -0600

    Update ports and mac prefixes.

commit bc4a0999360823fca4458f5c0a9587d28d22708a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 4 17:16:34 2013 -0600

    Fix changelog to better display versions.

commit 00b26492a7bb78e955516c8176566a924469fd9f
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 4 17:13:29 2013 -0600

    Changes.

commit 96888560c968dd5b5b3b1e2212147792e25769bf
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 4 17:08:42 2013 -0600

    Add serialization to a number of layers.
    
    Add serialization to ARP, EAP, ICMPv4, ICMPv6, MPLS, PPP, and PPPoE.
    Fixes bug in MPLS where it was looking at the wrong bit for bottom-of-stack.
    Added a number of tests for the new layer types, to make sure we could decode,
    then serialize and get the same packet back.

commit 7167728a3e3a4ccd7c30e6649a1eb1cd7696b84b
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 4 13:53:51 2013 -0600

    Add copyrights to files missing them.

commit 394086433c612f4d159a91b4e65cc3e8671b4dab
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 4 08:06:42 2013 -0600

    Added semantic versioning.

commit 7e72f3483a4e893f68cb7da454009a42c9fe6439
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Oct 4 07:45:37 2013 -0600

    Update changelog to code.google.com wiki syntax.

commit f375e7f46679a974af2ba5bf857b10216e20bdee
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 3 16:38:07 2013 -0600

    Add serialization to changelog.

commit 63984d308e5f90225599c32dffd885c5c3d49aba
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 3 16:33:25 2013 -0600

    Switch SerializeBuffer from struct to interface.
    
    This modifies the API for layer serialization slightly to open up the
    opportunity for users to create their own SerializeBuffer implementations,
    should they have a specific need to do so.

commit 4ce5169049714abe25c0d27c4847dde758ee4c47
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 3 14:00:35 2013 -0600

    Add changelog.
    
    Added a simple changelog to highlight big changes made in gopacket over time.

commit 1ab76426bd8e61b5ed9209c467bb23a79391d8c5
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 3 12:46:04 2013 -0600

    Add documentation to macs package.

commit 3b909897916cebdca25f2b69c91df08a02bcc84f
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Oct 3 11:12:36 2013 -0600

    BENCH Packet serialization.
    
    This CL introduces a packet serialization framework, by which users can
    construct packets from code, serialize them to a byte slice, then send it on the
    network using one of the existing send methods (pcap.WritePacketData, for
    instance).
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkTypeAssertion  500000000                3.54 ns/op
    BenchmarkMapLookup      500000000                4.02 ns/op
    BenchmarkNilMapLookup   1000000000               2.94 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.00 ns/op
    BenchmarkUnlockOSThread 500000000                4.53 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.34 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                85.0 ns/op
    BenchmarkUnbufferedChannel      10000000               249 ns/op
    BenchmarkSmallBufferedChannel   10000000               299 ns/op
    BenchmarkLargeBufferedChannel   10000000               298 ns/op
    BenchmarkEndpointFastHashShort  100000000               14.6 ns/op
    BenchmarkEndpointFastHashLong   50000000                32.7 ns/op
    BenchmarkFlowFastHashShort      100000000               21.4 ns/op
    BenchmarkFlowFastHashLong       50000000                56.3 ns/op
    ok      code.google.com/p/gopacket      41.877s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.22 ns/op
    BenchmarkLayerClassMapContains  500000000                4.07 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               973 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1518 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2387 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2604 ns/op
    BenchmarkDefault         1000000              2984 ns/op
    BenchmarkSerializeTcpNoOptions   5000000               405 ns/op
    BenchmarkSerializeTcpFixLengths  5000000               405 ns/op
    BenchmarkSerializeTcpComputeChecksums    5000000               736 ns/op
    BenchmarkSerializeTcpFixLengthsComputeChecksums  5000000               739 ns/op
    BenchmarkLazy    1000000              1213 ns/op
    BenchmarkNoCopy  1000000              2288 ns/op
    BenchmarkLazyNoCopy      5000000               530 ns/op
    BenchmarkKnownStack     10000000               194 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               243 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               326 ns/op
    BenchmarkAlloc  50000000                30.2 ns/op
    BenchmarkFlow   20000000               108 ns/op
    BenchmarkEndpoints      50000000                49.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                36.0 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.83 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.07 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.03 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.70 ns/op
    BenchmarkFmtVerboseString          20000             87108 ns/op
    BenchmarkPacketString      50000             71575 ns/op
    BenchmarkPacketDumpString          50000             71532 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1565 ns/op
    ok      code.google.com/p/gopacket/layers       81.947s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 874.166108ms, 706ns per packet
    Time to read packet data into memory from file: 874.192417ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.07217104s, 1.674us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.983462896s, 1.603us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.020165454s, 1.632us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.056950755s, 1.662us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.074650708s, 1.677us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.04684309s, 1.654us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.069287483s, 1.672us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.048327367s, 1.655us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.126482639s, 1.718us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.062001793s, 1.666us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 18af9281fcf4d396d4fe3767ad1413f28c242d9e
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.53 ns/op
    BenchmarkMapLookup      500000000                4.27 ns/op
    BenchmarkNilMapLookup   1000000000               2.93 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.01 ns/op
    BenchmarkUnlockOSThread 500000000                4.54 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.49 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                83.9 ns/op
    BenchmarkUnbufferedChannel      10000000               264 ns/op
    BenchmarkSmallBufferedChannel    5000000               314 ns/op
    BenchmarkLargeBufferedChannel    5000000               311 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.0 ns/op
    BenchmarkEndpointFastHashLong   50000000                32.7 ns/op
    BenchmarkFlowFastHashShort      100000000               21.7 ns/op
    BenchmarkFlowFastHashLong       50000000                59.9 ns/op
    ok      code.google.com/p/gopacket      39.618s
    warning: building out-of-date packages:
            code.google.com/p/gopacket
    installing these packages with 'go test -i' will speed future tests.
    
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.09 ns/op
    BenchmarkLayerClassMapContains  500000000                4.18 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               974 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1520 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2409 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2612 ns/op
    BenchmarkDefault         1000000              3033 ns/op
    BenchmarkLazy    1000000              1243 ns/op
    BenchmarkNoCopy  1000000              2306 ns/op
    BenchmarkLazyNoCopy      5000000               535 ns/op
    BenchmarkKnownStack     10000000               196 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               245 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               329 ns/op
    BenchmarkAlloc  50000000                31.0 ns/op
    BenchmarkFlow   20000000               108 ns/op
    BenchmarkEndpoints      50000000                50.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                36.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.90 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.07 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.03 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.73 ns/op
    BenchmarkFmtVerboseString          20000             85515 ns/op
    BenchmarkPacketString      50000             69166 ns/op
    BenchmarkPacketDumpString          50000             69451 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1559 ns/op
    ok      code.google.com/p/gopacket/layers       67.640s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 890.763142ms, 720ns per packet
    Time to read packet data into memory from file: 890.789051ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.014951903s, 1.628us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.94873445s, 1.575us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.984694114s, 1.604us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.007862155s, 1.623us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.999399972s, 1.616us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.003462122s, 1.619us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.003986301s, 1.619us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.021411679s, 1.633us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.004247236s, 1.62us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.00386476s, 1.619us per packet

commit 4fc6a2a31120aee96ec902817ca5555f832afc1e
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Sep 30 22:21:18 2013 -0600

    Docs for DecodingLayer functions.
    
    Some stock documentation for the DecodingLayer function implementations.

commit c3135e34b82b6439303aa44b0f92d047f877fb70
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Sep 30 14:00:06 2013 -0600

    Make numerous Layers into DecodingLayers.
    
    This CL is a simple conversion of ARP, EAP, EAPOL, EtherIP, GRE, and
    ICMPv6 into DecodingLayers.  It also adds a standard method for doing this with
    simple layers, decodingLayerDecoder, in base.

commit 18af9281fcf4d396d4fe3767ad1413f28c242d9e
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Sep 30 11:44:05 2013 -0600

    BENCH Add zero-copy capabilities to pcap.
    
    Using a single core of an Intel Corporation Xeon E5/Core i7, this single change
    upped the throughput from ~1.7Gbps to ~3.25Gbps, basically a 100% increase.  Of
    course, it requires much more careful programming.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                4.13 ns/op
    BenchmarkMapLookup      500000000                5.09 ns/op
    BenchmarkNilMapLookup   500000000                3.45 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.85 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.82 ns/op
    BenchmarkTypeToInterface2       2000000000               0.55 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.28 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.28 ns/op
    BenchmarkLockOSThread   500000000                4.09 ns/op
    BenchmarkUnlockOSThread 500000000                4.76 ns/op
    BenchmarkLockUnlockOSThread     100000000               10.0 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                90.0 ns/op
    BenchmarkUnbufferedChannel      10000000               309 ns/op
    BenchmarkSmallBufferedChannel    5000000               363 ns/op
    BenchmarkLargeBufferedChannel    5000000               353 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.3 ns/op
    BenchmarkEndpointFastHashLong   50000000                33.8 ns/op
    BenchmarkFlowFastHashShort      100000000               22.8 ns/op
    BenchmarkFlowFastHashLong       50000000                58.5 ns/op
    ok      code.google.com/p/gopacket      39.131s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.25 ns/op
    BenchmarkLayerClassMapContains  500000000                4.81 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1113 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1776 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2844 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2926 ns/op
    BenchmarkDefault         1000000              3057 ns/op
    BenchmarkLazy    1000000              1257 ns/op
    BenchmarkNoCopy  1000000              2310 ns/op
    BenchmarkLazyNoCopy      5000000               540 ns/op
    BenchmarkKnownStack     10000000               199 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               251 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               351 ns/op
    BenchmarkAlloc  50000000                32.3 ns/op
    BenchmarkFlow   20000000               115 ns/op
    BenchmarkEndpoints      50000000                51.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                37.2 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.97 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.11 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.18 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.0 ns/op
    BenchmarkFmtVerboseString          20000             88409 ns/op
    BenchmarkPacketString      50000             71188 ns/op
    BenchmarkPacketDumpString          50000             71349 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1618 ns/op
    ok      code.google.com/p/gopacket/layers       67.190s
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 963.891046ms, 779ns per packet
    Time to read packet data into memory from file: 963.921602ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.381750072s, 1.925us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.330246599s, 1.883us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.355273178s, 1.903us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.349793044s, 1.899us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.364783386s, 1.911us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.370107548s, 1.915us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.374450987s, 1.919us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.366957989s, 1.913us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.354799539s, 1.903us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.356520049s, 1.904us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 1688462e35ceda1b5914434bd1add89190c0526e
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                4.09 ns/op
    BenchmarkMapLookup      500000000                5.04 ns/op
    BenchmarkNilMapLookup   500000000                3.50 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.97 ns/op
    BenchmarkArrayLookup    2000000000               0.63 ns/op
    BenchmarkTypeToInterface1       2000000000               0.99 ns/op
    BenchmarkTypeToInterface2       2000000000               0.63 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.4 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.28 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.28 ns/op
    BenchmarkLockOSThread   500000000                4.08 ns/op
    BenchmarkUnlockOSThread 500000000                4.77 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.63 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                89.4 ns/op
    BenchmarkUnbufferedChannel      10000000               272 ns/op
    BenchmarkSmallBufferedChannel    5000000               318 ns/op
    BenchmarkLargeBufferedChannel    5000000               313 ns/op
    BenchmarkEndpointFastHashShort  100000000               15.2 ns/op
    BenchmarkEndpointFastHashLong   50000000                33.1 ns/op
    BenchmarkFlowFastHashShort      100000000               22.4 ns/op
    BenchmarkFlowFastHashLong       50000000                58.0 ns/op
    ok      code.google.com/p/gopacket      42.956s
    warning: building out-of-date packages:
            code.google.com/p/gopacket
    installing these packages with 'go test -i' will speed future tests.
    
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.25 ns/op
    BenchmarkLayerClassMapContains  500000000                4.81 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1115 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1786 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2764 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3008 ns/op
    BenchmarkDefault         1000000              3435 ns/op
    BenchmarkLazy    1000000              1422 ns/op
    BenchmarkNoCopy  1000000              2601 ns/op
    BenchmarkLazyNoCopy      5000000               606 ns/op
    BenchmarkKnownStack     10000000               221 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               287 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               383 ns/op
    BenchmarkAlloc  50000000                34.2 ns/op
    BenchmarkFlow   20000000               126 ns/op
    BenchmarkEndpoints      50000000                60.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                41.3 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.31 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.25 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.15 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               11.4 ns/op
    BenchmarkFmtVerboseString          20000             99317 ns/op
    BenchmarkPacketString       5000            903239 ns/op
    BenchmarkPacketDumpString           5000            833970 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1575 ns/op
    ok      code.google.com/p/gopacket/layers       70.947s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 958.592242ms, 774ns per packet
    Time to read packet data into memory from file: 958.621432ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.411533706s, 1.949us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.292456851s, 1.853us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.347311118s, 1.897us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.357805102s, 1.905us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.391312711s, 1.932us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.369262196s, 1.915us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.371439361s, 1.916us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.372287595s, 1.917us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.371243638s, 1.916us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.371827647s, 1.917us per packet

commit 1c9fcb5b211d2b721ace744a410103c4eef69233
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 27 21:28:47 2013 -0600

    Add IGMP parser.

commit 3f67769d3058e9f41843bbb01c3a7a63c94990ff
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Sep 27 17:45:21 2013 -0600

    Socket type option.

commit 72d17a5dd1a31fbc334fb89af95a16926681bca7
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Aug 23 16:47:36 2013 -0600

    Add build directives to all afpacket files.

commit ae92f9fd014da884d40b12985de540444a16e462
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Aug 23 16:45:32 2013 -0600

    Minor fixes based on 'go vet' output.

commit 3a810335f15ad55ba4b6cdf76181c5bbbade5df3
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Aug 21 12:19:21 2013 -0600

    AF_PACKET support for gopacket.
    
    This adds support for Linux' AF_PACKET socket reading to gopacket.  It's
    relatively well-documented and ready for testing.  As always, though, I'm
    limited to what I can test based on my own environment and imagination, so I'd
    definitely appreciate any help/bugs folks might provide.
    
    The exported API is relatively well-documented and ready for use.
    
    There's an issue right now where you need to have a
    TPACKET_V3-supported kernel to use the library (to have all the correct
    includes, etc), although the library will then gracefully degrade to V2 or V1 if
    it's run on another kernel which only supports lower versions.

commit 4d063670547417fbe97242afdbcdd1d851018eec
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 22 13:52:49 2013 -0600

    Break MPLS dependency on Ethernet.
    
    MPLS used to use the known set of Ethernet prefixes to determine whether a
    packet it encapsulated was Ethernet vs. IPv4/IPv6.  This caused compile times of
    'layers' to  slow considerably.  gopacket/macs takes a long
    time to compile/link, since it contains a very large list of all ethernet
    prefixes.

commit 43cd11eec5c6f690e73420d534e3605c2076f7d7
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jul 22 11:35:57 2013 -0600

    Fix MPLS use of MACs.

commit 32896eb137dfb797320571997d9420ed99dfb1c9
Merge: 27312f1 5646fd2
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jul 11 11:34:16 2013 -0600

    Merge branch 'master' into movemacs

commit 5646fd21daad14a4397db0ec85fe03d73b4d407d
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jul 11 11:33:43 2013 -0600

    Fix author name.

commit 34c521514528d404ae06fd0b529197438c5a395c
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jul 11 11:22:37 2013 -0600

    Update authors with recent contributors.

commit 6a82289fba56b8628388b8a57398da587859e3e9
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jul 11 11:16:53 2013 -0600

    Add windows support for layers.

commit 27312f15fcf8cd261a3bd576263ec587d4a19a20
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jul 11 09:26:37 2013 -0600

    Move valid mac prefixes into subpackage.
    
    The valid mac prefixes map is very large, and was slowing down compiles of
    anything that depended on gopacket.  By moving it into a subpackage, we can much
    more quickly build the base gopacket library, and binary sizes are smaller for
    anything that doesn't require mac prefix lookups.

commit acd4d87813cc9fef0286c0433650944cd24bdc66
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 11:58:42 2013 -0600

    Example code for tcp assembly to reassemble HTTP requests.

commit 119d4fcbfd8aa12f449ac44ec3e54c92b0ede64b
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 11:24:39 2013 -0600

    Full merge of tcp assembly into gopacket.
    
    Removed spurious incomplete ipv4 defrag code.

commit 9545b97a38d9a5259bb0d5d4ea3df02137f4742d
Merge: 42d8270 542b8b4
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 11:20:03 2013 -0600

    Merge branch 'merge' of github.com:gconnell/assembly into merge
    
    Conflicts:
            .gitignore

commit 542b8b4e452f325e107173c8c8c57688bb9fb91a
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 11:15:26 2013 -0600

    More work getting ready for gopacket merge.

commit 6e34730753ed11773687b082254c6e6acbc83e50
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 11:06:54 2013 -0600

    Switch Apache -> BSD in preparation for gopacket merge.

commit 42d82706b706725dcb741633ec7292c5c6652d6c
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 10:35:12 2013 -0600

    Start work on IPv4 defrag.

commit ca2c38fefca570d161ccb5cf2d2615e1924c3f53
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 18 09:10:55 2013 -0600

    Add type for IPv4 flag.
    
    This change is backwards incompatible (sorry!), but only if you already use IPv4
    fragmentation flags for something, which shouldn't affect most users.

commit 4f642f1d2029070fe5ddae939cf11a8bab09aae8
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 12 17:40:31 2013 -0600

    Fix important documentation error.

commit ad5334b91ba35d435960e209fe988af0ed69a015
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 12 15:12:22 2013 -0600

    Bug fix:  output empty packets, so we output FIN/RST.

commit f961b5e1d7e2700a854768285e47d2e07bd1b02e
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 12 14:06:56 2013 -0600

    Change skip to an int of skipped bytes.

commit ef18bb6a70634a10a0a210aafb46a10fb3b9afe3
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 12 13:51:29 2013 -0600

    Fix pages-per-connection tracking issue, regtest.

commit ecae623d25894335a3561bf09cd226787cd12d26
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jun 12 13:46:49 2013 -0600

    Fix issue with overlaps in buffered pages, add reg tests.

commit 1688462e35ceda1b5914434bd1add89190c0526e
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 11 16:42:29 2013 -0600

    BENCH Performance improvements.
    
    For DecodingLayerParser.DecodeLayers, instead of creating/formatting a string
    when we can't handle a particular layer type, we instead cast the LayerType to a
    purpose-specific error type, which saves a good number of cycles.
    
    Also, removed some very sneaky memory allocations in both pcap.ReadPacketData
    and pfring.ReadPacketData.  Both pfring and pcap C libraries work by passing in
    pointers to local values, so it can modify those values for the caller.
    Unfortunately, the Go compiler sees a pointer being passed into a C
    function and assumes, safely, that the pointed-to value is escaping...
    thus it must be heap-allocated instead of stack-allocated.  pkthdr and buf_ptr
    in both functions was being heap-allocated, and this was a huge performance hit
    (up to 3x slower function call).  We now instead store those values on the
    Handle/Ring, protected by a mutex.  This has the added benefit of making
    ReadPacketData in both objects now concurrency-safe.
    
    As an added improvement, pfring now supports ReadPacketDataTo, where data is
    read into a caller-supplied buffer.  This saves another memory allocation for
    power pfring users.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.44 ns/op
    BenchmarkMapLookup      500000000                4.24 ns/op
    BenchmarkNilMapLookup   1000000000               2.91 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                34.4 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                3.97 ns/op
    BenchmarkUnlockOSThread 500000000                4.50 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.31 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                83.8 ns/op
    BenchmarkUnbufferedChannel      10000000               258 ns/op
    BenchmarkSmallBufferedChannel    5000000               307 ns/op
    BenchmarkLargeBufferedChannel    5000000               306 ns/op
    BenchmarkEndpointFastHashShort  100000000               14.8 ns/op
    BenchmarkEndpointFastHashLong   50000000                32.3 ns/op
    BenchmarkFlowFastHashShort      100000000               21.7 ns/op
    BenchmarkFlowFastHashLong       50000000                59.9 ns/op
    ok      code.google.com/p/gopacket      41.015s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.06 ns/op
    BenchmarkLayerClassMapContains  500000000                4.04 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               964 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1513 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2349 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2555 ns/op
    BenchmarkDefault         1000000              2937 ns/op
    BenchmarkLazy    1000000              1213 ns/op
    BenchmarkNoCopy  1000000              2216 ns/op
    BenchmarkLazyNoCopy      5000000               516 ns/op
    BenchmarkKnownStack     10000000               187 ns/op
    BenchmarkDecodingLayerParserIgnorePanic 10000000               248 ns/op
    BenchmarkDecodingLayerParserHandlePanic  5000000               324 ns/op
    BenchmarkAlloc  100000000               29.1 ns/op
    BenchmarkFlow   20000000               107 ns/op
    BenchmarkEndpoints      50000000                49.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                34.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.79 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.05 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.77 ns/op
    BenchmarkFmtVerboseString          20000             83983 ns/op
    BenchmarkPacketString       5000            792693 ns/op
    BenchmarkPacketDumpString           5000            782611 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1565 ns/op
    ok      code.google.com/p/gopacket/layers       67.623s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 970.070183ms, 784ns per packet
    Time to read packet data into memory from file: 970.097332ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.095198307s, 1.693us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.006987878s, 1.622us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.013331794s, 1.627us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.044273045s, 1.652us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.009115039s, 1.624us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.010697714s, 1.625us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.012549067s, 1.626us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.012896667s, 1.627us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.024151955s, 1.636us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.024436625s, 1.636us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 3ba4a2b8c2c1e86ececf5be19287e15939f1dc93
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.60 ns/op
    BenchmarkMapLookup      500000000                4.03 ns/op
    BenchmarkNilMapLookup   1000000000               2.92 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                34.7 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.02 ns/op
    BenchmarkUnlockOSThread 500000000                4.51 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.46 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                84.0 ns/op
    BenchmarkUnbufferedChannel      10000000               264 ns/op
    BenchmarkSmallBufferedChannel    5000000               311 ns/op
    BenchmarkLargeBufferedChannel    5000000               321 ns/op
    BenchmarkEndpointFastHashShort  100000000               14.8 ns/op
    BenchmarkEndpointFastHashLong   50000000                32.8 ns/op
    BenchmarkFlowFastHashShort      100000000               21.4 ns/op
    BenchmarkFlowFastHashLong       50000000                56.2 ns/op
    ok      code.google.com/p/gopacket      41.145s
    warning: building out-of-date packages:
            code.google.com/p/gopacket
    installing these packages with 'go test -i' will speed future tests.
    
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.06 ns/op
    BenchmarkLayerClassMapContains  500000000                4.07 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               959 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1508 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2343 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2625 ns/op
    BenchmarkDefault         1000000              3021 ns/op
    BenchmarkLazy    1000000              1240 ns/op
    BenchmarkNoCopy  1000000              2265 ns/op
    BenchmarkLazyNoCopy      5000000               519 ns/op
    BenchmarkKnownStack     10000000               189 ns/op
    BenchmarkDecodingLayerParserNoPanic     10000000               244 ns/op
    BenchmarkDecodingLayerParserPanic        5000000               320 ns/op
    BenchmarkAlloc  50000000                30.8 ns/op
    BenchmarkFlow   20000000               107 ns/op
    BenchmarkEndpoints      50000000                49.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.7 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.86 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.40 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.72 ns/op
    BenchmarkFmtVerboseString          20000             87936 ns/op
    BenchmarkPacketString       5000            768024 ns/op
    BenchmarkPacketDumpString           5000            772262 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1544 ns/op
    ok      code.google.com/p/gopacket/layers       66.752s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.009078593s, 815ns per packet
    Time to read packet data into memory from file: 1.009115383s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.038511059s, 1.647us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.938106467s, 1.566us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.969635072s, 1.592us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.985972506s, 1.605us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.992077582s, 1.61us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.999381089s, 1.616us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.997518271s, 1.614us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.002283508s, 1.618us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.004862252s, 1.62us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.038938878s, 1.648us per packet

commit 1ef75ddc7347d6c2d149b1173a9ff2c4c72db1f5
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 11 16:14:35 2013 -0600

    Added license.

commit c44413b83cfb862042c7d32fd0343c0f98f77dec
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jun 11 16:14:11 2013 -0600

    Random documentation, bug fixes, licensing.

commit 6e5230344bddbf41909e4f95c6dc9ce448ac4d68
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 10 10:28:51 2013 -0600

    Gender neutrality in comments.

commit f2b68b2547868a6e06dfe14a53831b5bd15ce67b
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jun 9 23:24:39 2013 -0600

    Split up reader into its own subpackage.

commit 3e056941e37cdbf1a44913784e7d7084ca18d1e0
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jun 9 23:02:41 2013 -0600

    reader test, docs.

commit 6f5d1f5da0beeb11201369431cdb8ab2a5590668
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Jun 8 20:09:38 2013 -0600

    Random stuff.

commit e7d81066a1d39d24dfa08ba5d3170536e9067db7
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 16:47:39 2013 -0600

    More documentation and cleanup.

commit 4e67f4f840a43fe9e119eb10923437c8b2ae0a38
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 12:43:17 2013 -0600

    Rename stackparser file, since it's no longer called StackParser.

commit 47d3b73299769ea834da19efed0dc0d83c453c04
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 12:29:08 2013 -0600

    Lots of documentation for the DecodingLayers interface.

commit a4cf1fc03f6ee30ad7e99518bda89f87ee1ec98a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 11:42:39 2013 -0600

    Add documentation and expose max endpoint size for users.

commit 3ba4a2b8c2c1e86ececf5be19287e15939f1dc93
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 11:24:53 2013 -0600

    BENCH Fix test to handle new flow type.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      500000000                4.04 ns/op
    BenchmarkNilMapLookup   1000000000               2.93 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.82 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                34.4 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                3.98 ns/op
    BenchmarkUnlockOSThread 500000000                4.50 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.27 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                83.0 ns/op
    BenchmarkUnbufferedChannel      10000000               259 ns/op
    BenchmarkSmallBufferedChannel    5000000               307 ns/op
    BenchmarkLargeBufferedChannel    5000000               313 ns/op
    BenchmarkEndpointFastHashShort  100000000               14.8 ns/op
    BenchmarkEndpointFastHashLong   50000000                32.4 ns/op
    BenchmarkFlowFastHashShort      100000000               21.5 ns/op
    BenchmarkFlowFastHashLong       50000000                60.6 ns/op
    ok      code.google.com/p/gopacket      41.045s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.06 ns/op
    BenchmarkLayerClassMapContains  500000000                4.03 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               960 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1500 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2329 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2541 ns/op
    BenchmarkDefault         1000000              2940 ns/op
    BenchmarkLazy    1000000              1221 ns/op
    BenchmarkNoCopy  1000000              2209 ns/op
    BenchmarkLazyNoCopy      5000000               514 ns/op
    BenchmarkKnownStack     10000000               188 ns/op
    BenchmarkDecodingLayerParserNoPanic     10000000               244 ns/op
    BenchmarkDecodingLayerParserPanic        5000000               327 ns/op
    BenchmarkAlloc  50000000                30.7 ns/op
    BenchmarkFlow   20000000               108 ns/op
    BenchmarkEndpoints      50000000                49.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.79 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.33 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.4 ns/op
    BenchmarkFmtVerboseString          20000             90969 ns/op
    BenchmarkPacketString       5000            764031 ns/op
    BenchmarkPacketDumpString           5000            780179 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1532 ns/op
    ok      code.google.com/p/gopacket/layers       64.582s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.160333158s, 937ns per packet
    Time to read packet data into memory from file: 1.160359788s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.063861137s, 1.668us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.954699248s, 1.58us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.014319991s, 1.628us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.060979891s, 1.665us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.088052635s, 1.687us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.993345238s, 1.611us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.995939032s, 1.613us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.99137326s, 1.609us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.988486506s, 1.607us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.990529701s, 1.609us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT d0ae2531bb178b5d4dac0798404a20375159efe4
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.68 ns/op
    BenchmarkMapLookup      500000000                4.23 ns/op
    BenchmarkNilMapLookup   500000000                3.04 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.83 ns/op
    BenchmarkArrayLookup    2000000000               0.55 ns/op
    BenchmarkTypeToInterface1       2000000000               0.82 ns/op
    BenchmarkTypeToInterface2       2000000000               0.56 ns/op
    BenchmarkCheckEthernetPrefix    50000000                36.2 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                3.99 ns/op
    BenchmarkUnlockOSThread 500000000                4.52 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.29 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                83.2 ns/op
    BenchmarkUnbufferedChannel      10000000               256 ns/op
    BenchmarkSmallBufferedChannel    5000000               306 ns/op
    BenchmarkLargeBufferedChannel    5000000               306 ns/op
    BenchmarkEndpointFastHashShort  100000000               12.0 ns/op
    BenchmarkEndpointFastHashLong   100000000               27.3 ns/op
    BenchmarkFlowFastHashShort      100000000               21.8 ns/op
    BenchmarkFlowFastHashLong       50000000                52.7 ns/op
    ok      code.google.com/p/gopacket      40.567s
    warning: building out-of-date packages:
            code.google.com/p/gopacket
    installing these packages with 'go test -i' will speed future tests.
    
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.07 ns/op
    BenchmarkLayerClassMapContains  500000000                4.03 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               955 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1508 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2343 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2556 ns/op
    BenchmarkDefault         1000000              2926 ns/op
    BenchmarkLazy    1000000              1214 ns/op
    BenchmarkNoCopy  1000000              2220 ns/op
    BenchmarkLazyNoCopy      5000000               512 ns/op
    BenchmarkKnownStack     10000000               191 ns/op
    BenchmarkDecodingLayerParserNoPanic     10000000               242 ns/op
    BenchmarkDecodingLayerParserPanic        5000000               325 ns/op
    BenchmarkAlloc  50000000                30.8 ns/op
    BenchmarkFlow   10000000               202 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.82 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                5.97 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.66 ns/op
    BenchmarkFmtVerboseString          20000             84673 ns/op
    BenchmarkPacketString       5000            771519 ns/op
    BenchmarkPacketDumpString           5000            774298 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1526 ns/op
    ok      code.google.com/p/gopacket/layers       66.316s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 987.259617ms, 798ns per packet
    Time to read packet data into memory from file: 987.280908ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.011707822s, 1.626us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.941242349s, 1.569us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.996780919s, 1.614us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.000960921s, 1.617us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.010349305s, 1.625us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.005513567s, 1.621us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.001302312s, 1.617us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.998222382s, 1.615us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.999744657s, 1.616us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.999193474s, 1.616us per packet

commit 48355395c260e780f1edea64f361e20cf366b4e7
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 11:02:02 2013 -0600

    Use byte array for flows instead of string.

commit d0ae2531bb178b5d4dac0798404a20375159efe4
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jun 7 09:18:53 2013 -0600

    BENCH Add FastHash, fix gc benchmark.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.44 ns/op
    BenchmarkMapLookup      500000000                4.00 ns/op
    BenchmarkNilMapLookup   1000000000               2.92 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.79 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                34.3 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                3.97 ns/op
    BenchmarkUnlockOSThread 500000000                4.51 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.28 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                83.0 ns/op
    BenchmarkUnbufferedChannel      10000000               256 ns/op
    BenchmarkSmallBufferedChannel    5000000               306 ns/op
    BenchmarkLargeBufferedChannel    5000000               305 ns/op
    BenchmarkEndpointFastHashShort  100000000               12.0 ns/op
    BenchmarkEndpointFastHashLong   100000000               27.3 ns/op
    BenchmarkFlowFastHashShort      100000000               22.1 ns/op
    BenchmarkFlowFastHashLong       50000000                52.5 ns/op
    ok      code.google.com/p/gopacket      41.302s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.06 ns/op
    BenchmarkLayerClassMapContains  500000000                4.05 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               954 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1506 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2343 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2558 ns/op
    BenchmarkDefault         1000000              2950 ns/op
    BenchmarkLazy    1000000              1217 ns/op
    BenchmarkNoCopy  1000000              2242 ns/op
    BenchmarkLazyNoCopy      5000000               512 ns/op
    BenchmarkKnownStack     10000000               190 ns/op
    BenchmarkDecodingLayerParserNoPanic     10000000               245 ns/op
    BenchmarkDecodingLayerParserPanic        5000000               351 ns/op
    BenchmarkAlloc  50000000                32.2 ns/op
    BenchmarkFlow   10000000               212 ns/op
    BenchmarkEndpoints      50000000                29.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                36.0 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.83 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.07 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                6.50 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.71 ns/op
    BenchmarkFmtVerboseString          20000             85391 ns/op
    BenchmarkPacketString       5000            790493 ns/op
    BenchmarkPacketDumpString           5000            780113 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1537 ns/op
    ok      code.google.com/p/gopacket/layers       64.148s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 994.262634ms, 803ns per packet
    Time to read packet data into memory from file: 994.285743ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.010281716s, 1.624us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.993214664s, 1.611us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.979495891s, 1.6us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.991401976s, 1.609us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.013438799s, 1.627us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.017736793s, 1.63us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.252232092s, 1.82us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.058387451s, 2.472us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.06564514s, 1.669us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.019198872s, 1.632us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT e4016f9157844bd4f07ab0f750683b2e3270ddf4
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.54 ns/op
    BenchmarkMapLookup      500000000                4.01 ns/op
    BenchmarkNilMapLookup   1000000000               2.92 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                34.4 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.03 ns/op
    BenchmarkUnlockOSThread 500000000                4.57 ns/op
    BenchmarkLockUnlockOSThread     200000000                9.44 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                83.4 ns/op
    BenchmarkUnbufferedChannel      10000000               249 ns/op
    BenchmarkSmallBufferedChannel   10000000               297 ns/op
    BenchmarkLargeBufferedChannel    5000000               300 ns/op
    ok      code.google.com/p/gopacket      33.948s
    warning: building out-of-date packages:
            code.google.com/p/gopacket
    installing these packages with 'go test -i' will speed future tests.
    
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.08 ns/op
    BenchmarkLayerClassMapContains  500000000                4.05 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               962 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1518 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2377 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2595 ns/op
    BenchmarkDefault         1000000              2932 ns/op
    BenchmarkLazy    1000000              1225 ns/op
    BenchmarkNoCopy  1000000              2226 ns/op
    BenchmarkLazyNoCopy      5000000               517 ns/op
    BenchmarkKnownStack     10000000               192 ns/op
    BenchmarkDecodingLayerParserNoPanic     10000000               242 ns/op
    BenchmarkDecodingLayerParserPanic        5000000               328 ns/op
    BenchmarkAlloc  50000000                30.7 ns/op
    BenchmarkFlow   10000000               203 ns/op
    BenchmarkEndpoints      100000000               28.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                35.2 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.80 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.00 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.70 ns/op
    BenchmarkFmtVerboseString          20000             87091 ns/op
    BenchmarkPacketString       5000            762317 ns/op
    BenchmarkPacketDumpString           5000            771945 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1540 ns/op
    ok      code.google.com/p/gopacket/layers       66.653s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 993.979826ms, 803ns per packet
    Time to read packet data into memory from file: 994.004688ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.980838951s, 1.601us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.925663241s, 1.556us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.953986481s, 1.579us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.982594629s, 1.602us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.992571244s, 1.61us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.994545094s, 1.612us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.991159785s, 1.609us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.995934672s, 1.613us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.99914745s, 1.615us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.990623654s, 1.609us per packet

commit e87999751ade5b6beeef30cba56bb95240672930
Merge: 2bda28e 0dcc1aa
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 6 14:16:57 2013 -0600

    Merge branch 'master' into decodestack

commit 0dcc1aa68f604dacb400019c7c689f68186b56f0
Merge: 24b1b92 30ef1d7
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 6 14:14:38 2013 -0600

    Merge branch 'showbase' of https://code.google.com/p/gopacket

commit 24b1b9208c567c6580955503274864559911592c
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 6 14:11:05 2013 -0600

    Make pcap handle safe for concurrent reads.

commit 2bda28eae3db0e02da44fd4965fd0d1cf3c6636a
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 6 14:09:31 2013 -0600

    Make ip6 a DecodingLayer for real.

commit 5505a96edcac0e499f38240a3f09be9e75b70a1e
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 6 13:35:55 2013 -0600

    Remove connection reuse, fix race condition with ConnectionPool.

commit ac837dd6bb7485adb4b461bbf3a202e1ad20e386
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jun 6 11:29:53 2013 -0600

    A small amount of refactoring and documentation changes, some other random
    changes.

commit c2c0a63d191b9d9b4223f8f3b1f94a1da3a14ed8
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 3 14:00:25 2013 -0600

    Random changes.

commit e4016f9157844bd4f07ab0f750683b2e3270ddf4
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 3 10:46:44 2013 -0600

    BENCH Modify stack parser to auto-truncate decoded layers.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkLayerClassSliceContains        testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  2000000000               1.08 ns/op
    BenchmarkLayerClassMapContains  500000000                3.49 ns/op
    BenchmarkMapLookup      500000000                4.11 ns/op
    BenchmarkLazyNoCopyEthLayer     500000000                4.06 ns/op
    BenchmarkNilMapLookup    2000000               973 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1551 ns/op
    BenchmarkLazyNoCopyTCPLayer     1000000000               2.99 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.81 ns/op
    BenchmarkArrayLookup     1000000              2383 ns/op
    BenchmarkLazyNoCopyAllLayers    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.82 ns/op
    BenchmarkTypeToInterface2        1000000              2622 ns/op
    BenchmarkDefault        2000000000               0.54 ns/op
    BenchmarkCheckEthernetPrefix    50000000                46.2 ns/op
    BenchmarkPassDecodeOptionsByValue        1000000              2952 ns/op
    BenchmarkLazy   2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread    1000000              1223 ns/op
    BenchmarkNoCopy 500000000                4.07 ns/op
    BenchmarkUnlockOSThread  1000000              2239 ns/op
    BenchmarkLazyNoCopy     500000000                4.60 ns/op
    BenchmarkLockUnlockOSThread      5000000               518 ns/op
    BenchmarkKnownStack     10000000               190 ns/op
    BenchmarkDecodingLayerParserNoPanic     200000000                9.36 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                84.5 ns/op
    BenchmarkUnbufferedChannel      10000000               244 ns/op
    BenchmarkDecodingLayerParserPanic       10000000               253 ns/op
    BenchmarkSmallBufferedChannel    5000000               326 ns/op
    BenchmarkAlloc   5000000               307 ns/op
    BenchmarkLargeBufferedChannel   50000000                31.4 ns/op
    BenchmarkFlow    5000000               307 ns/op
    ok      code.google.com/p/gopacket      33.443s
    ?       code.google.com/p/gopacket/dumpcommand  [no test files]
    10000000               203 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                34.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.80 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                5.97 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.66 ns/op
    BenchmarkFmtVerboseString          20000             88015 ns/op
    BenchmarkPacketString       5000            781238 ns/op
    BenchmarkPacketDumpString           5000            776198 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1621 ns/op
    ok      code.google.com/p/gopacket/layers       66.911s
    PASS
    ok      code.google.com/p/gopacket/pcap 0.501s
    ?       code.google.com/p/gopacket/pcap/gopacket_benchmark      [no test files]
    ?       code.google.com/p/gopacket/pcap/pcapdump        [no test files]
    ?       code.google.com/p/gopacket/pfring       [no test files]
    ?       code.google.com/p/gopacket/pfring/pfdump        [no test files]
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.134062986s, 916ns per packet
    Time to read packet data into memory from file: 1.134089761s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.349584414s, 1.899us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.262495541s, 1.828us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.304082321s, 1.862us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.326493341s, 1.88us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.341278257s, 1.892us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.993392277s, 1.611us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.990123934s, 1.608us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.023410652s, 1.635us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.019014133s, 1.632us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.093066683s, 1.691us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 987e6af06deb00e6461782a5d910859081bd6a96
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.71 ns/op
    BenchmarkMapLookup      PASS
    BenchmarkLayerClassSliceContains        500000000                4.64 ns/op
    BenchmarkNilMapLookup   2000000000               1.40 ns/op
    BenchmarkLayerClassMapContains  500000000                3.08 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.82 ns/op
    BenchmarkArrayLookup    500000000                4.20 ns/op
    BenchmarkLazyNoCopyEthLayer     2000000000               0.56 ns/op
    BenchmarkTypeToInterface1       2000000000               0.86 ns/op
    BenchmarkTypeToInterface2        2000000              1024 ns/op
    BenchmarkLazyNoCopyIPLayer      2000000000               0.56 ns/op
    BenchmarkCheckEthernetPrefix     1000000              1606 ns/op
    BenchmarkLazyNoCopyTCPLayer     50000000                39.0 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.28 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.28 ns/op
    BenchmarkLockOSThread    1000000              2486 ns/op
    BenchmarkLazyNoCopyAllLayers    500000000                4.21 ns/op
    BenchmarkUnlockOSThread  1000000              2692 ns/op
    BenchmarkDefault        500000000                4.78 ns/op
    BenchmarkLockUnlockOSThread      1000000              3290 ns/op
    BenchmarkLazy   100000000               11.1 ns/op
    BenchmarkLockDeferUnlockOSThread         1000000              1279 ns/op
    BenchmarkNoCopy 20000000                88.6 ns/op
    ok      code.google.com/p/gopacket      24.460s
    ?       code.google.com/p/gopacket/dumpcommand  [no test files]
     1000000              2300 ns/op
    BenchmarkLazyNoCopy      5000000               543 ns/op
    BenchmarkKnownStack     10000000               231 ns/op
    BenchmarkStackParserNoPanic     10000000               285 ns/op
    BenchmarkStackParserPanic        5000000               382 ns/op
    BenchmarkAlloc  50000000                36.4 ns/op
    BenchmarkFlow   10000000               248 ns/op
    BenchmarkEndpoints      50000000                35.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               17.1 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                62.3 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.37 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.27 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.34 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               11.4 ns/op
    BenchmarkFmtVerboseString          10000            102197 ns/op
    BenchmarkPacketString      50000             72960 ns/op
    BenchmarkPacketDumpString          50000             75030 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1819 ns/op
    ok      code.google.com/p/gopacket/layers       69.827s
    PASS
    ok      code.google.com/p/gopacket/pcap 0.336s
    ?       code.google.com/p/gopacket/pcap/gopacket_benchmark      [no test files]
    ?       code.google.com/p/gopacket/pcap/pcapdump        [no test files]
    ?       code.google.com/p/gopacket/pfring       [no test files]
    ?       code.google.com/p/gopacket/pfring/pfdump        [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.188409504s, 960ns per packet
    Time to read packet data into memory from file: 1.188442168s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.429458039s, 1.963us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.282314593s, 1.844us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.323173203s, 1.877us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.346766504s, 1.896us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.355800841s, 1.904us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.359952008s, 1.907us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.359039139s, 1.906us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.359058726s, 1.906us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.359986044s, 1.907us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.360101827s, 1.907us per packet

commit 7c7c25c5d916a75456b64a1aee5ebce54f5fffd5
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jun 3 10:40:04 2013 -0600

    slice->map for known layer parser.
    
    Switch to a map-based parser implementation.  This allows for a much broader
    ability to handle disparate packet stacks without encoding branches manually.
    In other words, if you want to encode IPv4, IPv6, UDP, TCP, ICMP4/6 stacks, you
    can do it with one parser instead of creating N parser stacks to handle each
    case.

commit 18eeb56e19e603e2540ee726fb0b0aad49de8a7e
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 12:19:30 2013 -0600

    Update benchmarker to handle gopacket TCP.

commit f834417f233861ad848466c017396e97f2cbd0b9
Merge: 0effcd1 917cdba
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 11:37:28 2013 -0600

    Merge branch 'decodestack' of github.com:gconnell/gopacket into decodestack
    
    Conflicts:
            layers/dot1q.go

commit 6b1f257dda035a25715258138961e79b12ee1324
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 11:33:59 2013 -0600

    Switched to using gopacket objects.
    
    We now use gopacket.TCP and gopacket.Flow instead of home-grown
    objects.

commit 0effcd14c8559601abdc74bb21cdb77d3433eba8
Merge: 891df7b 30ef1d7
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 10:31:15 2013 -0600

    Merge branch 'showbase' into decodestack
    
    Conflicts:
            layers/ethernet.go
            layers/ip4.go
            layers/ip6.go
            layers/tcp.go
            layers/udp.go

commit 30ef1d7737bff6f9fa995990c9039f211bab8a9e
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 10:03:06 2013 -0600

    Add documentation, fix tests.
    
    Add documentation to BaseLayer, now that it's exported and visible.
    Fix tests affected by the changes in capitalization.

commit cd84992efea09e813a3b83ec39a744a61fce16ad
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 09:52:09 2013 -0600

    Export the BaseLayer for layers.
    
    Exports the BaseLayer within all layes, making it accessible for both
    reads and writes.  This makes testing easier, since now callers can set
    arbitrary contents/payloads for all layer types.  It will also be useful
    if we decide to allow packet byte generation from layers, again so that
    callers can set Payload/Contents and have that data reflected within
    their generated packet data.

commit 891df7bbf831bb50f64b3b2b12d1b3cd449ae864
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 30 09:40:31 2013 -0600

    Channel benchmarks.

commit 1bbeb4b08500cea486d04d540918792720f778c9
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 29 21:37:20 2013 -0600

    Large packet handling fixed, documentation.

commit def018fc2b6772eb03304be22ff38bc2de2e268f
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 29 20:27:53 2013 -0600

    Fix sequence number issue.

commit 50b47cd63328b325733014e403ac8bd042f6d189
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 29 16:56:51 2013 -0600

    Reader code in lib, multiple concurrent assemblers.
    
    Move reader code from benchmarker into actual library.  Refactro assembly code
    to allow multiple assemblers to run in parallel (each assembler isn't safe for
    concurrent access, but now multiple assemblers can update the same set of
    connections via concurrency-safe interaction with a ConnectionPool).

commit 917cdbac69c902416bfb7cb9e36597f525f52819
Merge: bb0548d 2abb120
Author: Graeme Connell <gconnell@google.com>
Date:   Tue May 28 17:17:46 2013 -0600

    Merge remote-tracking branch 'origin/master' into decodestack

commit 2abb1208d7f75c03d90e37e5a03df72af56ea709
Author: Graeme Connell <gconnell@google.com>
Date:   Tue May 28 17:17:03 2013 -0600

    Bugfix: invlaid slice layer class.

commit bb0548d2a3b60d7493c15decd9c0ed0d73c256e8
Author: Graeme Connell <gconnell@google.com>
Date:   Tue May 28 17:15:25 2013 -0600

    Dot1q stack parsing.

commit bde11363e291b4127ebced95412f7b26b3026924
Author: Graeme Connell <gconnell@google.com>
Date:   Tue May 28 17:14:26 2013 -0600

    Lots of fun.

commit 662c306e4d27a812de5de413eb019dda62778fb4
Author: Graeme Connell <gconnell@google.com>
Date:   Tue May 28 11:39:06 2013 -0600

    Lots of improvements and bugfixes, added benchmark tool.

commit 4169a2c184bc752c2f71368a3b631e95cae78c74
Author: Graeme Connell <gconnell@google.com>
Date:   Mon May 27 22:48:39 2013 -0600

    Start.

commit 58ab5e8e7851ef8ec2562b2832091c4eff98a8c8
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon May 27 14:16:23 2013 -0700

    Initial commit

commit 987e6af06deb00e6461782a5d910859081bd6a96
Author: Graeme Connell <gconnell@google.com>
Date:   Fri May 24 17:57:53 2013 -0600

    BENCH Much more work on fast parsing of known stacks.
    
    The interfaces for known stack parsing (DecodingLayer, StackParser, etc...) are
    getting there, still might be some work to do but so far things are promising.
    
    A parser stack can now check whether parsing can continue based on
    CanDecode/NextLayerType interaction, which allows for powerful caller-written
    switch handling of half-decoded stacks.  I still feel like there's some more
    work to be done on easily defined parse trees, but a single parser stack is fast
    enough folks might just be able to define a few of those and call them.  Now
    that stacks are dialed in, I can focus on trees more later, if necessary.
    
    The NextLayerType idea is interesting, and required adding metadata to enums to
    define the layer type each enum equates to... for some there aren't any, but for
    most there's a good analog.  Generally, many enums map to one layer type, not
    the other way around.  That's a good thing, because otherwise this idea wouldn't
    work ;).
    
    Particularly interesting is the IPDecodingLayer, a DecodingLayer (but NOT a
    Layer) designed specifically for StackParser which decodes any IPv4, v6, or
    v6-with-extensions bytes in a useful, usable manner.  The fact that this is
    possible is pretty exciting.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkLayerClassSliceContains        testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  2000000000               1.36 ns/op
    BenchmarkLayerClassMapContains  500000000                3.58 ns/op
    BenchmarkMapLookup      500000000                4.26 ns/op
    BenchmarkLazyNoCopyEthLayer     500000000                4.47 ns/op
    BenchmarkNilMapLookup    2000000               986 ns/op
    BenchmarkLazyNoCopyIPLayer      1000000000               3.03 ns/op
    BenchmarkNilMapLookupWithNilCheck        1000000              1532 ns/op
    BenchmarkLazyNoCopyTCPLayer     2000000000               0.82 ns/op
    BenchmarkArrayLookup     1000000              2381 ns/op
    BenchmarkLazyNoCopyAllLayers    2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.84 ns/op
    BenchmarkTypeToInterface2        1000000              2636 ns/op
    BenchmarkDefault        2000000000               0.54 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.2 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer      1000000              2986 ns/op
    BenchmarkLazy   2000000000               0.27 ns/op
    BenchmarkLockOSThread    1000000              1226 ns/op
    BenchmarkNoCopy 500000000                4.12 ns/op
    BenchmarkUnlockOSThread  1000000              2294 ns/op
    BenchmarkLazyNoCopy     500000000                4.64 ns/op
    BenchmarkLockUnlockOSThread      5000000               528 ns/op
    BenchmarkKnownStack     200000000                9.69 ns/op
    BenchmarkLockDeferUnlockOSThread        10000000               202 ns/op
    BenchmarkStackParserNoPanic     20000000                86.9 ns/op
    ok      code.google.com/p/gopacket      27.148s
    ?       code.google.com/p/gopacket/dumpcommand  [no test files]
    10000000               250 ns/op
    BenchmarkStackParserPanic        5000000               323 ns/op
    BenchmarkAlloc  50000000                30.8 ns/op
    BenchmarkFlow   10000000               249 ns/op
    BenchmarkEndpoints      50000000                33.5 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                62.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.37 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.26 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.13 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               11.4 ns/op
    BenchmarkFmtVerboseString          10000            102252 ns/op
    BenchmarkPacketString      50000             74470 ns/op
    BenchmarkPacketDumpString          50000             73784 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1809 ns/op
    ok      code.google.com/p/gopacket/layers       66.993s
    PASS
    ok      code.google.com/p/gopacket/pcap 0.335s
    ?       code.google.com/p/gopacket/pcap/gopacket_benchmark      [no test files]
    ?       code.google.com/p/gopacket/pcap/pcapdump        [no test files]
    ?       code.google.com/p/gopacket/pfring       [no test files]
    ?       code.google.com/p/gopacket/pfring/pfdump        [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.120914805s, 906ns per packet
    Time to read packet data into memory from file: 1.120941379s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.357554039s, 1.905us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.284852805s, 1.846us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.326714267s, 1.88us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.35370577s, 1.902us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.427788013s, 1.962us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.395019689s, 1.935us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.398253097s, 1.938us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.368571297s, 1.914us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.406238045s, 1.945us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.371065465s, 1.916us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT be7da4a73f828fa0b4147789d9c26a5785f2b1fc
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                4.32 ns/op
    BenchmarkMapLookup      PASS
    BenchmarkLayerClassSliceContains        500000000                4.76 ns/op
    BenchmarkNilMapLookup   2000000000               1.57 ns/op
    BenchmarkLayerClassMapContains  500000000                3.46 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.95 ns/op
    BenchmarkArrayLookup    500000000                4.87 ns/op
    BenchmarkLazyNoCopyEthLayer     2000000000               0.63 ns/op
    BenchmarkTypeToInterface1        1000000              1143 ns/op
    BenchmarkLazyNoCopyIPLayer      2000000000               0.94 ns/op
    BenchmarkTypeToInterface2        1000000              1831 ns/op
    BenchmarkLazyNoCopyTCPLayer     2000000000               0.63 ns/op
    BenchmarkCheckEthernetPrefix     1000000              2861 ns/op
    BenchmarkLazyNoCopyAllLayers    50000000                40.6 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.31 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.31 ns/op
    BenchmarkLockOSThread    1000000              3086 ns/op
    BenchmarkDefault        500000000                4.73 ns/op
    BenchmarkUnlockOSThread  1000000              3575 ns/op
    BenchmarkLazy   500000000                5.35 ns/op
    BenchmarkLockUnlockOSThread      1000000              1475 ns/op
    BenchmarkNoCopy 100000000               11.0 ns/op
    BenchmarkLockDeferUnlockOSThread        20000000                98.7 ns/op
    ok      code.google.com/p/gopacket      26.913s
    ?       code.google.com/p/gopacket/dumpcommand  [no test files]
     1000000              2758 ns/op
    BenchmarkLazyNoCopy      5000000               630 ns/op
    BenchmarkKnownStack     10000000               215 ns/op
    BenchmarkAlloc  50000000                34.3 ns/op
    BenchmarkFlow   10000000               242 ns/op
    BenchmarkEndpoints      50000000                33.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                60.9 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.34 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.26 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.06 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               11.5 ns/op
    BenchmarkFmtVerboseString          20000            101920 ns/op
    BenchmarkPacketString      50000             72753 ns/op
    BenchmarkPacketDumpString          50000             72749 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1979 ns/op
    ok      code.google.com/p/gopacket/layers       66.720s
    PASS
    ok      code.google.com/p/gopacket/pcap 0.326s
    ?       code.google.com/p/gopacket/pcap/gopacket_benchmark      [no test files]
    ?       code.google.com/p/gopacket/pcap/pcapdump        [no test files]
    ?       code.google.com/p/gopacket/pfring       [no test files]
    ?       code.google.com/p/gopacket/pfring/pfdump        [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.120275404s, 905ns per packet
    Time to read packet data into memory from file: 1.120302807s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.375609977s, 1.92us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.294880011s, 1.855us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.337591548s, 1.889us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.355679605s, 1.904us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.364900378s, 1.911us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.3854524s, 1.928us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.53662371s, 2.05us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.395946726s, 1.936us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.367700866s, 1.913us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.418672829s, 1.955us per packet

commit be7da4a73f828fa0b4147789d9c26a5785f2b1fc
Author: Graeme Connell <gconnell@google.com>
Date:   Fri May 24 11:40:15 2013 -0600

    BENCH Test implementation of known-stack decoding.
    
    Often, when decoding packets, the caller knows which packet stacks they care
    about (the network is an IP network over ethernet, and the caller only cares
    about TCP).  The current decode methods suffer greatly from the performance hits
    caused by allocating memory, but if the caller knows the layers involved, they
    should be able to preallocate those layers.
    
    This is a first pass at allowing this type of behavior to occur, with minimal
    code changes and full backwards compatibility.  It introduces the concept of a
    SelfDecoder, an object which can decode packet data into itself.  For layers
    where this is feasible, we override the decode function to simply call this
    method, and push the decode logic in there.  So far, it's proven relatively
    simple and straight-forward for most layers we've tried.
    
    The results of this are great.  A NoCopy eager decode of an
    Ethernet/IPv4/TCP stack used to take 2620ns on my test machine, while the
    known-stack implementation takes 178ns, a ~15x speedup (IE; it takes 6.7% as
    long to decode!).
    
    This high speed opens up a wide variety of options previously unavailable, while
    still providing a lot of power and comprehensive decoding.  There's much work to
    do here, including the ability to define parse trees to handle different packet
    types, but these preliminary results show great benefits, so we'll definitely
    proceed with this idea further.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.1 linux/amd64
    
    TEST BENCHMARKS
    PASS
    BenchmarkLayerClassSliceContains        testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  2000000000               1.35 ns/op
    BenchmarkLayerClassMapContains  500000000                3.48 ns/op
    BenchmarkMapLookup      500000000                4.16 ns/op
    BenchmarkLazyNoCopyEthLayer     500000000                4.05 ns/op
    BenchmarkNilMapLookup   500000000                3.01 ns/op
    BenchmarkNilMapLookupWithNilCheck        2000000              1001 ns/op
    BenchmarkLazyNoCopyIPLayer      2000000000               0.81 ns/op
    BenchmarkArrayLookup     1000000              1556 ns/op
    BenchmarkLazyNoCopyTCPLayer     2000000000               0.54 ns/op
    BenchmarkTypeToInterface1       2000000000               0.81 ns/op
    BenchmarkTypeToInterface2        1000000              2417 ns/op
    BenchmarkLazyNoCopyAllLayers    2000000000               0.54 ns/op
    BenchmarkCheckEthernetPrefix    50000000                34.7 ns/op
    BenchmarkPassDecodeOptionsByValue        1000000              2620 ns/op
    BenchmarkDefault        2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    BenchmarkLockOSThread   500000000                4.12 ns/op
    BenchmarkUnlockOSThread  1000000              3271 ns/op
    BenchmarkLazy    1000000              1261 ns/op
    BenchmarkNoCopy 500000000                4.57 ns/op
    BenchmarkLockUnlockOSThread      1000000              2307 ns/op
    BenchmarkLazyNoCopy     200000000                9.52 ns/op
    BenchmarkLockDeferUnlockOSThread         5000000               540 ns/op
    BenchmarkKnownStack     20000000                84.3 ns/op
    ok      code.google.com/p/gopacket      24.889s
    ?       code.google.com/p/gopacket/dumpcommand  [no test files]
    10000000               181 ns/op
    BenchmarkAlloc  100000000               28.8 ns/op
    BenchmarkFlow   10000000               203 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                51.4 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.81 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                5.95 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.65 ns/op
    BenchmarkFmtVerboseString          20000             85554 ns/op
    BenchmarkPacketString      50000             60911 ns/op
    BenchmarkPacketDumpString          50000             60748 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1823 ns/op
    ok      code.google.com/p/gopacket/layers       64.982s
    PASS
    ok      code.google.com/p/gopacket/pcap 0.299s
    ?       code.google.com/p/gopacket/pcap/gopacket_benchmark      [no test files]
    ?       code.google.com/p/gopacket/pcap/pcapdump        [no test files]
    ?       code.google.com/p/gopacket/pfring       [no test files]
    ?       code.google.com/p/gopacket/pfring/pfdump        [no test files]
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 948.177358ms, 766ns per packet
    Time to read packet data into memory from file: 948.202247ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.011650066s, 1.626us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.937478536s, 1.566us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.969980128s, 1.592us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.987582042s, 1.606us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.9979891s, 1.615us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.99918938s, 1.616us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.9980044s, 1.615us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.999865353s, 1.616us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.999195722s, 1.616us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.99959155s, 1.616us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 6fbd352eaa57d599d3e3fed197f0c4b0f8bda3c7
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS failed :(

commit 594258d11d47a16603119f7274aaf48b5f83abbf
Merge: 78fdb88 166c796
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 23 15:12:39 2013 -0600

    Merge branch 'contributing'

commit 78fdb88dc935f54412653b3cebb2d6da7bede5c7
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 23 15:11:17 2013 -0600

    Fix flow to print prettily.

commit 7bb3cea20ec0e15c4b6b13b44827e24308fa384e
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 22 09:36:26 2013 -0600

    Fixed gen.go for new mac format.
    
    The format of the site we pull mac prefixes from changed, so now lines all start
    with some whitespace.

commit 45d548af72767a6401fa3f928704c236461fffcd
Author: Graeme Connell <gconnell@google.com>
Date:   Wed May 22 09:29:42 2013 -0600

    Generated files, go fmt of doc.go.

commit 2194bf22d382c23f096bd16790b97f8c08728879
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Fri May 17 16:37:55 2013 +0100

    Added EnerygyWise TLV parsing

commit de0292b0e3a8f155a71cf7e1b600eefb157b8c76
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Fri May 17 14:31:24 2013 +0100

    General tidying & commenting

commit 22b83b5ed40f1b1f12d5d7f7443cf46e1973367d
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Thu May 16 19:29:09 2013 +0100

    Replaced byte arrays with slices

commit 166c796597299a4e2e68b8423ef3ced877c2f041
Author: Graeme Connell <gconnell@google.com>
Date:   Thu May 16 12:03:59 2013 -0600

    Add documentation on contributing to gopacket.

commit 50494ddbf8459fce3dca2b69af88579775649895
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Thu May 16 14:47:27 2013 +0100

    Added NortelDiscovery Layer type
    Fixed truncation bug in ethernet.go

commit be6b1c6b164a3a315ef43aef0ff4307818069b54
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Thu May 16 01:37:20 2013 +0100

    Added Cisco2 & Profinet decode

commit 528de0d62831596cf8b7f32f85b494718ffadb1a
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Wed May 15 23:00:09 2013 +0100

    Changed to "return error immediately" structure

commit 208c0171c90b9e97d9d50651c9f7140ffafea1c1
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Wed May 15 18:15:11 2013 +0100

    Added LLDP OUI Media parsing

commit 5e28aa87c5e8ba2192769e19851b11d751821c33
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Wed May 15 13:26:20 2013 +0100

    Fixed a few constants, & unified LinkAggregation

commit aa203cdf346ea605c39757a71fe24ed2dabb18cd
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Wed May 15 12:12:04 2013 +0100

    Added LinkLayerDiscoveryInfo layer
    Added LLDPInfo[OUI] subtypes, plus decode methods

commit cbd4850674072aae605a084189833a51b4283c9f
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Tue May 14 23:38:13 2013 +0100

    Added layer type CiscoDiscoveryInfo
    Replaced DecodeValues with layer handler

commit d4d5a05fe8b6a3a88925bc7531a47aa713211c9e
Author: Ben Daglish <bdaglish@restorepoint.com>
Date:   Tue May 14 15:37:08 2013 +0100

    Implemented pretty much all of gconnell@google.com's suggestions listed
    
    Added many more LLDP Decode Types

commit 6fdcd3ed6bbf3c8f23356a8b1ec752da1fe344cc
Author: Graeme Connell <gconnell@google.com>
Date:   Mon May 6 16:12:19 2013 -0600

    Ben Daglish's LLDP/CDP work.

commit ea4cbceb9b556e72fa50b4f53d41406fe7e4b823
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Feb 4 09:59:46 2013 -0800

    Fix Issue #1 : Add back in sockaddr_to_IP func.
    
    Was removed in winpcap commits.

commit a9bd872c6cba98a3180a37a21839d14de2f19f6d
Author: Cole Mickens <cole.mickens@gmail.com>
Date:   Mon Jan 28 09:30:45 2013 -0700

    winpcap amd64 fixes.
    
    This is a patch generated from my changes on top of your winpcap
    branch; I staged the files and generated the patch with: `git diff
    --cached`. It works in Windows 8 (amd64) with the WinPcap developer
    pack installed to C:\WdpPack
    
    I've also applied the patch on the winpcap branch in Ubuntu 12.10
    (amd64) and can confirm the tests in pcap still pass.
    
    This patch is released into the public domain, so do with it as you please.
    
    PS: There is some functionality in sockaddr_to_ip that is not
    implemented for Windows and IPv6. Go 1.1 seems to add the syscall
    reference for making it work, so it can be fixed in the future.

commit 12c91c60a5b2882eb2beec0aec0feb890d1a0b03
Author: Graeme Connell <gconnell@gogle.com>
Date:   Wed Jan 23 16:59:02 2013 -0700

    Attempt to support winpcap.
    
    Unfortunately, I don't have a windows box to check this, but this manual
    merge from github.com/colemickens/gopcap is an attempt to support
    WinPCAP.

commit c936c4eebed4b879c9f355aeefab15713279fd75
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 24 11:52:03 2013 -0700

    Fix IP4 option overrun, added layer type counts.
    
    Added layer type counting to dump commands, so fully decoded packets will have
    their layer types counted, and results will appear in debug output (every 1000
    packets).
    
    Modified IPv4 to better handle the case where an IPv4 option length is invalid
    and would run into the TCP packet's data.

commit eaee4fcfbf06a8673801f7e2a9605a2da317cc6b
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 24 11:12:51 2013 -0700

    Added tests, RFC 4861 ICMPv6 types.
    
    Added tests for ICMPv6, IPv6, and UDP decoding, added in ICMPv6 types for
    neighbor discovery as detailed in RFC 4861, and re-ran mac/port generation.

commit 7445adfdcf570bd7227fd26c95734b7b21b619f0
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 23 12:05:25 2013 -0700

    Add link from child packages up to gopacket.

commit d1a7c46cd5b2ed3700319350b50045a6232dc22a
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 23 08:45:04 2013 -0700

    Fix imports to use public repo.

commit 8776dcaaecb88cf40d30d04be6b85cf7c2979423
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 16 11:31:52 2013 -0700

    Documentation fixes/additions.

commit 50c1d11cc878b96f69bdfdb2d561e5137ab9aeed
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 16 08:58:08 2013 -0700

    Add lazy option back to both tcpdump commands.

commit db22cc085afa50a6c935a592088d7a0f9b9725b6
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 18:21:13 2013 -0700

    Fix dumpcommand dependency error.
    
    Dumpcommand was failing for pfring because layers was never imported (it's
    imported as a dependency in pcap), so no decoders ever filled in the
    DecodersByLayerName map.

commit 78aa45b6142ef4b569aadfdda384bfb90937545e
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 18:03:10 2013 -0700

    Fix main function, fix gc to build correctly.

commit 6fbd352eaa57d599d3e3fed197f0c4b0f8bda3c7
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 17:58:38 2013 -0700

    Generate new macs/ports, create new base benchmark.
    
    BENCHMARK_MARKER_DO_NOT_CHANGE

commit cc7ee3850e3dd83462c871205ce85247676ada7c
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 12:44:38 2013 -0700

    Binary refactoring.
    
    Moves a bunch of binaries into directories where they'll be built/installed
    correctly with 'go install XXX', and moved common tcpdump code into dumpcommand/
    subpackage, shared between pfdump and pcapdump.

commit ffc4aeb5ac188d93a13688b52d3f375e9fac4cc5
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 12:18:44 2013 -0700

    ICMP handling fixes.
    
    Better support for ICMPv4.  Added support for ICMPv6.  Renamed s/ICMP/ICMPv4/,
    to make sure folks know which IP version the ICMP protocol is part of.

commit e071f207deea48ce936c4974df6e8692508cfc23
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 10:59:54 2013 -0700

    Bugfix, printing.
    
    Fix bug where packet data source overrode truncated bit.
    Output #bytes for each layer.

commit cc417b617c73664988208e94d52e8043f9596687
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 10:26:06 2013 -0700

    BENCH Some fixes to IP4, TCP, and Ethernet.
    
    Simplicity + speed fixes related to checking for truncation and working with
    packet lengths.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.0.3
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.47 ns/op
    BenchmarkMapLookup      50000000                44.6 ns/op
    BenchmarkNilMapLookup   200000000                8.85 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               17.7 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.4 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    18.857s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.34 ns/op
    BenchmarkLayerClassMapContains  50000000                49.5 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               776 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1278 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2000 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2301 ns/op
    BenchmarkDefault         1000000              2370 ns/op
    BenchmarkLazy    2000000               846 ns/op
    BenchmarkNoCopy  1000000              1880 ns/op
    BenchmarkLazyNoCopy      5000000               367 ns/op
    BenchmarkAlloc  10000000               171 ns/op
    BenchmarkFlow   10000000               243 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                79.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.08 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.07 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.23 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.6 ns/op
    BenchmarkFmtVerboseString          10000            142168 ns/op
    BenchmarkPacketString      20000             79327 ns/op
    BenchmarkPacketDumpString          20000             84083 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1353 ns/op
    ok      github.com/gconnell/gopacket/layers     51.511s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.370s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.007141s, 814ns per packet
    Time to read packet data into memory from file: 1.007167s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.747079s, 3.028us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.364475s, 2.719us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 3.698744s, 2.989us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.469239s, 2.804us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.932153s, 2.37us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.849957s, 2.303us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.849961s, 2.303us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.85216s, 2.305us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.882112s, 2.329us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.856497s, 2.308us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 178bd785e7dab02d6e5d8c8164f44d7e6a0eb7bb
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.50 ns/op
    BenchmarkMapLookup      50000000                44.2 ns/op
    BenchmarkNilMapLookup   100000000               24.2 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               17.7 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                42.1 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    18.834s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                48.0 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               776 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1274 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1990 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2319 ns/op
    BenchmarkDefault         1000000              2422 ns/op
    BenchmarkLazy    2000000               855 ns/op
    BenchmarkNoCopy  1000000              1896 ns/op
    BenchmarkLazyNoCopy      5000000               369 ns/op
    BenchmarkAlloc  10000000               175 ns/op
    BenchmarkFlow   10000000               243 ns/op
    BenchmarkEndpoints      100000000               28.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.8 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                80.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.25 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.08 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.26 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.7 ns/op
    BenchmarkFmtVerboseString          10000            137886 ns/op
    BenchmarkPacketString      20000             80486 ns/op
    BenchmarkPacketDumpString          20000             84176 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1310 ns/op
    ok      github.com/gconnell/gopacket/layers     51.756s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.306s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 943.083ms, 762ns per packet
    Time to read packet data into memory from file: 943.111ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.323152s, 2.686us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.89059s, 2.336us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.904882s, 2.348us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.005879s, 2.429us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.984415s, 2.412us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.929552s, 2.368us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.952841s, 2.386us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.265138s, 2.639us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.951736s, 2.385us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.954586s, 2.388us per packet

commit 65de3dc5ba0a3288efd3de820cdd989b3dd9a7f0
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Jan 15 09:37:06 2013 -0700

    BENCH Modify ip4 to be slightly cleaner.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.0.3
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                8.85 ns/op
    BenchmarkMapLookup      50000000                52.1 ns/op
    BenchmarkNilMapLookup   50000000                27.2 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.94 ns/op
    BenchmarkArrayLookup    2000000000               0.94 ns/op
    BenchmarkTypeToInterface1       100000000               20.8 ns/op
    BenchmarkTypeToInterface2       2000000000               0.63 ns/op
    BenchmarkCheckEthernetPrefix    50000000                45.5 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.31 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.31 ns/op
    ok      github.com/gconnell/gopacket    17.854s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.57 ns/op
    BenchmarkLayerClassMapContains  50000000                56.0 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               909 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1494 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2340 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2748 ns/op
    BenchmarkDefault         1000000              2837 ns/op
    BenchmarkLazy    1000000              1003 ns/op
    BenchmarkNoCopy  1000000              2236 ns/op
    BenchmarkLazyNoCopy      5000000               435 ns/op
    BenchmarkAlloc  10000000               201 ns/op
    BenchmarkFlow   10000000               287 ns/op
    BenchmarkEndpoints      50000000                32.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               17.2 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                93.7 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.68 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.27 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.41 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               12.6 ns/op
    BenchmarkFmtVerboseString          10000            163440 ns/op
    BenchmarkPacketString      20000             95046 ns/op
    BenchmarkPacketDumpString          20000             93979 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1542 ns/op
    ok      github.com/gconnell/gopacket/layers     56.866s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.368s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 987.297ms, 798ns per packet
    Time to read packet data into memory from file: 987.323ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.438925s, 2.779us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.358177s, 2.714us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 3.351399s, 2.709us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.386012s, 2.737us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 3.342467s, 2.701us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 3.344022s, 2.703us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 3.340746s, 2.7us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.337726s, 2.697us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 3.34176s, 2.701us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 3.341208s, 2.7us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 2b4e1d36dbe328281ce75341953a357d729a281f
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.00 ns/op
    BenchmarkMapLookup      50000000                52.0 ns/op
    BenchmarkNilMapLookup   50000000                30.4 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.94 ns/op
    BenchmarkArrayLookup    2000000000               0.94 ns/op
    BenchmarkTypeToInterface1       100000000               21.9 ns/op
    BenchmarkTypeToInterface2       2000000000               0.63 ns/op
    BenchmarkCheckEthernetPrefix    50000000                45.9 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.31 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.31 ns/op
    ok      github.com/gconnell/gopacket    18.119s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.57 ns/op
    BenchmarkLayerClassMapContains  50000000                53.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               912 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1470 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2344 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2668 ns/op
    BenchmarkDefault         1000000              2784 ns/op
    BenchmarkLazy    1000000              1003 ns/op
    BenchmarkNoCopy  1000000              2192 ns/op
    BenchmarkLazyNoCopy      5000000               429 ns/op
    BenchmarkAlloc  10000000               202 ns/op
    BenchmarkFlow   10000000               284 ns/op
    BenchmarkEndpoints      50000000                32.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               17.2 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                94.3 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.65 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.26 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                7.34 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               12.5 ns/op
    BenchmarkFmtVerboseString          10000            160448 ns/op
    BenchmarkPacketString      20000             98023 ns/op
    BenchmarkPacketDumpString          20000             93390 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1525 ns/op
    ok      github.com/gconnell/gopacket/layers     56.392s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.359s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.01204s, 818ns per packet
    Time to read packet data into memory from file: 1.012066s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.672755s, 2.968us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.612632s, 2.92us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 3.576444s, 2.89us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.647913s, 2.948us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 3.593863s, 2.905us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 3.575249s, 2.889us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 3.574849s, 2.889us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.576076s, 2.89us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 3.57181s, 2.887us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 3.5718s, 2.887us per packet

commit 2c4040f1dab0f0a9c9103c14f1b1c421a8401cbf
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 14 10:59:34 2013 -0700

    BENCH Attempt to fix performance regression.
    
    Huge (~33%) performance regression caused by newstack/oldstack.  Hoping this
    fixes it.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.0.3
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.44 ns/op
    BenchmarkMapLookup      50000000                44.0 ns/op
    BenchmarkNilMapLookup   100000000               25.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               17.7 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    100000000               29.1 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    19.704s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                46.1 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               772 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1257 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1982 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2268 ns/op
    BenchmarkDefault         1000000              2369 ns/op
    BenchmarkLazy    2000000               844 ns/op
    BenchmarkNoCopy  1000000              1865 ns/op
    BenchmarkLazyNoCopy      5000000               361 ns/op
    BenchmarkAlloc  10000000               171 ns/op
    BenchmarkFlow   10000000               242 ns/op
    BenchmarkEndpoints      100000000               27.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                79.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.08 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.23 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.5 ns/op
    BenchmarkFmtVerboseString          10000            134730 ns/op
    BenchmarkPacketString      20000             82369 ns/op
    BenchmarkPacketDumpString          20000             78560 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1286 ns/op
    ok      github.com/gconnell/gopacket/layers     50.864s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.351s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 882.106ms, 713ns per packet
    Time to read packet data into memory from file: 882.128ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.118958s, 2.521us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.036144s, 2.454us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 3.01922s, 2.44us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.020585s, 2.441us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 3.068679s, 2.48us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 3.085841s, 2.494us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 3.079146s, 2.488us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.026808s, 2.446us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 3.021646s, 2.442us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 3.024712s, 2.444us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 89cf8589280a8c99345a89b3d6cb1e7b67b56f95
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.43 ns/op
    BenchmarkMapLookup      50000000                44.4 ns/op
    BenchmarkNilMapLookup   100000000               25.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               17.7 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                42.4 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    18.962s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                53.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               778 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1265 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1972 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2246 ns/op
    BenchmarkDefault         1000000              2348 ns/op
    BenchmarkLazy    2000000               847 ns/op
    BenchmarkNoCopy  1000000              1852 ns/op
    BenchmarkLazyNoCopy      5000000               369 ns/op
    BenchmarkAlloc  10000000               170 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                80.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.25 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.18 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.5 ns/op
    BenchmarkFmtVerboseString          10000            134227 ns/op
    BenchmarkPacketString      20000             78922 ns/op
    BenchmarkPacketDumpString          20000             84663 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1298 ns/op
    ok      github.com/gconnell/gopacket/layers     51.344s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.332s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.030751s, 833ns per packet
    Time to read packet data into memory from file: 1.030778s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.75719s, 3.037us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.663092s, 2.96us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 3.669478s, 2.966us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.661393s, 2.959us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 3.657232s, 2.956us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 3.657137s, 2.956us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 3.660198s, 2.958us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.656019s, 2.955us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 3.657243s, 2.956us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 3.661675s, 2.959us per packet

commit b60126e3d8b74041696c451036ed04e17386d5a1
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 14 10:30:10 2013 -0700

    BENCH Remove Truncated layer.
    
    The Truncated layer was overly complex and heavy-weight.  Replaced with a simple
    boolean bit.  Consolidated CaptureInfo and Trunctated into PacketMetadata.
    Rewrote some of p.String() to output packet metadata on first line.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.0.3
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                7.42 ns/op
    BenchmarkMapLookup      50000000                44.0 ns/op
    BenchmarkNilMapLookup   100000000               13.3 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.79 ns/op
    BenchmarkTypeToInterface1       100000000               17.7 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.0 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    15.280s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                45.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               779 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1266 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1971 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2249 ns/op
    BenchmarkDefault         1000000              2352 ns/op
    BenchmarkLazy    2000000               847 ns/op
    BenchmarkNoCopy  1000000              1859 ns/op
    BenchmarkLazyNoCopy      5000000               366 ns/op
    BenchmarkAlloc  10000000               171 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                80.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.24 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.18 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.5 ns/op
    BenchmarkFmtVerboseString          10000            133959 ns/op
    BenchmarkPacketString      20000             78489 ns/op
    BenchmarkPacketDumpString          20000             78423 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1300 ns/op
    ok      github.com/gconnell/gopacket/layers     50.764s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.303s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 845.604ms, 683ns per packet
    Time to read packet data into memory from file: 845.628ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.12251s, 2.524us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.04532s, 2.461us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 3.034458s, 2.452us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 3.036642s, 2.454us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 3.03186s, 2.45us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 3.033012s, 2.451us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 3.033596s, 2.452us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 3.033847s, 2.452us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 3.033818s, 2.452us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 3.036431s, 2.454us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 6ea4e88d339b00024367e73661e5ddfc68b886ba
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.43 ns/op
    BenchmarkMapLookup      50000000                48.9 ns/op
    BenchmarkNilMapLookup   200000000                8.00 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               17.8 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.2 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    18.742s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                45.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               771 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1258 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1979 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2278 ns/op
    BenchmarkDefault         1000000              2390 ns/op
    BenchmarkLazy    2000000               853 ns/op
    BenchmarkNoCopy  1000000              1866 ns/op
    BenchmarkLazyNoCopy      5000000               368 ns/op
    BenchmarkAlloc  10000000               171 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                79.0 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.09 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.39 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.6 ns/op
    BenchmarkFmtVerboseString          10000            137154 ns/op
    BenchmarkPacketString      20000             81736 ns/op
    BenchmarkPacketDumpString          20000             81711 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1314 ns/op
    ok      github.com/gconnell/gopacket/layers     51.128s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.303s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.128794s, 912ns per packet
    Time to read packet data into memory from file: 1.12882s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.369113s, 1.915us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.232856s, 1.804us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.227333s, 1.8us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.288981s, 1.85us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.23177s, 1.804us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.247945s, 1.817us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.233962s, 1.805us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.234282s, 1.806us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.234927s, 1.806us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.235575s, 1.807us per packet

commit a36381a0001fc53ac10c2042601a22484040e427
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 18:16:09 2013 -0700

    TCP slice out-of-bounds fixes.

commit 8db0e5be57f08e49939f2d64e3e82e8cb651f4f1
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 17:28:48 2013 -0700

    Changes to Truncated behavior.
    
    Make some changes to truncated so the layer is inserted early on in packet
    creation, not at the end.  This makes ErrorLayer() return Truncated, which is
    much more accurate, since the reason future DecodeFailures happen is often
    caused by truncation.

commit b4d6386d3e084a6fff7710e0a9d5554186aa1d69
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 16:46:22 2013 -0700

    Remove newline after LayerDump's hex dump.

commit 5142349433f67bacecddcf68c485f9e20093a232
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 16:43:27 2013 -0700

    Modify LayerDump to allow users to implement Dumping.

commit 6cadd70dc84e1653fbf07e3606ad9756a48bfd09
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 16:07:27 2013 -0700

    BENCH Benchmark+gen.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    Go version go version go1.0.3
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.42 ns/op
    BenchmarkMapLookup      50000000                44.0 ns/op
    BenchmarkNilMapLookup   200000000                8.00 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               18.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.2 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.26 ns/op
    ok      github.com/gconnell/gopacket    18.552s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.35 ns/op
    BenchmarkLayerClassMapContains  50000000                46.1 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               785 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1262 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2000 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2295 ns/op
    BenchmarkDefault         1000000              2369 ns/op
    BenchmarkLazy    2000000               846 ns/op
    BenchmarkNoCopy  1000000              1876 ns/op
    BenchmarkLazyNoCopy      5000000               365 ns/op
    BenchmarkAlloc  10000000               174 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                79.9 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.09 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.07 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.52 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.6 ns/op
    BenchmarkFmtVerboseString          10000            136547 ns/op
    BenchmarkPacketString      20000             88719 ns/op
    BenchmarkPacketDumpString          20000             81695 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1311 ns/op
    ok      github.com/gconnell/gopacket/layers     51.522s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.295s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.048691s, 847ns per packet
    Time to read packet data into memory from file: 1.048714s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.010744s, 1.625us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.994105s, 1.611us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.99472s, 1.612us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.912541s, 1.545us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.928806s, 1.559us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.886144s, 1.524us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.93417s, 1.563us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.914486s, 1.547us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.953783s, 1.579us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.899178s, 1.535us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 9982294a8d49c1ed893949d373d06eb5ea50d997
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.24 ns/op
    BenchmarkMapLookup      50000000                44.4 ns/op
    BenchmarkNilMapLookup   100000000               15.4 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.81 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               18.5 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.5 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    17.735s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.35 ns/op
    BenchmarkLayerClassMapContains  50000000                45.5 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               769 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1258 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1966 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2245 ns/op
    BenchmarkDefault         1000000              2320 ns/op
    BenchmarkLazy    2000000               844 ns/op
    BenchmarkNoCopy  1000000              1814 ns/op
    BenchmarkLazyNoCopy      5000000               363 ns/op
    BenchmarkAlloc  10000000               170 ns/op
    BenchmarkFlow   10000000               238 ns/op
    BenchmarkEndpoints      100000000               27.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.6 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.08 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.22 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.5 ns/op
    BenchmarkFmtVerboseString          10000            134880 ns/op
    BenchmarkPacketString      50000             77190 ns/op
    BenchmarkPacketDumpString          50000             76792 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1287 ns/op
    ok      github.com/gconnell/gopacket/layers     55.058s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.290s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 980.614ms, 792ns per packet
    Time to read packet data into memory from file: 980.641ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.009666s, 1.624us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.883711s, 1.522us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.877009s, 1.517us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.875756s, 1.516us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.880518s, 1.52us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.874868s, 1.515us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.872084s, 1.513us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.87519s, 1.515us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.875348s, 1.515us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.874661s, 1.515us per packet

commit d1657dce3f4bce8d91020a70a28207451babd6a6
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 15:54:19 2013 -0700

    Fix LayerString to handle anonymous struct fields.
    
    We had a problem before where if we did this:
    
    type foo struct {
      Cool, Stuff int
    }
    type Bar struct {
      foo
    }
    
    Then did LayerString(&Bar{}), we wouldn't print out Cool or Stuff, since they
    were part of the unexported 'foo'.  We now recurse into anonymous fields and
    print their values as part of the external struct.

commit 2fc640a7f3aee29ae0ccd9b32fa043980e97b15e
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 15:26:15 2013 -0700

    Improved error handling, add truncated handling.
    
    Improved error handling for panic errors, capturing stack trace of panic.  Added
    truncated-packet handling, with empty truncated layer at the end of the packet.

commit fca042e7a3723e081bd4484d1e61a0bcaad0175a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 12:43:07 2013 -0700

    Register each layer-type's decoder by name to map.
    
    Allows folks to accept decoder names from command line flags or the like, and
    use the appropriate decoder easily.

commit ca8ea71a27b89a610f7ee40192adb8a880b1b530
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 12:39:49 2013 -0700

    Fixed more IPv6 stuff, added tests.
    
    A few changes:
    1) Added test for IPv6 jumbogram (hand-generated), and fixed ipv6 decoder to
    handle it correctly.
    2) Added function to dump entire packet data to stderr from a decoder, for
    testing/diagnosis purposes.

commit ceae1ce26dd117f31af476aa8b02a19b021d0560
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Jan 11 11:33:36 2013 -0700

    Fixes for IPv6 options parsing.
    
    Finally got my hands on some packets with IPv6 options, and found that my
    options parsing was really borked.  Lots of little fixes in this CL to make IPv6
    option parsing actually conform to RFC 2460.

commit 933f6b18e1ee4791d54fd147ac860ae955ca3b57
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 10 17:22:10 2013 -0700

    Remove String from Dot1Q.

commit 2637c282f63b8e3e535dbed493db950b9b462f89
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Jan 10 10:17:03 2013 -0700

    Doc fixes, add types to some vars.

commit c3f61ca74954f6ba651863883276a67bdda4c61a
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 9 17:07:35 2013 -0700

    BENCH Build/test/bench with go1.0.3.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.27 ns/op
    BenchmarkMapLookup      50000000                45.2 ns/op
    BenchmarkNilMapLookup   200000000                8.34 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               18.2 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.2 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    18.680s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               771 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1279 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2014 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2301 ns/op
    BenchmarkDefault         1000000              2340 ns/op
    BenchmarkLazy    2000000               862 ns/op
    BenchmarkNoCopy  1000000              1816 ns/op
    BenchmarkLazyNoCopy      5000000               364 ns/op
    BenchmarkAlloc  10000000               170 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      50000000                29.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.16 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.09 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.30 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.7 ns/op
    BenchmarkFmtVerboseString          10000            139855 ns/op
    BenchmarkPacketString      20000             76779 ns/op
    BenchmarkPacketDumpString          50000             76738 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1295 ns/op
    ok      github.com/gconnell/gopacket/layers     51.937s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.305s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.085547s, 877ns per packet
    Time to read packet data into memory from file: 1.085573s
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.955411s, 1.58us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.940699s, 1.568us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.933817s, 1.563us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.894981s, 1.531us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.946678s, 1.573us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.93388s, 1.563us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.934902s, 1.564us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.878732s, 1.518us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.879573s, 1.519us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.883967s, 1.522us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 5a3d3254e52117c4641f03c4415eb2e5a8321f4c
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                7.49 ns/op
    BenchmarkMapLookup      50000000                49.0 ns/op
    BenchmarkNilMapLookup   100000000               15.9 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkTypeToInterface1       100000000               17.6 ns/op
    BenchmarkTypeToInterface2       2000000000               0.54 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.9 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.27 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.27 ns/op
    ok      github.com/gconnell/gopacket    18.227s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                52.2 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               777 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1272 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1980 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2259 ns/op
    BenchmarkDefault         1000000              2334 ns/op
    BenchmarkLazy    2000000               857 ns/op
    BenchmarkNoCopy  1000000              1823 ns/op
    BenchmarkLazyNoCopy      5000000               372 ns/op
    BenchmarkAlloc  10000000               171 ns/op
    BenchmarkFlow   10000000               255 ns/op
    BenchmarkEndpoints      50000000                28.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.15 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.07 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                6.19 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               10.7 ns/op
    BenchmarkFmtVerboseString          10000            136408 ns/op
    BenchmarkPacketString      50000             76818 ns/op
    BenchmarkPacketDumpString          50000             76730 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1297 ns/op
    ok      github.com/gconnell/gopacket/layers     54.501s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.310s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.009197s, 815ns per packet
    Time to read packet data into memory from file: 1.009221s
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.958598s, 1.583us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.901778s, 1.537us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.898323s, 1.534us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.893874s, 1.53us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.965912s, 1.589us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.86945s, 1.511us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.866899s, 1.509us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.874162s, 1.514us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.918743s, 1.55us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.959293s, 1.583us per packet

commit 7362deaf73922a91e62b3cb4bbe5cb79be07105e
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 9 17:02:08 2013 -0700

    Remove hack_pcap_next_ex, no longer appears necessary.

commit 01212249aae22be43e28b4339b74b92826a9b4fc
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 9 16:59:03 2013 -0700

    Docs, invalid endpoints, etc.
    
    Updated a bunch of documentation.  Added an EndpointInvalid endpoint type and
    InvalidEndpoint/InvalidFlow singletons.

commit 6d144d87fbce3ac7e8d0325d2af4249ca3e8fb2c
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Jan 9 16:10:24 2013 -0700

    Doc fixes.

commit dd6f9392b9696b08a1911d637fe872ec573b72ed
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 12:30:04 2013 -0700

    BENCH Add some benchmarks.
    
    Benchmarks for passing DecodeOptions by value vs. pointer.
    Benchmarks for making a packet into a string.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      50000000                55.4 ns/op
    BenchmarkNilMapLookup   100000000               20.9 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.79 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                35.3 ns/op
    BenchmarkPassDecodeOptionsByValue       2000000000               0.26 ns/op
    BenchmarkPassDecodeOptionsByPointer     2000000000               0.26 ns/op
    ok      github.com/gconnell/gopacket    15.561s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                48.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               759 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1227 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1981 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2231 ns/op
    BenchmarkDefault         1000000              2286 ns/op
    BenchmarkLazy    2000000               900 ns/op
    BenchmarkNoCopy  1000000              1771 ns/op
    BenchmarkLazyNoCopy      5000000               391 ns/op
    BenchmarkAlloc  10000000               245 ns/op
    BenchmarkFlow   10000000               205 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                70.4 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.79 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.06 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      500000000                5.90 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        200000000                9.51 ns/op
    BenchmarkFmtVerboseString          10000            151216 ns/op
    BenchmarkPacketString      50000             58887 ns/op
    BenchmarkPacketDumpString          50000             58886 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1201 ns/op
    ok      github.com/gconnell/gopacket/layers     58.352s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.269s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Local pcap file /tmp/gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.0499597s, 848ns per packet
    Time to read packet data into memory from file: 1.049987177s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.041978952s, 1.65us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.974327444s, 1.595us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.001436678s, 1.617us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.017487934s, 1.63us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.025171248s, 1.637us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.026988503s, 1.638us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.028770869s, 1.639us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.027858634s, 1.639us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.049764824s, 1.656us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.064173215s, 1.668us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 66c95cbc61319c8d5357005cf9477b32fe21a24b
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    # github.com/gconnell/gopacket/layers
    1: error: 'PF_PPP' undeclared (first use in this function)
    1: note: each undeclared identifier is reported only once for each function it appears in
    # github.com/gconnell/gopacket/layers
    1: error: 'PF_PPP' undeclared (first use in this function)
    1: note: each undeclared identifier is reported only once for each function it appears in
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.90 ns/op
    BenchmarkMapLookup      50000000                55.2 ns/op
    BenchmarkNilMapLookup   100000000               17.0 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.55 ns/op
    BenchmarkTypeToInterface1       2000000000               0.83 ns/op
    BenchmarkTypeToInterface2       2000000000               0.54 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.2 ns/op
    ok      github.com/gconnell/gopacket    14.601s
    FAIL    github.com/gconnell/gopacket/layers [build failed]
    FAIL    github.com/gconnell/gopacket/pcap [build failed]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    # github.com/gconnell/gopacket/layers
    1: error: 'PF_PPP' undeclared (first use in this function)
    1: note: each undeclared identifier is reported only once for each function it appears in

commit 6ea4d80273f1dba95e21ede19c31c5167e07b494
Merge: 77c2b1f 7715757
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 12:14:22 2013 -0700

    Merge branch 'master' into strings

commit 77c2b1f18d2549073b8857faa2f3a7126ad38c4b
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 12:13:52 2013 -0700

    Minor modifications to stringing, including Dump.

commit 771575758de8f5138009261fd356713f88340fea
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 12:00:46 2013 -0700

    Locking down licensing.
    
    Got some final licensing advice from an uber-open-sourcer, and updated licensing
    information accordingly across the board.
    
    Also, fixed issue with loopback INET6, where different unix distros have
    different PF_INET6 values (wtf?).

commit 297ba61d916b7659c1a0b28cc9da37061660989c
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 00:46:50 2013 -0700

    Remove String from all, add TCP option parsing.

commit 51e842edbd36e4c8c0d947ab3f4b746916494a8b
Merge: 78bafe0 91f027a
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 00:22:14 2013 -0700

    Merge branch 'master' into strings

commit 78bafe00874306c04ddbd0268283625d6b5e79fb
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 00:22:00 2013 -0700

    Make TCPOptions string func not take ptr.

commit 4fbc0d9d3dde4e23ee466074d89587d112bdc190
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Jan 7 00:15:11 2013 -0700

    Attempt to use reflect to auto-string layers.

commit 91f027a71cc619a2fb23742ececb309f07c541fe
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 22:13:29 2013 -0700

    Add EAP and EAPOL decoding.

commit df27ccfb8dd185b1a351460d0d646987e584c5f2
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 21:44:51 2013 -0700

    Create TCPDump binary in pcap.

commit 2e8a8751f5f22c13d0ddd8b5e8a9f8522658ee97
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 20:48:34 2013 -0700

    Update protocols to use their new port types.

commit 583abc901de917b3bb160f4901eae8e96645b485
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 20:30:35 2013 -0700

    Also pull SCTP ports from IANA.

commit 82c121a40fd23dcf4d8603838fc3c47839515766
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 20:15:28 2013 -0700

    BENCH Fix bug in gen.go with port ranges.
    
    Originally, the XML parser saw <number>123-456</number> and crapped out,
    because XX-YY is not an integer.  Fix it by having Number be a string,
    then attempting the string->int conversion ourselves.  We get many more
    ports this way.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.00 ns/op
    BenchmarkMapLookup      50000000                63.2 ns/op
    BenchmarkNilMapLookup   100000000               10.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.10 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.0 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                51.6 ns/op
    ok      github.com/gconnell/gopacket    17.705s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.10 ns/op
    BenchmarkLayerClassMapContains  50000000                63.7 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1047 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1690 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2615 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2954 ns/op
    BenchmarkDefault         1000000              3606 ns/op
    BenchmarkLazy    1000000              1380 ns/op
    BenchmarkNoCopy  1000000              2726 ns/op
    BenchmarkLazyNoCopy      5000000               506 ns/op
    BenchmarkAlloc  10000000               251 ns/op
    BenchmarkFlow   10000000               291 ns/op
    BenchmarkEndpoints      50000000                39.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                95.4 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.31 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.33 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.32 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               15.1 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1774 ns/op
    ok      github.com/gconnell/gopacket/layers     51.568s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.496s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.811545s, 1.464us per packet
    Time to read packet data into memory from file: 1.811589s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.096522s, 2.503us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.683004s, 2.168us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.501299s, 2.021us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.522213s, 2.038us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.4691s, 1.995us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.56633s, 2.074us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.548942s, 2.06us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.548222s, 2.059us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.55129s, 2.062us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.539627s, 2.052us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 27fb701a35a13fa54fecf871be1b2aaebe72dd2f
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                8.98 ns/op
    BenchmarkMapLookup      50000000                63.3 ns/op
    BenchmarkNilMapLookup   100000000               11.0 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.05 ns/op
    BenchmarkArrayLookup    2000000000               1.05 ns/op
    BenchmarkTypeToInterface1       100000000               23.2 ns/op
    BenchmarkTypeToInterface2       2000000000               0.71 ns/op
    BenchmarkCheckEthernetPrefix    50000000                52.8 ns/op
    ok      github.com/gconnell/gopacket    18.197s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.28 ns/op
    BenchmarkLayerClassMapContains  50000000                64.3 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1056 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1890 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              3519 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3367 ns/op
    BenchmarkDefault         1000000              3485 ns/op
    BenchmarkLazy    1000000              1314 ns/op
    BenchmarkNoCopy  1000000              2641 ns/op
    BenchmarkLazyNoCopy      5000000               583 ns/op
    BenchmarkAlloc  10000000               236 ns/op
    BenchmarkFlow   10000000               327 ns/op
    BenchmarkEndpoints      50000000                52.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      50000000                28.9 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000               111 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.99 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.43 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.48 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               15.0 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1747 ns/op
    ok      github.com/gconnell/gopacket/layers     54.614s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.488s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.933747s, 1.563us per packet
    Time to read packet data into memory from file: 1.933793s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.434822s, 2.776us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.828898s, 2.286us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.684547s, 2.169us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.68561s, 2.17us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.698935s, 2.181us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.690722s, 2.174us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.667799s, 2.156us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.686204s, 2.171us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.681869s, 2.167us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.682771s, 2.168us per packet

commit 738a96e43962d90d6b5e00f3213ec532ef00fa63
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 20:06:41 2013 -0700

    Added port types, port String funcs.
    
    Added a port type for every different port.  Added maps of known port
    names, and referenced them with the port types' String calls.  Wrote a
    gen.go for layers/ that pulls known port numbers from IANA.
    
    Also pulled down new macs.

commit ca72c133460cd562b490d7ecd82daa4cf8a184ba
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 18:29:00 2013 -0700

    Strings for IPv4 adn TCP.

commit e984379da8cc38639a07f77a9658e545ee3b561c
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 14:49:13 2013 -0700

    BENCH Run GC before benchmark for more consistent results.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                8.97 ns/op
    BenchmarkMapLookup      50000000                63.6 ns/op
    BenchmarkNilMapLookup   100000000               10.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.00 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.0 ns/op
    BenchmarkTypeToInterface2       2000000000               0.66 ns/op
    BenchmarkCheckEthernetPrefix    50000000                52.1 ns/op
    ok      github.com/gconnell/gopacket    17.517s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.37 ns/op
    BenchmarkLayerClassMapContains  50000000                62.5 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1055 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1670 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              3032 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3042 ns/op
    BenchmarkDefault         1000000              3306 ns/op
    BenchmarkLazy    1000000              1300 ns/op
    BenchmarkNoCopy  1000000              2891 ns/op
    BenchmarkLazyNoCopy      5000000               590 ns/op
    BenchmarkAlloc  10000000               238 ns/op
    BenchmarkFlow   10000000               293 ns/op
    BenchmarkEndpoints      50000000                40.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      50000000                24.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                98.9 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.34 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.34 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                9.48 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               18.0 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1961 ns/op
    ok      github.com/gconnell/gopacket/layers     52.339s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.650s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.757905s, 1.42us per packet
    Time to read packet data into memory from file: 1.757947s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.923826s, 2.363us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.536178s, 2.05us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.469413s, 1.996us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.473185s, 1.999us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.460754s, 1.989us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.464349s, 1.992us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.456251s, 1.985us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.47478s, 2us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.493204s, 2.015us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.466688s, 1.993us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT b581a38f0a386abacff73dc7cb3682c5d06c4f50
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.39 ns/op
    BenchmarkMapLookup      50000000                62.1 ns/op
    BenchmarkNilMapLookup   100000000               11.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.01 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               22.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                50.4 ns/op
    ok      github.com/gconnell/gopacket    17.655s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.48 ns/op
    BenchmarkLayerClassMapContains  50000000                69.2 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1105 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1934 ns/op
    BenchmarkLazyNoCopyTCPLayer       500000              3765 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              4057 ns/op
    BenchmarkDefault         1000000              3724 ns/op
    BenchmarkLazy    1000000              1299 ns/op
    BenchmarkNoCopy  1000000              3174 ns/op
    BenchmarkLazyNoCopy      5000000               596 ns/op
    BenchmarkAlloc  10000000               274 ns/op
    BenchmarkFlow   10000000               350 ns/op
    BenchmarkEndpoints      50000000                42.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               24.8 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                98.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.35 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.35 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.54 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               15.4 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1991 ns/op
    ok      github.com/gconnell/gopacket/layers     55.715s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.496s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.75105s, 1.415us per packet
    Time to read packet data into memory from file: 1.751091s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.889938s, 2.336us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.838981s, 2.294us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.465198s, 1.992us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.756121s, 2.227us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.796477s, 2.26us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.456916s, 1.985us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.732515s, 2.208us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.507924s, 2.027us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.782667s, 2.249us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.473436s, 1.999us per packet

commit 1961189555dc04a42d5eca3b580d6ef152e3bab3
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 12:58:36 2013 -0700

    BENCH Mac prefixes, benchmark.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                8.96 ns/op
    BenchmarkMapLookup      50000000                62.0 ns/op
    BenchmarkNilMapLookup   100000000               11.4 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.07 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                50.1 ns/op
    ok      github.com/gconnell/gopacket    17.584s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.24 ns/op
    BenchmarkLayerClassMapContains  50000000                61.7 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1018 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1647 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2602 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2954 ns/op
    BenchmarkDefault         1000000              3147 ns/op
    BenchmarkLazy    1000000              1170 ns/op
    BenchmarkNoCopy  1000000              2464 ns/op
    BenchmarkLazyNoCopy      5000000               514 ns/op
    BenchmarkAlloc  10000000               232 ns/op
    BenchmarkFlow   10000000               293 ns/op
    BenchmarkEndpoints      50000000                39.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.2 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                98.3 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.30 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.33 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.30 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               15.0 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1727 ns/op
    ok      github.com/gconnell/gopacket/layers     50.302s
    PASS
    ok      github.com/gconnell/gopacket/pcap       0.488s
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Local pcap file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap doesn't exist, reading from http://www.ll.mit.edu/mission/communications/cyber/CSTcorpora/ideval/data/1999/training/week1/tuesday/inside.tcpdump.gz
    Successfully read 341401548 bytes from url, unzipped to local storage
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.742134s, 1.408us per packet
    Time to read packet data into memory from file: 1.742174s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.789799s, 2.255us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.013187s, 2.435us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.497814s, 2.019us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.707882s, 2.188us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.481431s, 2.005us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.71521s, 2.194us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.753464s, 2.225us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.47127s, 1.997us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.718068s, 2.197us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.48274s, 2.006us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT e68459790feb6deb561e104b4f0e952fe0c42599
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                8.98 ns/op
    BenchmarkMapLookup      50000000                64.8 ns/op
    BenchmarkNilMapLookup   100000000               11.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.00 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.0 ns/op
    BenchmarkTypeToInterface2       2000000000               0.68 ns/op
    BenchmarkCheckEthernetPrefix    50000000                51.5 ns/op
    ok      github.com/gconnell/gopacket    17.695s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.10 ns/op
    BenchmarkLayerClassMapContains  50000000                61.9 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1045 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1683 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2669 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2972 ns/op
    BenchmarkDefault         1000000              3198 ns/op
    BenchmarkLazy    1000000              1176 ns/op
    BenchmarkNoCopy  1000000              2466 ns/op
    BenchmarkLazyNoCopy      5000000               500 ns/op
    BenchmarkAlloc  10000000               250 ns/op
    BenchmarkFlow   10000000               291 ns/op
    BenchmarkEndpoints      50000000                39.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                93.3 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.31 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.33 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.34 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               18.8 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1771 ns/op
    ok      github.com/gconnell/gopacket/layers     50.760s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.647572s, 1.331us per packet
    Time to read packet data into memory from file: 1.647624s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.785568s, 2.251us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.733541s, 2.209us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.449156s, 1.979us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.691202s, 2.175us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.512255s, 2.03us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.744325s, 2.218us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.511837s, 2.03us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.692478s, 2.176us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.785793s, 2.251us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.453012s, 1.982us per packet

commit 9efc563db6a1c6b43a87ba5e9f000d4a32b39362
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 12:57:27 2013 -0700

    Added test for ethernet pcap file.

commit c49dc43c12974da8f706a7a85b8e9bb85fd2ab21
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 12:34:18 2013 -0700

    Added pcap file test, and raw/loop/null link type.
    
    Added a test for reading a pcap file.  While doing it, noticed that we
    currently don't support pcap files captured from the loopback interface,
    so added support for that.  Also added support for raw link types.

commit 0e48c72ed5560ee5c004750b7919d82aa7bda214
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Jan 6 10:08:40 2013 -0700

    Documentation fixes.

commit fa3fc2f5d06109596283de4c0be2cbc06dee4e3f
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 20:59:49 2012 -0700

    MPLS in PPP support.

commit 650257bf9acf66302312d2a1860d4f176a750acc
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 20:49:57 2012 -0700

    BENCH Benchmark after merge.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.02 ns/op
    BenchmarkMapLookup      50000000                64.8 ns/op
    BenchmarkNilMapLookup   100000000               11.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.02 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                51.7 ns/op
    ok      github.com/gconnell/gopacket    17.756s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.46 ns/op
    BenchmarkLayerClassMapContains  50000000                62.1 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1040 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1671 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2653 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3009 ns/op
    BenchmarkDefault         1000000              3239 ns/op
    BenchmarkLazy    1000000              1178 ns/op
    BenchmarkNoCopy  1000000              2501 ns/op
    BenchmarkLazyNoCopy      5000000               506 ns/op
    BenchmarkAlloc  10000000               258 ns/op
    BenchmarkFlow   10000000               298 ns/op
    BenchmarkEndpoints      50000000                41.3 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               25.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000               100 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.70 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.34 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.40 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               15.0 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1761 ns/op
    ok      github.com/gconnell/gopacket/layers     51.828s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.776576s, 1.436us per packet
    Time to read packet data into memory from file: 1.776629s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.225562s, 2.607us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 3.256395s, 2.632us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.613895s, 2.112us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.755083s, 2.227us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.529266s, 2.044us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 3.05259s, 2.467us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.954821s, 2.388us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.68895s, 2.173us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.776587s, 2.244us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.594562s, 2.097us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 0d5926518128219a60f051be7a1ae690d7425391
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.43 ns/op
    BenchmarkMapLookup      50000000                65.5 ns/op
    BenchmarkNilMapLookup   100000000               11.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.02 ns/op
    BenchmarkArrayLookup    2000000000               1.04 ns/op
    BenchmarkTypeToInterface1       100000000               21.6 ns/op
    BenchmarkTypeToInterface2       2000000000               0.73 ns/op
    BenchmarkCheckEthernetPrefix    50000000                58.1 ns/op
    ok      github.com/gconnell/gopacket    18.442s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.15 ns/op
    BenchmarkLayerClassMapContains  50000000                66.1 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1207 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1921 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              3336 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3130 ns/op
    BenchmarkDefault         1000000              3174 ns/op
    BenchmarkLazy    1000000              1185 ns/op
    BenchmarkNoCopy  1000000              2462 ns/op
    BenchmarkLazyNoCopy      5000000               505 ns/op
    BenchmarkAlloc  10000000               252 ns/op
    BenchmarkFlow   10000000               292 ns/op
    BenchmarkEndpoints      50000000                39.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                94.8 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.34 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.34 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.34 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               14.7 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1756 ns/op
    ok      github.com/gconnell/gopacket/layers     52.069s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.775381s, 1.435us per packet
    Time to read packet data into memory from file: 1.775432s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.686874s, 2.171us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.743218s, 2.217us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.474513s, 2us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.691323s, 2.175us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.46704s, 1.994us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.762433s, 2.232us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.709552s, 2.19us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.462691s, 1.99us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 3.229236s, 2.61us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.652668s, 2.144us per packet

commit 054c7f5937e806736018ea31ebd07f3688bca4e1
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 20:47:31 2012 -0700

    Make FDDI a link layer.

commit 3d4329a15335c1fd30292b13dd72e908b771587e
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 20:38:58 2012 -0700

    BENCH Add benchmark.
    
    Benchmarking for a comparison of decoder calls:
    1) calling function directly
    2) calling function as decoder interface
    3) calling function through EnumMetadata array lookup
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.12 ns/op
    BenchmarkMapLookup      50000000                64.9 ns/op
    BenchmarkNilMapLookup   100000000               11.4 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.02 ns/op
    BenchmarkArrayLookup    2000000000               1.01 ns/op
    BenchmarkTypeToInterface1       100000000               21.2 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                52.0 ns/op
    ok      github.com/gconnell/gopacket    17.809s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.09 ns/op
    BenchmarkLayerClassMapContains  50000000                62.1 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1051 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1675 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2670 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              3018 ns/op
    BenchmarkDefault         1000000              3157 ns/op
    BenchmarkLazy    1000000              1174 ns/op
    BenchmarkNoCopy  1000000              2456 ns/op
    BenchmarkLazyNoCopy      5000000               502 ns/op
    BenchmarkAlloc  10000000               275 ns/op
    BenchmarkFlow   10000000               356 ns/op
    BenchmarkEndpoints      50000000                41.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      50000000                27.9 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000               109 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.36 ns/op
    BenchmarkDecodeFuncCallOverheadDirectCall       2000000000               1.51 ns/op
    BenchmarkDecodeFuncCallOverheadDecoderCall      200000000                8.35 ns/op
    BenchmarkDecodeFuncCallOverheadArrayCall        100000000               14.7 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1767 ns/op
    ok      github.com/gconnell/gopacket/layers     51.437s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.8046s, 1.458us per packet
    Time to read packet data into memory from file: 1.804649s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.839707s, 2.295us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.853602s, 2.306us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.460917s, 1.989us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.708256s, 2.189us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.71947s, 2.198us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.451822s, 1.981us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.713184s, 2.193us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.544132s, 2.056us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.708161s, 2.189us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.519415s, 2.036us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 11dd506fba48c0a72452a6f62686beebc794f963
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.00 ns/op
    BenchmarkMapLookup      50000000                64.9 ns/op
    BenchmarkNilMapLookup   100000000               11.5 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.00 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                45.3 ns/op
    ok      github.com/gconnell/gopacket    17.391s
    PASS
    BenchmarkLayerClassSliceContains        500000000                2.29 ns/op
    BenchmarkLayerClassMapContains  50000000                63.2 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1042 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1647 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2611 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2939 ns/op
    BenchmarkDefault         1000000              3165 ns/op
    BenchmarkLazy    1000000              1177 ns/op
    BenchmarkNoCopy  1000000              2444 ns/op
    BenchmarkLazyNoCopy      5000000               505 ns/op
    BenchmarkAlloc  10000000               235 ns/op
    BenchmarkFlow   10000000               291 ns/op
    BenchmarkEndpoints      50000000                39.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                97.1 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.91 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1745 ns/op
    ok      github.com/gconnell/gopacket/layers     42.485s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.779026s, 1.438us per packet
    Time to read packet data into memory from file: 1.779078s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.685948s, 2.171us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.925407s, 2.364us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.472302s, 1.998us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.719156s, 2.197us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.467267s, 1.994us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.759001s, 2.23us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.711627s, 2.191us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.45333s, 1.983us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.720801s, 2.199us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.464069s, 1.991us per packet

commit c01a23942259ac1f7d7d3bda1e89e88dbb4a8856
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 20:26:37 2012 -0700

    BENCH New MACs, fix GC mktemp.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.02 ns/op
    BenchmarkMapLookup      50000000                65.1 ns/op
    BenchmarkNilMapLookup   100000000               11.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.02 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                51.7 ns/op
    ok      github.com/gconnell/gopacket    17.772s
    PASS
    BenchmarkLayerClassSliceContains        500000000                2.38 ns/op
    BenchmarkLayerClassMapContains  50000000                63.4 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1058 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1646 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2606 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2943 ns/op
    BenchmarkDefault         1000000              3149 ns/op
    BenchmarkLazy    1000000              1182 ns/op
    BenchmarkNoCopy  1000000              2434 ns/op
    BenchmarkLazyNoCopy      5000000               503 ns/op
    BenchmarkAlloc  10000000               232 ns/op
    BenchmarkFlow   10000000               291 ns/op
    BenchmarkEndpoints      50000000                39.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                97.9 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.34 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1748 ns/op
    ok      github.com/gconnell/gopacket/layers     42.190s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.782212s, 1.44us per packet
    Time to read packet data into memory from file: 1.782264s
    Benchmarking decode 1/10
            Read in 1237119 packets in 3.260913s, 2.635us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.962213s, 2.394us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.519196s, 2.036us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.69968s, 2.182us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.8165s, 2.276us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.50848s, 2.027us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.717361s, 2.196us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.459382s, 1.987us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.704888s, 2.186us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.462141s, 1.99us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT e1605be82c10bbdbc48dd64857fed4fe47ed6eba
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  200000000                9.01 ns/op
    BenchmarkMapLookup      50000000                62.1 ns/op
    BenchmarkNilMapLookup   100000000               11.0 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.01 ns/op
    BenchmarkArrayLookup    2000000000               1.00 ns/op
    BenchmarkTypeToInterface1       100000000               21.1 ns/op
    BenchmarkTypeToInterface2       2000000000               0.67 ns/op
    BenchmarkCheckEthernetPrefix    50000000                50.4 ns/op
    ok      github.com/gconnell/gopacket    17.455s
    PASS
    BenchmarkLayerClassSliceContains        1000000000               2.23 ns/op
    BenchmarkLayerClassMapContains  50000000                63.7 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1253 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1972 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2723 ns/op
    BenchmarkLazyNoCopyAllLayers      500000              3086 ns/op
    BenchmarkDefault          500000              3179 ns/op
    BenchmarkLazy    1000000              1283 ns/op
    BenchmarkNoCopy  1000000              2479 ns/op
    BenchmarkLazyNoCopy      5000000               524 ns/op
    BenchmarkAlloc  10000000               238 ns/op
    BenchmarkFlow    5000000               303 ns/op
    BenchmarkEndpoints      50000000                39.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               23.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                94.2 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                5.33 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1750 ns/op
    ok      github.com/gconnell/gopacket/layers     37.863s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/var/folders/00/07mgr000h01000cxqpysvccm000yjz/T//gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.641471s, 1.326us per packet
    Time to read packet data into memory from file: 1.641518s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.74092s, 2.215us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.822514s, 2.281us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.360633s, 1.908us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.630656s, 2.126us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.417479s, 1.954us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.566904s, 2.074us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.572291s, 2.079us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.36135s, 1.908us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.619484s, 2.117us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.57381s, 2.08us per packet

commit c415f0bc0f9561039f234043fd0a628cc53c34e7
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 20:25:03 2012 -0700

    Add FDDI support, change GC a bit.

commit e30988bbe715fe2b2279e3fa341c8a987df91df0
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 29 17:00:56 2012 -0700

    Enums array conversion.
    
    Handle enum decoding and String() with an array of EnumMetadata, so
    users can override individual protocol handling.

commit af09ebd4b7de6ca93dbbd0bf951b33a91b8f68af
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 27 20:59:36 2012 -0700

    Add UDPLite, and some enums.

commit 4e4100643154775b36d272c21d1d1dd14545446d
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 27 20:26:13 2012 -0700

    Made Layer a Stringer.

commit f88410755ea94f3dcb483f94c97381305d7d8d6c
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 22 18:38:35 2012 -0700

    Handle IPv6 jumbograms.

commit 71596ec9f1ee094edc85eaa97182b22b7821897a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 16:30:22 2012 -0700

    BENCH Benchmarking.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.44 ns/op
    BenchmarkMapLookup      50000000                45.0 ns/op
    BenchmarkNilMapLookup   200000000                7.45 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.79 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                35.2 ns/op
    ok      github.com/gconnell/gopacket    14.201s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                48.8 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               576 ns/op
    BenchmarkLazyNoCopyIPLayer       2000000               989 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1631 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              1866 ns/op
    BenchmarkDefault         1000000              1754 ns/op
    BenchmarkLazy    5000000               604 ns/op
    BenchmarkNoCopy  1000000              1396 ns/op
    BenchmarkLazyNoCopy     10000000               262 ns/op
    BenchmarkAlloc  10000000               179 ns/op
    BenchmarkFlow   10000000               201 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                71.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.81 ns/op
    BenchmarkDecodePacketIPSecESP    2000000               935 ns/op
    ok      github.com/gconnell/gopacket/layers     42.802s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 914.003793ms, 738ns per packet
    Time to read packet data into memory from file: 914.032115ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.98369327s, 1.603us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.908289916s, 1.542us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.940508758s, 1.568us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.962180557s, 1.586us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.110039641s, 1.705us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.971536777s, 1.593us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.970039562s, 1.592us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.969713516s, 1.592us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.968856754s, 1.591us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.977213517s, 1.598us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 94584fa3c1db8c2a75741a1648d6fa16e9f32ccc
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      50000000                43.1 ns/op
    BenchmarkNilMapLookup   500000000                7.55 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.3 ns/op
    ok      github.com/gconnell/gopacket    16.367s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                45.0 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               576 ns/op
    BenchmarkLazyNoCopyIPLayer       2000000               993 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1637 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              1871 ns/op
    BenchmarkDefault         1000000              1762 ns/op
    BenchmarkLazy    5000000               607 ns/op
    BenchmarkNoCopy  1000000              1399 ns/op
    BenchmarkLazyNoCopy     10000000               263 ns/op
    BenchmarkAlloc  10000000               179 ns/op
    BenchmarkFlow   10000000               203 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                71.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.81 ns/op
    BenchmarkDecodePacketIPSecESP    2000000               939 ns/op
    ok      github.com/gconnell/gopacket/layers     42.716s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 913.080909ms, 738ns per packet
    Time to read packet data into memory from file: 913.108317ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.972327514s, 1.594us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.902598509s, 1.537us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.938120302s, 1.566us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.956471747s, 1.581us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.104834886s, 1.701us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.968188355s, 1.59us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.970430838s, 1.592us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.968070086s, 1.59us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.967639542s, 1.59us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.981228717s, 1.601us per packet

commit 4370cf9687c957859fefd7963611f49f23338357
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 15:58:57 2012 -0700

    Add in comment for weird performance behavior.
    
    There was a ~20% performance regression introduced in commit
    94584fa3c1db8c2a75741a1648d6fa16e9f32ccc.  This commit adds a comment describing
    the behavior.

commit 9421e594055fa34ac6d46eb6a45eee101105c4ea
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 15:02:26 2012 -0700

    BENCH Fix stupid error introduced in last commit.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      50000000                43.2 ns/op
    BenchmarkNilMapLookup   500000000                8.16 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                35.2 ns/op
    ok      github.com/gconnell/gopacket    16.588s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.9 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               575 ns/op
    BenchmarkLazyNoCopyIPLayer       2000000               992 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1632 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              1859 ns/op
    BenchmarkDefault         1000000              1755 ns/op
    BenchmarkLazy    5000000               603 ns/op
    BenchmarkNoCopy  1000000              1395 ns/op
    BenchmarkLazyNoCopy     10000000               261 ns/op
    BenchmarkAlloc  10000000               178 ns/op
    BenchmarkFlow   10000000               202 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                71.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.81 ns/op
    BenchmarkDecodePacketIPSecESP    2000000               937 ns/op
    ok      github.com/gconnell/gopacket/layers     42.619s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.057146285s, 854ns per packet
    Time to read packet data into memory from file: 1.057177534s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.34885524s, 1.898us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 2.294297827s, 1.854us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.319307086s, 1.874us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.345578952s, 1.896us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.514293917s, 2.032us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.357871329s, 1.905us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.35695152s, 1.905us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.35774901s, 1.905us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.361192951s, 1.908us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.356587929s, 1.904us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 898692a5f5462d89e3da2c9b6a0dc0468196db21
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      50000000                43.2 ns/op
    BenchmarkNilMapLookup   500000000                7.48 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                35.3 ns/op
    ok      github.com/gconnell/gopacket    16.231s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.57 ns/op
    BenchmarkLayerClassMapContains  50000000                50.9 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1968 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1974 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1980 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              1970 ns/op
    BenchmarkDefault         1000000              2069 ns/op
    BenchmarkLazy    1000000              2379 ns/op
    BenchmarkNoCopy  1000000              1647 ns/op
    BenchmarkLazyNoCopy      1000000              1959 ns/op
    BenchmarkAlloc  10000000               212 ns/op
    BenchmarkFlow   10000000               238 ns/op
    BenchmarkEndpoints      50000000                33.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               13.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                85.5 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.37 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1106 ns/op
    ok      github.com/gconnell/gopacket/layers     35.062s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.056825534s, 854ns per packet
    Time to read packet data into memory from file: 1.056857812s
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.87310214s, 1.514us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.796077742s, 1.451us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.836033543s, 1.484us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.856084407s, 1.5us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.028558102s, 1.639us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.868791541s, 1.51us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.869445953s, 1.511us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.870409013s, 1.511us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.869264027s, 1.51us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.868603694s, 1.51us per packet

commit 823bdf37bc7a102282428e5b36864b914c1a61d2
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 14:57:28 2012 -0700

    BENCH makeslice optimization.
    
    runtime.makeslice was taking up 8.5% of our CPU, and most of it was rooted in
    NewPacket.  Since layers is the only slice created in NewPacket, it seemed at
    fault.  Creating an initial array of layers in the packet and pointing the
    layers slice there seems to have helped greatly, as it means the slice space is
    created with the packet allocation and doesn't require another allocation call.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    testing: warning: no tests to run
    PASS
    BenchmarkTypeAssertion  500000000                3.45 ns/op
    BenchmarkMapLookup      50000000                43.2 ns/op
    BenchmarkNilMapLookup   100000000               20.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkTypeToInterface1       2000000000               0.80 ns/op
    BenchmarkTypeToInterface2       2000000000               0.53 ns/op
    BenchmarkCheckEthernetPrefix    50000000                36.2 ns/op
    ok      github.com/gconnell/gopacket    13.860s
    PASS
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                49.9 ns/op
    BenchmarkLazyNoCopyEthLayer      1000000              1665 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1664 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1669 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              1658 ns/op
    BenchmarkDefault         1000000              1745 ns/op
    BenchmarkLazy    1000000              2010 ns/op
    BenchmarkNoCopy  1000000              1387 ns/op
    BenchmarkLazyNoCopy      1000000              1653 ns/op
    BenchmarkAlloc  10000000               178 ns/op
    BenchmarkFlow   10000000               200 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                72.2 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.81 ns/op
    BenchmarkDecodePacketIPSecESP    2000000               934 ns/op
    ok      github.com/gconnell/gopacket/layers     36.800s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 901.895498ms, 729ns per packet
    Time to read packet data into memory from file: 901.923705ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 1.58941677s, 1.284us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.522482121s, 1.23us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 1.555832669s, 1.257us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.57305841s, 1.271us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 1.727420366s, 1.396us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.581368701s, 1.278us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 1.580800632s, 1.277us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.579536878s, 1.276us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 1.578491853s, 1.275us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.578995458s, 1.276us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 6fade526006f608e559fe74f66a5422360b4760b
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356127228261920300
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                3.71 ns/op
    BenchmarkMapLookup      50000000                36.1 ns/op
    BenchmarkNilMapLookup   200000000                7.48 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                43.0 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               629 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1042 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1698 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              1919 ns/op
    BenchmarkDefault         1000000              1819 ns/op
    BenchmarkLazy    5000000               662 ns/op
    BenchmarkNoCopy  1000000              1460 ns/op
    BenchmarkLazyNoCopy      5000000               314 ns/op
    BenchmarkAlloc  10000000               182 ns/op
    BenchmarkFlow   10000000               201 ns/op
    BenchmarkEndpoints      100000000               28.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               11.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                71.9 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     1000000000               2.85 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.8 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1049 ns/op
    ok      github.com/gconnell/gopacket/layers     50.058s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 1.057973767s, 855ns per packet
    Time to read packet data into memory from file: 1.05800711s
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.023001986s, 1.635us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.965206144s, 1.588us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.030603335s, 1.641us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 2.036982287s, 1.646us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.029370157s, 1.64us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 2.030986286s, 1.641us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.032052187s, 1.642us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 2.033401796s, 1.643us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.032463772s, 1.642us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 2.033587362s, 1.643us per packet

commit 4fa44add4d50ac95d4b0434b89bc8b1831b021d1
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 14:28:13 2012 -0700

    Moved some stuff around, nothing special.

commit ef1a10fae14a94c768f0258fb04422deb705c511
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 11:27:30 2012 -0700

    Fix some documentation.

commit 8c148f3cd6df80f731954c203792ad7982ae1236
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 11:09:46 2012 -0700

    BENCH Merge decoding refactoring into master.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356113403930888000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.60 ns/op
    BenchmarkMapLookup      50000000                36.7 ns/op
    BenchmarkNilMapLookup   200000000                7.83 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.6 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               738 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1211 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1863 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2127 ns/op
    BenchmarkDefault         1000000              2075 ns/op
    BenchmarkLazy    5000000               708 ns/op
    BenchmarkNoCopy  1000000              1686 ns/op
    BenchmarkLazyNoCopy      5000000               348 ns/op
    BenchmarkAlloc  10000000               140 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 50000000                74.7 ns/op
    BenchmarkTCPTransportLayerFromDecodedPacket     500000000                3.45 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.9 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1195 ns/op
    ok      github.com/gconnell/gopacket/layers     54.882s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 825.581ms, 667ns per packet
    Time to read packet data into memory from file: 825.605ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.033454s, 1.643us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.855927s, 1.5us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.033414s, 1.643us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.854315s, 1.498us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.026693s, 1.638us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.899315s, 1.535us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.023382s, 1.635us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.856927s, 1.501us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.037597s, 1.647us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.855106s, 1.499us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 58e7cecb88a4d7af84c81859a61db44c0dd6f3fa
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356113490518941000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.99 ns/op
    BenchmarkMapLookup      50000000                36.3 ns/op
    BenchmarkNilMapLookup   100000000               10.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                47.0 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               745 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1205 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1866 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2134 ns/op
    BenchmarkDefault         1000000              2094 ns/op
    BenchmarkLazy    5000000               732 ns/op
    BenchmarkNoCopy  1000000              1699 ns/op
    BenchmarkLazyNoCopy      5000000               353 ns/op
    BenchmarkAlloc  10000000               142 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.7 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.3 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1204 ns/op
    ok      github.com/gconnell/gopacket/layers     49.813s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 828.311ms, 669ns per packet
    Time to read packet data into memory from file: 828.332ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.035211s, 1.645us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.856136s, 1.5us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.024724s, 1.636us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.847775s, 1.493us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.086539s, 1.686us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.857984s, 1.501us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.066707s, 1.67us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.85456s, 1.499us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.12175s, 1.715us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.872024s, 1.513us per packet

commit a6c7b74b6dfe2af2d8c4abe227c1ecc11c840184
Merge: 32363c6 51be3a0
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 11:08:58 2012 -0700

    Merge branch 'nolazy'

commit 51be3a03faad18be837982929d67ad6ff8a6e954
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 11:04:51 2012 -0700

    BENCH Benchmark code work.
    
    Read packets into memory once, decode many times.
    Default to nocopy in code.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356113121531281000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                8.17 ns/op
    BenchmarkMapLookup      50000000                37.7 ns/op
    BenchmarkNilMapLookup   200000000                7.99 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.5 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               751 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1213 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1874 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2190 ns/op
    BenchmarkDefault         1000000              2320 ns/op
    BenchmarkLazy    5000000               746 ns/op
    BenchmarkNoCopy  1000000              1745 ns/op
    BenchmarkLazyNoCopy      5000000               354 ns/op
    BenchmarkAlloc  10000000               147 ns/op
    BenchmarkFlow   10000000               254 ns/op
    BenchmarkEndpoints      100000000               28.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               15.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                81.2 ns/op
    BenchmarkCheckEthernetPrefix    50000000                45.5 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1244 ns/op
    ok      github.com/gconnell/gopacket/layers     50.067s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading all packets into memory with BufferPacketSource.
    Reading packet data into memory: 1237119 packets in 931.513ms, 752ns per packet
    Time to read packet data into memory from file: 931.535ms
    Benchmarking decode 1/10
            Read in 1237119 packets in 2.055099s, 1.661us per packet
    Benchmarking decode 2/10
            Read in 1237119 packets in 1.948332s, 1.574us per packet
    Benchmarking decode 3/10
            Read in 1237119 packets in 2.117856s, 1.711us per packet
    Benchmarking decode 4/10
            Read in 1237119 packets in 1.891707s, 1.529us per packet
    Benchmarking decode 5/10
            Read in 1237119 packets in 2.078915s, 1.68us per packet
    Benchmarking decode 6/10
            Read in 1237119 packets in 1.906919s, 1.541us per packet
    Benchmarking decode 7/10
            Read in 1237119 packets in 2.057535s, 1.663us per packet
    Benchmarking decode 8/10
            Read in 1237119 packets in 1.933539s, 1.562us per packet
    Benchmarking decode 9/10
            Read in 1237119 packets in 2.027831s, 1.639us per packet
    Benchmarking decode 10/10
            Read in 1237119 packets in 1.895569s, 1.532us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 3ae46c0e13aa4d70a017e7ef61c08e1f319981b3
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356113204003085000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                8.19 ns/op
    BenchmarkMapLookup      50000000                37.0 ns/op
    BenchmarkNilMapLookup   100000000               25.3 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.81 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.35 ns/op
    BenchmarkLayerClassMapContains  50000000                44.5 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               747 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1211 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1894 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2126 ns/op
    BenchmarkDefault         1000000              2172 ns/op
    BenchmarkLazy    5000000               729 ns/op
    BenchmarkNoCopy  1000000              1696 ns/op
    BenchmarkLazyNoCopy      5000000               351 ns/op
    BenchmarkAlloc  10000000               142 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      100000000               27.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.7 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.7 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1200 ns/op
    ok      github.com/gconnell/gopacket/layers     48.958s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 966.082ms, 780ns per packet
    Read in 1237119 packets in 2.301384s, 1.86us per packet
    Time to both read and process: 3.267511s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 874.266ms, 706ns per packet
    Read in 1237119 packets in 2.372022s, 1.917us per packet
    Time to both read and process: 3.246329s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 698.629ms, 564ns per packet
    Read in 1237119 packets in 2.325792s, 1.88us per packet
    Time to both read and process: 3.024464s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 697.501ms, 563ns per packet
    Read in 1237119 packets in 2.333212s, 1.886us per packet
    Time to both read and process: 3.030754s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 685.022ms, 553ns per packet
    Read in 1237119 packets in 2.343702s, 1.894us per packet
    Time to both read and process: 3.028764s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 694.863ms, 561ns per packet
    Read in 1237119 packets in 2.349632s, 1.899us per packet
    Time to both read and process: 3.044537s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 693.811ms, 560ns per packet
    Read in 1237119 packets in 2.358872s, 1.906us per packet
    Time to both read and process: 3.052722s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 684.108ms, 552ns per packet
    Read in 1237119 packets in 2.679415s, 2.165us per packet
    Time to both read and process: 3.363563s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 693.02ms, 560ns per packet
    Read in 1237119 packets in 2.371987s, 1.917us per packet
    Time to both read and process: 3.065046s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 684.866ms, 553ns per packet
    Read in 1237119 packets in 2.366858s, 1.913us per packet
    Time to both read and process: 3.051764s

commit 531746c9c4cd1556afbea483bb3727194b064f6b
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 10:45:23 2012 -0700

    BENCH Switch to using nocopy for benchmarking.
    
    We really want to get benchmarks of how long packet decoding takes, so removing
    the copy time helps with that.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356111973920837000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                7.96 ns/op
    BenchmarkMapLookup      50000000                37.0 ns/op
    BenchmarkNilMapLookup   100000000               13.4 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.79 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               754 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1223 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1907 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2170 ns/op
    BenchmarkDefault         1000000              2146 ns/op
    BenchmarkLazy    5000000               759 ns/op
    BenchmarkNoCopy  1000000              1724 ns/op
    BenchmarkLazyNoCopy      5000000               357 ns/op
    BenchmarkAlloc  10000000               141 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                78.0 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.8 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1196 ns/op
    ok      github.com/gconnell/gopacket/layers     45.833s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 822.036ms, 664ns per packet
    Read in 1237119 packets in 2.061811s, 1.666us per packet
    Time to both read and process: 2.88389s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 747.657ms, 604ns per packet
    Read in 1237119 packets in 1.930455s, 1.56us per packet
    Time to both read and process: 2.678161s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 867.795ms, 701ns per packet
    Read in 1237119 packets in 2.052725s, 1.659us per packet
    Time to both read and process: 2.920561s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 709.104ms, 573ns per packet
    Read in 1237119 packets in 1.948075s, 1.574us per packet
    Time to both read and process: 2.65722s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 727.61ms, 588ns per packet
    Read in 1237119 packets in 1.868947s, 1.51us per packet
    Time to both read and process: 2.596595s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 899.276ms, 726ns per packet
    Read in 1237119 packets in 2.045405s, 1.653us per packet
    Time to both read and process: 2.944723s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 680.931ms, 550ns per packet
    Read in 1237119 packets in 1.991498s, 1.609us per packet
    Time to both read and process: 2.67247s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 707.674ms, 572ns per packet
    Read in 1237119 packets in 2.363394s, 1.91us per packet
    Time to both read and process: 3.07111s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 762.482ms, 616ns per packet
    Read in 1237119 packets in 2.3102s, 1.867us per packet
    Time to both read and process: 3.072723s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 731.755ms, 591ns per packet
    Read in 1237119 packets in 1.933227s, 1.562us per packet
    Time to both read and process: 2.66502s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 8c16150c3c4904d42e0aa29f79a979c8cd86d397
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356112059098784000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                8.05 ns/op
    BenchmarkMapLookup      50000000                37.2 ns/op
    BenchmarkNilMapLookup   200000000                8.09 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.81 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.34 ns/op
    BenchmarkLayerClassMapContains  50000000                46.7 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               761 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1223 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1939 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2127 ns/op
    BenchmarkDefault         1000000              2111 ns/op
    BenchmarkLazy    5000000               730 ns/op
    BenchmarkNoCopy  1000000              1698 ns/op
    BenchmarkLazyNoCopy      5000000               369 ns/op
    BenchmarkAlloc  10000000               144 ns/op
    BenchmarkFlow   10000000               242 ns/op
    BenchmarkEndpoints      100000000               27.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.8 ns/op
    BenchmarkCheckEthernetPrefix    50000000                39.9 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1198 ns/op
    ok      github.com/gconnell/gopacket/layers     49.288s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 842.342ms, 680ns per packet
    Read in 1237119 packets in 2.367036s, 1.913us per packet
    Time to both read and process: 3.209421s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 755.787ms, 610ns per packet
    Read in 1237119 packets in 1.92731s, 1.557us per packet
    Time to both read and process: 2.683138s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 869.375ms, 702ns per packet
    Read in 1237119 packets in 2.672132s, 2.159us per packet
    Time to both read and process: 3.541548s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 716.747ms, 579ns per packet
    Read in 1237119 packets in 2.506196s, 2.025us per packet
    Time to both read and process: 3.222983s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 725.312ms, 586ns per packet
    Read in 1237119 packets in 1.957319s, 1.582us per packet
    Time to both read and process: 2.682669s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 907.35ms, 733ns per packet
    Read in 1237119 packets in 2.060157s, 1.665us per packet
    Time to both read and process: 2.967546s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 691.438ms, 558ns per packet
    Read in 1237119 packets in 2.003698s, 1.619us per packet
    Time to both read and process: 2.695176s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 738.669ms, 597ns per packet
    Read in 1237119 packets in 1.934952s, 1.564us per packet
    Time to both read and process: 2.673661s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 768.708ms, 621ns per packet
    Read in 1237119 packets in 2.05237s, 1.658us per packet
    Time to both read and process: 2.821119s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 724.44ms, 585ns per packet
    Read in 1237119 packets in 1.953591s, 1.579us per packet
    Time to both read and process: 2.678069s

commit 837915cd4e6a626f8512c28b0abb8a509fd3e403
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 10:42:22 2012 -0700

    BENCH Fix all remaining layers to new decoding scheme.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356111769970496000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.97 ns/op
    BenchmarkMapLookup      50000000                37.0 ns/op
    BenchmarkNilMapLookup   100000000               25.2 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                46.1 ns/op
    BenchmarkLazyNoCopyEthLayer      5000000               746 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1204 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1864 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2122 ns/op
    BenchmarkDefault         1000000              2086 ns/op
    BenchmarkLazy    5000000               727 ns/op
    BenchmarkNoCopy  1000000              1690 ns/op
    BenchmarkLazyNoCopy      5000000               351 ns/op
    BenchmarkAlloc  10000000               141 ns/op
    BenchmarkFlow   10000000               238 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.6 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.3 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1199 ns/op
    ok      github.com/gconnell/gopacket/layers     51.115s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 857.765ms, 693ns per packet
    Read in 1237119 packets in 2.253597s, 1.821us per packet
    Time to both read and process: 3.111405s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 893.273ms, 722ns per packet
    Read in 1237119 packets in 2.811718s, 2.272us per packet
    Time to both read and process: 3.705046s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 709.867ms, 573ns per packet
    Read in 1237119 packets in 2.329755s, 1.883us per packet
    Time to both read and process: 3.039661s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 692.044ms, 559ns per packet
    Read in 1237119 packets in 2.632425s, 2.127us per packet
    Time to both read and process: 3.32451s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 689.795ms, 557ns per packet
    Read in 1237119 packets in 2.367993s, 1.914us per packet
    Time to both read and process: 3.057826s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 701.801ms, 567ns per packet
    Read in 1237119 packets in 2.827481s, 2.285us per packet
    Time to both read and process: 3.529322s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 692.379ms, 559ns per packet
    Read in 1237119 packets in 2.354448s, 1.903us per packet
    Time to both read and process: 3.046867s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 690.963ms, 558ns per packet
    Read in 1237119 packets in 2.360221s, 1.907us per packet
    Time to both read and process: 3.051224s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 684.409ms, 553ns per packet
    Read in 1237119 packets in 2.355436s, 1.903us per packet
    Time to both read and process: 3.039882s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 700.776ms, 566ns per packet
    Read in 1237119 packets in 2.847259s, 2.301us per packet
    Time to both read and process: 3.548075s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT b4d50fb081bd168975550d9fbbac557a2f7de8af
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    # github.com/gconnell/gopacket/layers
    layers/arp.go:38: undefined: gopacket.DecodeResult
    layers/cdp.go:36: undefined: gopacket.DecodeResult
    layers/ctp.go:67: undefined: gopacket.DecodeResult
    layers/ctp.go:83: undefined: gopacket.DecodeResult
    layers/dot1q.go:28: undefined: gopacket.DecodeResult
    layers/etherip.go:20: undefined: gopacket.DecodeResult
    layers/gre.go:32: undefined: gopacket.DecodeResult
    layers/icmp.go:25: undefined: gopacket.DecodeResult
    layers/ip6.go:33: undefined: gopacket.DecodeResult
    layers/ip6.go:95: undefined: gopacket.DecodeResult
    layers/ip6.go:95: too many errors
    FAIL    github.com/gconnell/gopacket/layers [build failed]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    # github.com/gconnell/gopacket/layers
    layers/arp.go:38: undefined: gopacket.DecodeResult
    layers/cdp.go:36: undefined: gopacket.DecodeResult
    layers/ctp.go:67: undefined: gopacket.DecodeResult
    layers/ctp.go:83: undefined: gopacket.DecodeResult
    layers/dot1q.go:28: undefined: gopacket.DecodeResult
    layers/etherip.go:20: undefined: gopacket.DecodeResult
    layers/gre.go:32: undefined: gopacket.DecodeResult
    layers/icmp.go:25: undefined: gopacket.DecodeResult
    layers/ip6.go:33: undefined: gopacket.DecodeResult
    layers/ip6.go:95: undefined: gopacket.DecodeResult
    layers/ip6.go:95: too many errors

commit e02521ba19b89fac8596776447a92adbae356684
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 10:02:57 2012 -0700

    BENCH Refactored lazy/eager packet stuff.
    
    NewPacket now creates either an eagerPacket or a lazyPacket, and packet is
    embedded within both.  lazyPacket and eagerPacket each implement *Layer*
    functions independently, based on how the packet is created (eager knows it has
    all layers, so it just returns what it has, lazy iteratively builds the packet
    as it needs to).
    
    Changed LayerCollector to PacketBuilder, and removed SpecificLayers, instead
    using Set*Layer functions to set a specific layer.
    
    Switched to using a defined function in packet (decodeError, or something like
    that, I forget :-/) to handle decode recovery, so we're not creating/using
    closures every time we need to decode a packet or layer.
    
    The new eager decoder only has to defer/recover once at the top-level instead of
    once per layer, which is a nice added bonus.
    
    PacketBuilder also gives us the nice ability to decode multiple layers within a
    single call, if we want to.  This is particularly important for IPv6 decoding,
    where the HopByHop layer may contain jumbogram info which affects the layer
    payload of the top-level IPv6 layer.  Now, it can do AddLayer, AddLayer,
    NextDecoder and everything will work out fine.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    ?       github.com/gconnell/gopacket/layers     [no test files]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 823.24ms, 665ns per packet
    Read in 1237119 packets in 2.760166s, 2.231us per packet
    Time to both read and process: 3.583442s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 1.033157s, 835ns per packet
    Read in 1237119 packets in 2.694029s, 2.177us per packet
    Time to both read and process: 3.727222s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 710.229ms, 574ns per packet
    Read in 1237119 packets in 2.857508s, 2.309us per packet
    Time to both read and process: 3.56777s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 715.808ms, 578ns per packet
    Read in 1237119 packets in 2.543235s, 2.055us per packet
    Time to both read and process: 3.259075s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 714.562ms, 577ns per packet
    Read in 1237119 packets in 2.809855s, 2.271us per packet
    Time to both read and process: 3.524453s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 747.068ms, 603ns per packet
    Read in 1237119 packets in 2.982182s, 2.41us per packet
    Time to both read and process: 3.729283s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 681.531ms, 550ns per packet
    Read in 1237119 packets in 2.939948s, 2.376us per packet
    Time to both read and process: 3.62151s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 686.712ms, 555ns per packet
    Read in 1237119 packets in 2.613022s, 2.112us per packet
    Time to both read and process: 3.299766s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 702.243ms, 567ns per packet
    Read in 1237119 packets in 2.638113s, 2.132us per packet
    Time to both read and process: 3.340388s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 698.967ms, 564ns per packet
    Read in 1237119 packets in 2.637855s, 2.132us per packet
    Time to both read and process: 3.336855s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 5483cc673683a96f2f1461461f9b7f9650f7612d
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    ?       github.com/gconnell/gopacket/layers     [no test files]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 845.729ms, 683ns per packet
    Read in 1237119 packets in 2.989809s, 2.416us per packet
    Time to both read and process: 3.835576s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 748.936ms, 605ns per packet
    Read in 1237119 packets in 2.910712s, 2.352us per packet
    Time to both read and process: 3.659681s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 717.979ms, 580ns per packet
    Read in 1237119 packets in 2.822472s, 2.281us per packet
    Time to both read and process: 3.540484s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 891.351ms, 720ns per packet
    Read in 1237119 packets in 2.859465s, 2.311us per packet
    Time to both read and process: 3.750847s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 777.279ms, 628ns per packet
    Read in 1237119 packets in 3.513606s, 2.84us per packet
    Time to both read and process: 4.290917s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 928.765ms, 750ns per packet
    Read in 1237119 packets in 2.8612s, 2.312us per packet
    Time to both read and process: 3.789998s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 732.606ms, 592ns per packet
    Read in 1237119 packets in 2.865391s, 2.316us per packet
    Time to both read and process: 3.598029s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 758.765ms, 613ns per packet
    Read in 1237119 packets in 2.843722s, 2.298us per packet
    Time to both read and process: 3.602521s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 773.069ms, 624ns per packet
    Read in 1237119 packets in 3.039907s, 2.457us per packet
    Time to both read and process: 3.813012s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 698.338ms, 564ns per packet
    Read in 1237119 packets in 2.999472s, 2.424us per packet
    Time to both read and process: 3.697844s

commit 32363c6a3e7b9d758b510d98d431e84fcc189a70
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 21 08:55:43 2012 -0700

    Add new benchmark.

commit 853f5f9501ed706a31533956ed502a2738145d65
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 17:45:03 2012 -0700

    Working on layerList stuff.

commit d8a5c1db9e786a10025ef70869e34b873e4c5c42
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 16:40:30 2012 -0700

    BENCH Added defer to catch errors.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    ?       github.com/gconnell/gopacket/layers     [no test files]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 833.287ms, 673ns per packet
    Read in 1237119 packets in 2.969978s, 2.4us per packet
    Time to both read and process: 3.803306s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 729.006ms, 589ns per packet
    Read in 1237119 packets in 2.918881s, 2.359us per packet
    Time to both read and process: 3.647918s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 726.356ms, 587ns per packet
    Read in 1237119 packets in 3.192293s, 2.58us per packet
    Time to both read and process: 3.91868s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 897.119ms, 725ns per packet
    Read in 1237119 packets in 2.85547s, 2.308us per packet
    Time to both read and process: 3.752623s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 775.135ms, 626ns per packet
    Read in 1237119 packets in 2.816754s, 2.276us per packet
    Time to both read and process: 3.591919s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 919.508ms, 743ns per packet
    Read in 1237119 packets in 2.844641s, 2.299us per packet
    Time to both read and process: 3.764183s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 733.9ms, 593ns per packet
    Read in 1237119 packets in 2.85606s, 2.308us per packet
    Time to both read and process: 3.589991s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 764.035ms, 617ns per packet
    Read in 1237119 packets in 2.830634s, 2.288us per packet
    Time to both read and process: 3.5947s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 939.497ms, 759ns per packet
    Read in 1237119 packets in 3.586419s, 2.899us per packet
    Time to both read and process: 4.525948s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 737.294ms, 595ns per packet
    Read in 1237119 packets in 2.945888s, 2.381us per packet
    Time to both read and process: 3.683214s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT bfbe1ef46e8411fb386dd95fb7614a2fcb086516
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    ?       github.com/gconnell/gopacket/layers     [no test files]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 824.984ms, 666ns per packet
    Read in 1237119 packets in 2.939054s, 2.375us per packet
    Time to both read and process: 3.764075s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 745.843ms, 602ns per packet
    Read in 1237119 packets in 2.836142s, 2.292us per packet
    Time to both read and process: 3.582018s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 899.964ms, 727ns per packet
    Read in 1237119 packets in 2.784016s, 2.25us per packet
    Time to both read and process: 3.684014s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 811.772ms, 656ns per packet
    Read in 1237119 packets in 2.970626s, 2.401us per packet
    Time to both read and process: 3.782429s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 712.203ms, 575ns per packet
    Read in 1237119 packets in 2.874573s, 2.323us per packet
    Time to both read and process: 3.586807s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 716.408ms, 579ns per packet
    Read in 1237119 packets in 2.837529s, 2.293us per packet
    Time to both read and process: 3.553971s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 742.445ms, 600ns per packet
    Read in 1237119 packets in 2.816168s, 2.276us per packet
    Time to both read and process: 3.558645s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 780.753ms, 631ns per packet
    Read in 1237119 packets in 2.962353s, 2.394us per packet
    Time to both read and process: 3.74314s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 700.334ms, 566ns per packet
    Read in 1237119 packets in 2.903859s, 2.347us per packet
    Time to both read and process: 3.604224s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 726.345ms, 587ns per packet
    Read in 1237119 packets in 2.875306s, 2.324us per packet
    Time to both read and process: 3.601685s

commit 2875ef83e5a8a6a2ab56f72748d034c330928223
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 16:16:41 2012 -0700

    BENCH First test of different method of decoding.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    ?       github.com/gconnell/gopacket/layers     [no test files]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 902.455ms, 729ns per packet
    Read in 1237119 packets in 2.95565s, 2.389us per packet
    Time to both read and process: 3.858155s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 749.528ms, 605ns per packet
    Read in 1237119 packets in 2.783619s, 2.25us per packet
    Time to both read and process: 3.533181s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 910.781ms, 736ns per packet
    Read in 1237119 packets in 2.816479s, 2.276us per packet
    Time to both read and process: 3.727295s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 804.526ms, 650ns per packet
    Read in 1237119 packets in 3.006795s, 2.43us per packet
    Time to both read and process: 3.811356s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 687.561ms, 555ns per packet
    Read in 1237119 packets in 2.933418s, 2.371us per packet
    Time to both read and process: 3.621012s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 693.244ms, 560ns per packet
    Read in 1237119 packets in 2.918476s, 2.359us per packet
    Time to both read and process: 3.611753s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 704.33ms, 569ns per packet
    Read in 1237119 packets in 2.883663s, 2.33us per packet
    Time to both read and process: 3.588027s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 728.129ms, 588ns per packet
    Read in 1237119 packets in 2.851865s, 2.305us per packet
    Time to both read and process: 3.580029s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 749.869ms, 606ns per packet
    Read in 1237119 packets in 2.796343s, 2.26us per packet
    Time to both read and process: 3.546246s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 780.672ms, 631ns per packet
    Read in 1237119 packets in 3.049694s, 2.465us per packet
    Time to both read and process: 3.830399s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 626160298e5e699b6f49e655eebce7f345f05c90
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    ?       github.com/gconnell/gopacket/layers     [no test files]
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    # github.com/gconnell/gopacket/layers
    layers/layertypes.go:10: undefined: decodeARP
    layers/layertypes.go:11: undefined: decodeCiscoDiscovery
    layers/layertypes.go:12: undefined: decodeEthernetCTP
    layers/layertypes.go:15: undefined: decodeDot1Q
    layers/layertypes.go:16: undefined: decodeEtherIP
    layers/layertypes.go:18: undefined: decodeGRE
    layers/layertypes.go:19: undefined: decodeICMP
    layers/layertypes.go:21: undefined: decodeIPv6
    layers/layertypes.go:22: undefined: decodeLLC
    layers/layertypes.go:23: undefined: decodeSNAP
    layers/layertypes.go:23: too many errors

commit b3ae71a4891fbd9a5ac255e68d840e207d38d6a7
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 15:59:46 2012 -0700

    Use different eager decode algorithm.

commit 878725eb336dbd6f5676b87f5971571b9addcfbc
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 15:13:25 2012 -0700

    BENCH Have TCP and IPv4 preallocate options.
    
    For both IPv4 and TCP, if they encounter at least one option, have them
    automatically preallocate 4 of them.  This saves us having to grow the options
    slice too much, if for example there are 3 options and we need to do 0->1, 1->2,
    2->4.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356041684130233000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.75 ns/op
    BenchmarkMapLookup      50000000                37.1 ns/op
    BenchmarkNilMapLookup   100000000               24.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               817 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1316 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2119 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2556 ns/op
    BenchmarkDefault          500000              3264 ns/op
    BenchmarkLazy    5000000               741 ns/op
    BenchmarkNoCopy  1000000              3039 ns/op
    BenchmarkLazyNoCopy      5000000               366 ns/op
    BenchmarkAlloc  10000000               142 ns/op
    BenchmarkFlow   10000000               241 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               214 ns/op
    BenchmarkCheckEthernetPrefix    50000000                39.9 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1822 ns/op
    ok      github.com/gconnell/gopacket/layers     52.206s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 922.855ms, 745ns per packet
    Read in 1237119 packets in 3.402187s, 2.75us per packet
    Time to both read and process: 4.325086s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 872.406ms, 705ns per packet
    Read in 1237119 packets in 3.477257s, 2.81us per packet
    Time to both read and process: 4.349701s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 703.23ms, 568ns per packet
    Read in 1237119 packets in 3.36997s, 2.724us per packet
    Time to both read and process: 4.073237s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 715.777ms, 578ns per packet
    Read in 1237119 packets in 3.294703s, 2.663us per packet
    Time to both read and process: 4.010519s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 742.341ms, 600ns per packet
    Read in 1237119 packets in 3.504791s, 2.833us per packet
    Time to both read and process: 4.24717s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 682.608ms, 551ns per packet
    Read in 1237119 packets in 3.509878s, 2.837us per packet
    Time to both read and process: 4.192525s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 685.981ms, 554ns per packet
    Read in 1237119 packets in 3.490565s, 2.821us per packet
    Time to both read and process: 4.176585s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 690.473ms, 558ns per packet
    Read in 1237119 packets in 3.848653s, 3.11us per packet
    Time to both read and process: 4.539166s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 683.884ms, 552ns per packet
    Read in 1237119 packets in 3.302358s, 2.669us per packet
    Time to both read and process: 3.986283s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 914.902ms, 739ns per packet
    Read in 1237119 packets in 3.329468s, 2.691us per packet
    Time to both read and process: 4.244409s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 2154982bb51270d7234761a0e41a30bcaf18c4c5
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356041790439388000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.69 ns/op
    BenchmarkMapLookup      50000000                37.3 ns/op
    BenchmarkNilMapLookup   100000000               24.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.9 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               820 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1302 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2585 ns/op
    BenchmarkLazyNoCopyAllLayers      500000              3064 ns/op
    BenchmarkDefault          500000              3594 ns/op
    BenchmarkLazy    5000000               740 ns/op
    BenchmarkNoCopy   500000              3231 ns/op
    BenchmarkLazyNoCopy      5000000               365 ns/op
    BenchmarkAlloc  10000000               140 ns/op
    BenchmarkFlow   10000000               241 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               215 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.2 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1803 ns/op
    ok      github.com/gconnell/gopacket/layers     50.203s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 820.21ms, 663ns per packet
    Read in 1237119 packets in 3.414546s, 2.76us per packet
    Time to both read and process: 4.2348s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 895.778ms, 724ns per packet
    Read in 1237119 packets in 3.523406s, 2.848us per packet
    Time to both read and process: 4.419223s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 684.57ms, 553ns per packet
    Read in 1237119 packets in 3.471083s, 2.805us per packet
    Time to both read and process: 4.155691s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 690.671ms, 558ns per packet
    Read in 1237119 packets in 3.492115s, 2.822us per packet
    Time to both read and process: 4.182824s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 677.608ms, 547ns per packet
    Read in 1237119 packets in 3.564682s, 2.881us per packet
    Time to both read and process: 4.242327s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 702.559ms, 567ns per packet
    Read in 1237119 packets in 3.590388s, 2.902us per packet
    Time to both read and process: 4.292998s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 747.731ms, 604ns per packet
    Read in 1237119 packets in 3.566845s, 2.883us per packet
    Time to both read and process: 4.314615s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 690.845ms, 558ns per packet
    Read in 1237119 packets in 3.537407s, 2.859us per packet
    Time to both read and process: 4.228288s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 688.854ms, 556ns per packet
    Read in 1237119 packets in 3.484596s, 2.816us per packet
    Time to both read and process: 4.173488s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 685.62ms, 554ns per packet
    Read in 1237119 packets in 3.497704s, 2.827us per packet
    Time to both read and process: 4.183365s

commit bfd272e6277085718942da35f0c77668aae5fea7
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 14:58:55 2012 -0700

    BENCH TCP and IPv4 options.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356040751889829000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.69 ns/op
    BenchmarkMapLookup      50000000                37.3 ns/op
    BenchmarkNilMapLookup   100000000               24.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.79 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               821 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1297 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2780 ns/op
    BenchmarkLazyNoCopyAllLayers      500000              3148 ns/op
    BenchmarkDefault          500000              3612 ns/op
    BenchmarkLazy    5000000               739 ns/op
    BenchmarkNoCopy   500000              3293 ns/op
    BenchmarkLazyNoCopy      5000000               362 ns/op
    BenchmarkAlloc  10000000               139 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               215 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.3 ns/op
    BenchmarkDecodePacketIPSecESP    1000000              1837 ns/op
    ok      github.com/gconnell/gopacket/layers     50.444s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 829.638ms, 670ns per packet
    Read in 1237119 packets in 3.416313s, 2.761us per packet
    Time to both read and process: 4.245999s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 880.817ms, 711ns per packet
    Read in 1237119 packets in 3.518772s, 2.844us per packet
    Time to both read and process: 4.399628s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 685.849ms, 554ns per packet
    Read in 1237119 packets in 3.459412s, 2.796us per packet
    Time to both read and process: 4.145301s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 696.32ms, 562ns per packet
    Read in 1237119 packets in 3.474693s, 2.808us per packet
    Time to both read and process: 4.17105s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 678.919ms, 548ns per packet
    Read in 1237119 packets in 3.483183s, 2.815us per packet
    Time to both read and process: 4.16214s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 679.331ms, 549ns per packet
    Read in 1237119 packets in 3.291516s, 2.66us per packet
    Time to both read and process: 3.970885s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 910.263ms, 735ns per packet
    Read in 1237119 packets in 3.337641s, 2.697us per packet
    Time to both read and process: 4.247942s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 762.116ms, 616ns per packet
    Read in 1237119 packets in 3.243041s, 2.621us per packet
    Time to both read and process: 4.005196s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 914.855ms, 739ns per packet
    Read in 1237119 packets in 3.345642s, 2.704us per packet
    Time to both read and process: 4.260533s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 772.305ms, 624ns per packet
    Read in 1237119 packets in 3.270889s, 2.643us per packet
    Time to both read and process: 4.043233s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 345d2498616a645c83c9ea552e25635ef1cd1b77
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356040855201437000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.48 ns/op
    BenchmarkMapLookup      50000000                36.8 ns/op
    BenchmarkNilMapLookup   100000000               15.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                49.8 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               820 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1278 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1777 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2276 ns/op
    BenchmarkDefault         1000000              2619 ns/op
    BenchmarkLazy    5000000               725 ns/op
    BenchmarkNoCopy  1000000              2233 ns/op
    BenchmarkLazyNoCopy      5000000               356 ns/op
    BenchmarkAlloc  20000000               121 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               216 ns/op
    BenchmarkCheckEthernetPrefix    50000000                39.9 ns/op
    ok      github.com/gconnell/gopacket/layers     49.847s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 855ms, 691ns per packet
    Read in 1237119 packets in 3.43375s, 2.775us per packet
    Time to both read and process: 4.288793s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 889.265ms, 718ns per packet
    Read in 1237119 packets in 3.363125s, 2.718us per packet
    Time to both read and process: 4.252428s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 775.591ms, 626ns per packet
    Read in 1237119 packets in 3.244424s, 2.622us per packet
    Time to both read and process: 4.020056s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 887.113ms, 717ns per packet
    Read in 1237119 packets in 3.37011s, 2.724us per packet
    Time to both read and process: 4.257264s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 740.344ms, 598ns per packet
    Read in 1237119 packets in 3.346689s, 2.705us per packet
    Time to both read and process: 4.087071s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 725.779ms, 586ns per packet
    Read in 1237119 packets in 3.594349s, 2.905us per packet
    Time to both read and process: 4.320166s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 736.159ms, 595ns per packet
    Read in 1237119 packets in 3.832508s, 3.097us per packet
    Time to both read and process: 4.568708s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 903.179ms, 730ns per packet
    Read in 1237119 packets in 3.401978s, 2.749us per packet
    Time to both read and process: 4.305197s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 743.417ms, 600ns per packet
    Read in 1237119 packets in 3.296404s, 2.664us per packet
    Time to both read and process: 4.039861s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 739.646ms, 597ns per packet
    Read in 1237119 packets in 3.330894s, 2.692us per packet
    Time to both read and process: 4.07058s

commit b8db49ba148f4aa8d1d69667e0a06163297aa58f
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 11:41:14 2012 -0700

    Slight test_creator refactoring for better testability.

commit 8e73b0c008de8d0e224e61b02b68c4592f6a7053
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 11:36:25 2012 -0700

    Testing stuff.
    
    Added a place for test helpers in layers (base_test).  Created a script to
    auto-generate test boilerplate from TCP packets using tcpdump output
    (test_creator.py).  Used it to generate IPSecESP test in ipsec_test.go.

commit 3830050d7609d98c643d59adde451c370e3d25e3
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 10:14:33 2012 -0700

    BENCH Benchmark, new eth headers, quick doc fix.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356023694509709000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.42 ns/op
    BenchmarkMapLookup      50000000                36.2 ns/op
    BenchmarkNilMapLookup   100000000               10.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.82 ns/op
    BenchmarkArrayLookup    2000000000               0.81 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.34 ns/op
    BenchmarkLayerClassMapContains  50000000                51.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               823 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1284 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1783 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2234 ns/op
    BenchmarkDefault         1000000              2617 ns/op
    BenchmarkLazy    5000000               735 ns/op
    BenchmarkNoCopy  1000000              2344 ns/op
    BenchmarkLazyNoCopy      5000000               381 ns/op
    BenchmarkAlloc  20000000               130 ns/op
    BenchmarkFlow   10000000               248 ns/op
    BenchmarkEndpoints      100000000               28.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               15.0 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               223 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.0 ns/op
    ok      github.com/gconnell/gopacket/layers     50.253s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 858.504ms, 693ns per packet
    Read in 1237119 packets in 3.403597s, 2.751us per packet
    Time to both read and process: 4.262143s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 907.021ms, 733ns per packet
    Read in 1237119 packets in 3.443942s, 2.783us per packet
    Time to both read and process: 4.351001s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 766.322ms, 619ns per packet
    Read in 1237119 packets in 3.38786s, 2.738us per packet
    Time to both read and process: 4.154219s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 755.735ms, 610ns per packet
    Read in 1237119 packets in 3.288859s, 2.658us per packet
    Time to both read and process: 4.044632s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 766.889ms, 619ns per packet
    Read in 1237119 packets in 3.277349s, 2.649us per packet
    Time to both read and process: 4.044273s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 925.868ms, 748ns per packet
    Read in 1237119 packets in 3.531426s, 2.854us per packet
    Time to both read and process: 4.457331s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 739.474ms, 597ns per packet
    Read in 1237119 packets in 3.312482s, 2.677us per packet
    Time to both read and process: 4.051995s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 942.643ms, 761ns per packet
    Read in 1237119 packets in 3.438116s, 2.779us per packet
    Time to both read and process: 4.380797s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 740.966ms, 598ns per packet
    Read in 1237119 packets in 3.447114s, 2.786us per packet
    Time to both read and process: 4.188128s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 727.634ms, 588ns per packet
    Read in 1237119 packets in 3.30055s, 2.667us per packet
    Time to both read and process: 4.02822s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 86430b0c9109c449bb4948a743aaefd1c4790685
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1356023799262707000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                7.89 ns/op
    BenchmarkMapLookup      50000000                37.8 ns/op
    BenchmarkNilMapLookup   100000000               18.9 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.82 ns/op
    BenchmarkArrayLookup    2000000000               0.87 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.38 ns/op
    BenchmarkLayerClassMapContains  50000000                46.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               845 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1327 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1811 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2302 ns/op
    BenchmarkDefault         1000000              2689 ns/op
    BenchmarkLazy    2000000               750 ns/op
    BenchmarkNoCopy  1000000              2310 ns/op
    BenchmarkLazyNoCopy      5000000               372 ns/op
    BenchmarkAlloc  20000000               127 ns/op
    BenchmarkFlow   10000000               244 ns/op
    BenchmarkEndpoints      100000000               28.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.7 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               217 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.8 ns/op
    ok      github.com/gconnell/gopacket/layers     46.799s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 842.362ms, 680ns per packet
    Read in 1237119 packets in 3.327971s, 2.69us per packet
    Time to both read and process: 4.170379s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 887.653ms, 717ns per packet
    Read in 1237119 packets in 3.330454s, 2.692us per packet
    Time to both read and process: 4.218144s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 771.014ms, 623ns per packet
    Read in 1237119 packets in 3.223884s, 2.605us per packet
    Time to both read and process: 3.994936s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 878.346ms, 709ns per packet
    Read in 1237119 packets in 3.294076s, 2.662us per packet
    Time to both read and process: 4.17246s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 744.462ms, 601ns per packet
    Read in 1237119 packets in 3.268614s, 2.642us per packet
    Time to both read and process: 4.013114s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 720.929ms, 582ns per packet
    Read in 1237119 packets in 3.302011s, 2.669us per packet
    Time to both read and process: 4.022978s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 740.105ms, 598ns per packet
    Read in 1237119 packets in 3.328117s, 2.69us per packet
    Time to both read and process: 4.068264s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 714.482ms, 577ns per packet
    Read in 1237119 packets in 3.440827s, 2.781us per packet
    Time to both read and process: 4.155347s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 711.145ms, 574ns per packet
    Read in 1237119 packets in 3.213415s, 2.597us per packet
    Time to both read and process: 3.9246s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 916.269ms, 740ns per packet
    Read in 1237119 packets in 3.370746s, 2.724us per packet
    Time to both read and process: 4.287056s

commit 7c9dabbf9bdd932d832bb76426839cc4851ba447
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 20 10:11:57 2012 -0700

    Add in more IPv6 extensions, and IPSec AH/ESP layers.

commit da2ccbda7311462c7ef9f7d3adbc3491d708fec6
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 19 22:21:30 2012 -0700

    Added 2 IPv6 extensions (hopbyhop, routing)

commit 7ccfcba027f66020634b87c17c8e7974f828772e
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 19 17:43:05 2012 -0700

    Added some more layer classes.

commit 24cd30c4a650962a0831ad9599f834fd2154f0cf
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 19 17:37:26 2012 -0700

    Added layer documentation and did some renaming.

commit 84e6933bf1933f565fd519c58e7c2e9241e08841
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 15:51:24 2012 -0700

    Some simple code moving and minor fixes.

commit 48c07dfeacdbdbb47d4f8b290e522372e1a85388
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 15:12:12 2012 -0700

    BENCH Benchmark after baselayer merge.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355868745559937000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.69 ns/op
    BenchmarkMapLookup      50000000                36.8 ns/op
    BenchmarkNilMapLookup   100000000               10.5 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                46.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               813 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1274 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1766 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2226 ns/op
    BenchmarkDefault         1000000              2619 ns/op
    BenchmarkLazy    5000000               744 ns/op
    BenchmarkNoCopy  1000000              2242 ns/op
    BenchmarkLazyNoCopy      5000000               359 ns/op
    BenchmarkAlloc  20000000               122 ns/op
    BenchmarkFlow   10000000               241 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               215 ns/op
    BenchmarkCheckEthernetPrefix    100000000               28.4 ns/op
    ok      github.com/gconnell/gopacket/layers     50.242s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 838.777ms, 678ns per packet
    Read in 1237119 packets in 3.32483s, 2.687us per packet
    Time to both read and process: 4.163652s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 892.155ms, 721ns per packet
    Read in 1237119 packets in 3.375919s, 2.728us per packet
    Time to both read and process: 4.268111s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 826.486ms, 668ns per packet
    Read in 1237119 packets in 3.252705s, 2.629us per packet
    Time to both read and process: 4.07923s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 740.098ms, 598ns per packet
    Read in 1237119 packets in 3.173745s, 2.565us per packet
    Time to both read and process: 3.913883s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 740.929ms, 598ns per packet
    Read in 1237119 packets in 3.172151s, 2.564us per packet
    Time to both read and process: 3.913118s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 758.097ms, 612ns per packet
    Read in 1237119 packets in 3.168839s, 2.561us per packet
    Time to both read and process: 3.926976s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 901.222ms, 728ns per packet
    Read in 1237119 packets in 3.300356s, 2.667us per packet
    Time to both read and process: 4.201614s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 725.673ms, 586ns per packet
    Read in 1237119 packets in 3.253415s, 2.629us per packet
    Time to both read and process: 3.979129s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 734.38ms, 593ns per packet
    Read in 1237119 packets in 3.292238s, 2.661us per packet
    Time to both read and process: 4.026657s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 716.391ms, 579ns per packet
    Read in 1237119 packets in 3.354194s, 2.711us per packet
    Time to both read and process: 4.070635s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 3220a0a913aad98a4ce6e53c421717753bc720a6
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355868847781179000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.47 ns/op
    BenchmarkMapLookup      50000000                36.2 ns/op
    BenchmarkNilMapLookup   200000000                8.13 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                46.6 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               790 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1232 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1685 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2144 ns/op
    BenchmarkDefault         1000000              2529 ns/op
    BenchmarkLazy    5000000               732 ns/op
    BenchmarkNoCopy  1000000              2173 ns/op
    BenchmarkLazyNoCopy      5000000               360 ns/op
    BenchmarkAlloc  20000000               103 ns/op
    BenchmarkFlow   10000000               241 ns/op
    BenchmarkEndpoints      100000000               27.7 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               216 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.8 ns/op
    ok      github.com/gconnell/gopacket/layers     49.886s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 824.353ms, 666ns per packet
    Read in 1237119 packets in 3.216477s, 2.599us per packet
    Time to both read and process: 4.040873s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 774.947ms, 626ns per packet
    Read in 1237119 packets in 3.14933s, 2.545us per packet
    Time to both read and process: 3.924315s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 732.772ms, 592ns per packet
    Read in 1237119 packets in 3.401832s, 2.749us per packet
    Time to both read and process: 4.134639s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 861.25ms, 696ns per packet
    Read in 1237119 packets in 3.346957s, 2.705us per packet
    Time to both read and process: 4.208249s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 710.955ms, 574ns per packet
    Read in 1237119 packets in 3.063766s, 2.476us per packet
    Time to both read and process: 3.774758s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 775.661ms, 626ns per packet
    Read in 1237119 packets in 3.112538s, 2.515us per packet
    Time to both read and process: 3.888237s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 750.242ms, 606ns per packet
    Read in 1237119 packets in 3.163411s, 2.557us per packet
    Time to both read and process: 3.91369s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 731.487ms, 591ns per packet
    Read in 1237119 packets in 3.040765s, 2.457us per packet
    Time to both read and process: 3.77229s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 921.029ms, 744ns per packet
    Read in 1237119 packets in 3.170937s, 2.563us per packet
    Time to both read and process: 4.092006s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 735.391ms, 594ns per packet
    Read in 1237119 packets in 3.043584s, 2.46us per packet
    Time to both read and process: 3.779013s

commit 6ec8e2fad68f8d4ea05c2e35347882bbcb760992
Merge: dd47781 da45987
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 15:03:38 2012 -0700

    Merge branch 'master' into baselayer

commit da45987500f716829e8a3f79f79a2e977be4124a
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 14:52:04 2012 -0700

    BENCH Changed benchmark to count read vs. decode times seperately.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355867547430048000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.50 ns/op
    BenchmarkMapLookup      50000000                36.6 ns/op
    BenchmarkNilMapLookup   100000000               26.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.80 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                48.9 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               791 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1225 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1690 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2145 ns/op
    BenchmarkDefault         1000000              2536 ns/op
    BenchmarkLazy    5000000               736 ns/op
    BenchmarkNoCopy  1000000              2193 ns/op
    BenchmarkLazyNoCopy      5000000               358 ns/op
    BenchmarkAlloc  20000000               103 ns/op
    BenchmarkFlow   10000000               243 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.6 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               216 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.1 ns/op
    ok      github.com/gconnell/gopacket/layers     49.995s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    1/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 834.685ms, 674ns per packet
    Read in 1237119 packets in 3.201312s, 2.587us per packet
    Time to both read and process: 4.036039s
    2/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 774.823ms, 626ns per packet
    Read in 1237119 packets in 3.13513s, 2.534us per packet
    Time to both read and process: 3.90999s
    3/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 732.036ms, 591ns per packet
    Read in 1237119 packets in 3.071771s, 2.483us per packet
    Time to both read and process: 3.803844s
    4/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 863.861ms, 698ns per packet
    Read in 1237119 packets in 3.332608s, 2.693us per packet
    Time to both read and process: 4.196506s
    5/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 711.553ms, 575ns per packet
    Read in 1237119 packets in 3.054473s, 2.469us per packet
    Time to both read and process: 3.766065s
    6/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 773.551ms, 625ns per packet
    Read in 1237119 packets in 3.098567s, 2.504us per packet
    Time to both read and process: 3.872154s
    7/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 747.02ms, 603ns per packet
    Read in 1237119 packets in 3.15828s, 2.552us per packet
    Time to both read and process: 3.90534s
    8/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 734.501ms, 593ns per packet
    Read in 1237119 packets in 3.032571s, 2.451us per packet
    Time to both read and process: 3.767112s
    9/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 922.299ms, 745ns per packet
    Read in 1237119 packets in 3.179056s, 2.569us per packet
    Time to both read and process: 4.101393s
    10/10: Opening file "/tmp/gopacket_benchmark.pcap" for read
    Reading packet data into memory: 1237119 packets in 737.01ms, 595ns per packet
    Read in 1237119 packets in 3.038258s, 2.455us per packet
    Time to both read and process: 3.775308s
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT cb767edc4bbef1a1df00a837f127a3e9f6494f56
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355867647624843000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.44 ns/op
    BenchmarkMapLookup      100000000               28.4 ns/op
    BenchmarkNilMapLookup   100000000               16.3 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.34 ns/op
    BenchmarkLayerClassMapContains  50000000                38.9 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               799 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1225 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1700 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2196 ns/op
    BenchmarkDefault         1000000              2574 ns/op
    BenchmarkLazy    5000000               731 ns/op
    BenchmarkNoCopy  1000000              2210 ns/op
    BenchmarkLazyNoCopy      5000000               358 ns/op
    BenchmarkAlloc  20000000               101 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      100000000               28.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.8 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               216 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.0 ns/op
    ok      github.com/gconnell/gopacket/layers     49.238s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.789598s, 3.871us per packet

commit dd47781124c3ea7332251d05037bfa8a1c97333f
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 11:09:32 2012 -0700

    Forgot to add this file earlier :-/

commit 23b8c1a0c227c778d5746095b99bfdef9d909903
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 10:36:36 2012 -0700

    BENCH Straaaange CPU optimization.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355852218974323000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.68 ns/op
    BenchmarkMapLookup      50000000                35.9 ns/op
    BenchmarkNilMapLookup   100000000               20.2 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.79 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.37 ns/op
    BenchmarkLayerClassMapContains  50000000                46.5 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               812 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1274 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1769 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2213 ns/op
    BenchmarkDefault         1000000              2601 ns/op
    BenchmarkLazy    5000000               738 ns/op
    BenchmarkNoCopy  1000000              2226 ns/op
    BenchmarkLazyNoCopy      5000000               357 ns/op
    BenchmarkAlloc  20000000               122 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               218 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.8 ns/op
    ok      github.com/gconnell/gopacket/layers     50.287s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.07132s, 3.29us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT e7a0056bb719a404558b04c83e80a112647a6aec
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355852283969798000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.69 ns/op
    BenchmarkMapLookup      50000000                35.8 ns/op
    BenchmarkNilMapLookup   500000000               13.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.79 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                44.6 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               811 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1273 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1762 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2205 ns/op
    BenchmarkDefault         1000000              2589 ns/op
    BenchmarkLazy    5000000               727 ns/op
    BenchmarkNoCopy  1000000              2216 ns/op
    BenchmarkLazyNoCopy      5000000               360 ns/op
    BenchmarkAlloc  20000000               121 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               211 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.9 ns/op
    ok      github.com/gconnell/gopacket/layers     55.309s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 5.07816s, 4.104us per packet

commit 3299fc0432a34bb06cef1e21092dacaeb402df9f
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 18 10:06:20 2012 -0700

    BENCH Give Layer 2 more functions, remove RemainingBytes from DecodeResult.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355850405880303000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.69 ns/op
    BenchmarkMapLookup      50000000                35.8 ns/op
    BenchmarkNilMapLookup   100000000               18.4 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.82 ns/op
    BenchmarkArrayLookup    2000000000               0.81 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                44.6 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               811 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1272 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1760 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2213 ns/op
    BenchmarkDefault         1000000              2600 ns/op
    BenchmarkLazy    5000000               737 ns/op
    BenchmarkNoCopy  1000000              2218 ns/op
    BenchmarkLazyNoCopy      5000000               360 ns/op
    BenchmarkAlloc  20000000               121 ns/op
    BenchmarkFlow   10000000               239 ns/op
    BenchmarkEndpoints      100000000               27.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               211 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.5 ns/op
    ok      github.com/gconnell/gopacket/layers     49.831s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.97194s, 4.018us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT cb767edc4bbef1a1df00a837f127a3e9f6494f56
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355850471921469000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.42 ns/op
    BenchmarkMapLookup      100000000               29.9 ns/op
    BenchmarkNilMapLookup   100000000               11.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.53 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                39.0 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               810 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1240 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1714 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2184 ns/op
    BenchmarkDefault         1000000              2570 ns/op
    BenchmarkLazy    5000000               731 ns/op
    BenchmarkNoCopy  1000000              2190 ns/op
    BenchmarkLazyNoCopy      5000000               357 ns/op
    BenchmarkAlloc  20000000               101 ns/op
    BenchmarkFlow   10000000               237 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               214 ns/op
    BenchmarkCheckEthernetPrefix    50000000                39.4 ns/op
    ok      github.com/gconnell/gopacket/layers     48.738s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 3.951251s, 3.193us per packet

commit 5f0e9d34cf5cca678deb41e89fec69fcdec5f124
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 18:42:35 2012 -0700

    More documentation fixes.

commit bfee91392c0f231535927ac8001e0a984dca9b26
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 18:31:26 2012 -0700

    Pass Metadata structs into RegisterFooType calls.

commit 287db6b6f9fd0bbda764133f1551f18c1f5881f3
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 18:19:42 2012 -0700

    Updated docs, added endpoint constructors.

commit 322b416485b2d7dd1bce7699d4b5a8e83f9a7092
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 15:26:30 2012 -0700

    BENCH Rename DecoderFunc to DecodeFunc, benchmark.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355783208471174000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.46 ns/op
    BenchmarkMapLookup      100000000               29.6 ns/op
    BenchmarkNilMapLookup   200000000               14.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                44.8 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               806 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1251 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1767 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2391 ns/op
    BenchmarkDefault         1000000              2755 ns/op
    BenchmarkLazy    2000000               765 ns/op
    BenchmarkNoCopy  1000000              2241 ns/op
    BenchmarkLazyNoCopy      5000000               365 ns/op
    BenchmarkAlloc  20000000               104 ns/op
    BenchmarkFlow   10000000               246 ns/op
    BenchmarkEndpoints      50000000                29.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.8 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               218 ns/op
    BenchmarkCheckEthernetPrefix    50000000                41.0 ns/op
    ok      github.com/gconnell/gopacket/layers     49.379s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 3.982002s, 3.218us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT c05295d9317f622e964096030125ea9a0d62f067
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355783272998985000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.42 ns/op
    BenchmarkMapLookup      100000000               30.0 ns/op
    BenchmarkNilMapLookup   500000000                7.87 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.36 ns/op
    BenchmarkLayerClassMapContains  50000000                41.5 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               856 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1251 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1718 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2332 ns/op
    BenchmarkDefault         1000000              2701 ns/op
    BenchmarkLazy    2000000               893 ns/op
    BenchmarkNoCopy  1000000              2629 ns/op
    BenchmarkLazyNoCopy      5000000               441 ns/op
    BenchmarkAlloc  20000000               124 ns/op
    BenchmarkFlow   10000000               296 ns/op
    BenchmarkEndpoints      50000000                33.1 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               18.9 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               257 ns/op
    BenchmarkCheckEthernetPrefix    50000000                44.1 ns/op
    ok      github.com/gconnell/gopacket/layers     53.387s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.736487s, 3.828us per packet

commit 1be7ee692e3866fc4f2cab3bb2b8f12692ae55fa
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 15:17:49 2012 -0700

    Generate new macs.

commit dea6b3947ac7df532f4a1ee3b265578996443756
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 14:31:24 2012 -0700

    Random readability changes.

commit 8619a4865f3b6aefe5520dc966960d62ceb28d21
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 14:17:33 2012 -0700

    BENCH Remove enum LayerType indirection.
    
    On the pcap benchmark, this indirection was costing us a 26% increase in
    processing time per packet.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355779119349094000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.43 ns/op
    BenchmarkMapLookup      100000000               28.6 ns/op
    BenchmarkNilMapLookup   100000000               26.3 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                42.1 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               797 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1230 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1749 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2187 ns/op
    BenchmarkDefault         1000000              2565 ns/op
    BenchmarkLazy    5000000               727 ns/op
    BenchmarkNoCopy  1000000              2188 ns/op
    BenchmarkLazyNoCopy      5000000               356 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               216 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.3 ns/op
    ok      github.com/gconnell/gopacket/layers     50.208s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 3.951776s, 3.194us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 2699929f08cf7075019fa059176b0d5e20619bde
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355779184629917000
    CHUNK TYPE 211, 217 bytes leftNo crash to see here... continuing with testing
    CHUNK TYPE 1, 36 bytes leftCHUNK TYPE 2, 260 bytes leftCHUNK TYPE 10, 256 bytes leftCHUNK TYPE 0, 24 bytes leftCHUNK TYPE 11, 20 bytes leftCHUNK TYPE 3, 16 bytes leftCHUNK TYPE 0, 28 bytes leftCHUNK TYPE 3, 16 bytes leftCHUNK TYPE 7, 8 bytes leftCHUNK TYPE 8, 4 bytes leftCHUNK TYPE 14, 4 bytes leftPASS
    BenchmarkTypeAssertion  500000000                7.50 ns/op
    BenchmarkMapLookup      100000000               28.8 ns/op
    BenchmarkNilMapLookup   200000000                9.57 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                45.1 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               849 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1356 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1971 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2357 ns/op
    BenchmarkDefault         1000000              2700 ns/op
    BenchmarkLazy    5000000               732 ns/op
    BenchmarkNoCopy  1000000              2335 ns/op
    BenchmarkLazyNoCopy      5000000               357 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.6 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               221 ns/op
    BenchmarkCheckEthernetPrefix    100000000               30.1 ns/op
    ok      github.com/gconnell/gopacket/layers     52.697s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 5.162466s, 4.172us per packet

commit 0f89b3b596fb4a1fe769d966ab6937ecb6445408
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 14:07:51 2012 -0700

    Remove debug print statement.

commit 28da95f14f300041eef60c46789246affbf96e32
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 14:04:06 2012 -0700

    BENCH Fix refactor to compile.
    
    Fix everything up so the recompile actually works.  EndpointType became its own
    registered type.  Lots of changing what comes from where.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    ?       github.com/gconnell/gopacket    [no test files]
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355778283839645000
    No crash to see here... continuing with testing
    CHUNK TYPE 1, 36 bytes leftCHUNK TYPE 2, 260 bytes leftCHUNK TYPE 10, 256 bytes leftCHUNK TYPE 0, 24 bytes leftCHUNK TYPE 11, 20 bytes leftCHUNK TYPE 3, 16 bytes leftCHUNK TYPE 0, 28 bytes leftCHUNK TYPE 3, 16 bytes leftCHUNK TYPE 7, 8 bytes leftCHUNK TYPE 8, 4 bytes leftCHUNK TYPE 14, 4 bytes leftPASS
    BenchmarkTypeAssertion  500000000                7.41 ns/op
    BenchmarkMapLookup      100000000               28.6 ns/op
    BenchmarkNilMapLookup   100000000               25.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.54 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                39.0 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               840 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1332 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1861 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2378 ns/op
    BenchmarkDefault         1000000              2729 ns/op
    BenchmarkLazy    2000000               755 ns/op
    BenchmarkNoCopy  1000000              2340 ns/op
    BenchmarkLazyNoCopy      5000000               366 ns/op
    BenchmarkAlloc  20000000               104 ns/op
    BenchmarkFlow   10000000               240 ns/op
    BenchmarkEndpoints      100000000               27.5 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 10000000               211 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.3 ns/op
    ok      github.com/gconnell/gopacket/layers     48.696s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 5.006471s, 4.046us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 1d26f175564ffe9b2a73d45e96059b7872f996d6
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355778348937837000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.42 ns/op
    BenchmarkMapLookup      100000000               29.7 ns/op
    BenchmarkNilMapLookup   100000000               24.6 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.79 ns/op
    BenchmarkArrayLookup    2000000000               0.85 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.32 ns/op
    BenchmarkLayerClassMapContains  50000000                37.6 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               799 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1232 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1702 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2122 ns/op
    BenchmarkDefault         1000000              2499 ns/op
    BenchmarkLazy    5000000               716 ns/op
    BenchmarkNoCopy  1000000              2130 ns/op
    BenchmarkLazyNoCopy      5000000               354 ns/op
    BenchmarkAlloc  20000000               101 ns/op
    BenchmarkFlow   10000000               229 ns/op
    BenchmarkEndpoints      100000000               27.8 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.1 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                81.2 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.1 ns/op
    ok      github.com/gconnell/gopacket    49.362s
    ?       github.com/gconnell/gopacket/pcap       [no test files]
    ?       github.com/gconnell/gopacket/pfring     [no test files]
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 3.882138s, 3.138us per packet

commit 74752917c5edbc4376fd7490d6273909955b4974
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 11:55:31 2012 -0700

    Added layer type registration.
    
    Added layer type registration for all layers in a seperate file, so that it's
    easier to see which layer type numbers have already been used.

commit 8e81613b8545091a50deee09a3dea8de22058aa8
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 11:31:35 2012 -0700

    Remove layer of indirection from layer type.

commit 29dc09a5dbe6785a8e333f5f51aeca798baaebc5
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 11:24:58 2012 -0700

    Initial refactoring for layer move.
    
    To clean up the gopacket namespace, I'm trying to move all layers into a layers/
    subdirectory.  This involves some trickery with layer types to avoid circular
    dependencies, see RegisterLayerType in layertype.go.

commit c594ba75e5421d3f66988f23f272e96eaf38afe4
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 10:44:31 2012 -0700

    Update/add lots of documentation.

commit 0e41843086e2a46afe5069167d5222abcf7260ea
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 10:14:15 2012 -0700

    Renaming of read/write methods.
    
    Renamed NextPacketData to ReadPacketData, Inject to WritePacketData.  In pfring,
    changed socket mode to Read/Write names.

commit 621d693b8baaab1e3efd38aa68210cde86d1cede
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 10:08:01 2012 -0700

    Added --gen to gc, generated new mac prefixes.

commit 3390c9c614290b8d56a4041297ba0437e33ea181
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 10:04:13 2012 -0700

    Added simple pfring test binary.

commit 1ad77ff3db198dd0d23b77cdcaef02abaab44dc5
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 09:41:12 2012 -0700

    Add lots of comments, and speed up Inject.
    
    Inject is sped up by avoiding a spurious data copy.

commit 60accc42c63581526ffd17467e849606bd86f2c9
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 17 09:29:32 2012 -0700

    Modify PFRing to avoid an extra packet copy.

commit 38e177baf0bd899430ef6b4b0ff3bf94c9a7e136
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 17:58:24 2012 -0700

    BENCH Fixed up packet source interface.
    
    Made the packet source interface a little less leaky.  Made pcap and pfring
    PacketDataSources, and made a PacketSource that kept track of the source, plus
    the decoder and decode options, so pcap and pfring didn't need to carry a
    decoder around.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355533166794004000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.62 ns/op
    BenchmarkMapLookup      100000000               29.1 ns/op
    BenchmarkNilMapLookup   100000000               14.2 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.84 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.39 ns/op
    BenchmarkLayerClassMapContains  50000000                38.8 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               807 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1314 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1771 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2188 ns/op
    BenchmarkDefault         1000000              2528 ns/op
    BenchmarkLazy    5000000               734 ns/op
    BenchmarkNoCopy  1000000              2170 ns/op
    BenchmarkLazyNoCopy      5000000               372 ns/op
    BenchmarkAlloc  20000000               105 ns/op
    BenchmarkFlow   10000000               235 ns/op
    BenchmarkEndpoints      100000000               28.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                80.2 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.9 ns/op
    ok      github.com/gconnell/gopacket    49.416s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.010638s, 3.241us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT bbce9b92e7e57e670f508c53c585d9e93a543b25
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355533233119719000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.51 ns/op
    BenchmarkMapLookup      100000000               30.1 ns/op
    BenchmarkNilMapLookup   100000000               21.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.84 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                37.7 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               812 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1262 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1727 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2157 ns/op
    BenchmarkDefault         1000000              2543 ns/op
    BenchmarkLazy    5000000               725 ns/op
    BenchmarkNoCopy  1000000              2145 ns/op
    BenchmarkLazyNoCopy      5000000               357 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.2 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.5 ns/op
    BenchmarkCheckEthernetPrefix    50000000                39.2 ns/op
    ok      github.com/gconnell/gopacket    49.503s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.817511s, 3.894us per packet

commit 223b63ab463b501460e20b6fa979766e037959d2
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 17:27:10 2012 -0700

    BENCH Really make pfring implement PacketSource.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355531251164782000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.49 ns/op
    BenchmarkMapLookup      100000000               28.2 ns/op
    BenchmarkNilMapLookup   100000000               13.3 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.84 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                37.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               804 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1245 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1724 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2150 ns/op
    BenchmarkDefault         1000000              2537 ns/op
    BenchmarkLazy    5000000               755 ns/op
    BenchmarkNoCopy  1000000              2153 ns/op
    BenchmarkLazyNoCopy      5000000               363 ns/op
    BenchmarkAlloc  20000000               103 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.3 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.4 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.1 ns/op
    ok      github.com/gconnell/gopacket    48.535s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.901333s, 3.961us per packet
    ----------------------------------------------------------
    BENCHMARKING AGAINST COMMIT 38473894c0ba88778fe2a3132e218bae7c89487a
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355531317537108000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.47 ns/op
    BenchmarkMapLookup      100000000               29.8 ns/op
    BenchmarkNilMapLookup   100000000               25.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.83 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                37.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               804 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1244 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1713 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2147 ns/op
    BenchmarkDefault         1000000              2514 ns/op
    BenchmarkLazy    5000000               725 ns/op
    BenchmarkNoCopy  1000000              2150 ns/op
    BenchmarkLazyNoCopy      5000000               358 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.3 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.3 ns/op
    BenchmarkCheckEthernetPrefix    50000000                40.3 ns/op
    ok      github.com/gconnell/gopacket    49.740s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.736237s, 3.828us per packet

commit 1fc7cd9fa93124e83efa6c6f436159ea8cbf820f
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 17:24:52 2012 -0700

    Added PacketSource interface, made pcap and pfring implement it.

commit eb408ff295ac5397c7632c5e18cd180b72157a56
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 17:01:41 2012 -0700

    Added tons of PFRing wrappers.

commit 2ac581ce5fdbc71ff5585ce9c0c7078004a5d3b4
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 15:54:48 2012 -0700

    Starting support for PFRing, compile works.

commit d313a327a2ba6cb6690962de39a4ab0ca1998bac
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 10:03:04 2012 -0700

    Added %#v output to errors, for easier test writing.

commit 358265001f0322497e8bc0f51d75700e73341104
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 09:36:28 2012 -0700

    Store which commit we're benchmarking against.

commit 1419877911ddede6458f1b68cfc82db044c48f4e
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 14 09:14:05 2012 -0700

    BENCH Move packet decode out of cgo file, into its own file.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355501669846861000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.47 ns/op
    BenchmarkMapLookup      100000000               28.6 ns/op
    BenchmarkNilMapLookup   100000000               11.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.83 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                37.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               800 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1256 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1732 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2172 ns/op
    BenchmarkDefault         1000000              2531 ns/op
    BenchmarkLazy    5000000               731 ns/op
    BenchmarkNoCopy  1000000              2163 ns/op
    BenchmarkLazyNoCopy      5000000               361 ns/op
    BenchmarkAlloc  20000000               103 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               27.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.2 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.1 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.4 ns/op
    ok      github.com/gconnell/gopacket    48.266s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.747834s, 3.837us per packet
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355501734735901000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.50 ns/op
    BenchmarkMapLookup      100000000               28.7 ns/op
    BenchmarkNilMapLookup   100000000               19.7 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               1.17 ns/op
    BenchmarkArrayLookup    2000000000               1.05 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.34 ns/op
    BenchmarkLayerClassMapContains  50000000                38.1 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               807 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1252 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              2049 ns/op
    BenchmarkLazyNoCopyAllLayers      500000              2441 ns/op
    BenchmarkDefault         1000000              2538 ns/op
    BenchmarkLazy    5000000               733 ns/op
    BenchmarkNoCopy  1000000              2155 ns/op
    BenchmarkLazyNoCopy      5000000               360 ns/op
    BenchmarkAlloc  20000000               118 ns/op
    BenchmarkFlow    5000000               390 ns/op
    BenchmarkEndpoints      50000000                34.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.3 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.6 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.1 ns/op
    ok      github.com/gconnell/gopacket    48.964s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.720974s, 3.816us per packet

commit 9bfae7249387b5811cd4825752efcf4e99701499
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 11:05:18 2012 -0700

    BENCH Minor gc changes.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355421931345491000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.63 ns/op
    BenchmarkMapLookup      100000000               30.1 ns/op
    BenchmarkNilMapLookup   200000000               10.9 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.84 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.37 ns/op
    BenchmarkLayerClassMapContains  50000000                39.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               805 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1242 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1711 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2139 ns/op
    BenchmarkDefault         1000000              2538 ns/op
    BenchmarkLazy    5000000               721 ns/op
    BenchmarkNoCopy  1000000              2140 ns/op
    BenchmarkLazyNoCopy      5000000               356 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.4 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               15.5 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.9 ns/op
    BenchmarkCheckEthernetPrefix    50000000                37.0 ns/op
    ok      github.com/gconnell/gopacket    50.551s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.748623s, 3.838us per packet
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355421997326568000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.46 ns/op
    BenchmarkMapLookup      100000000               30.0 ns/op
    BenchmarkNilMapLookup   200000000                8.29 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.84 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.33 ns/op
    BenchmarkLayerClassMapContains  50000000                37.4 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               783 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1231 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1703 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2137 ns/op
    BenchmarkDefault         1000000              2516 ns/op
    BenchmarkLazy    5000000               724 ns/op
    BenchmarkNoCopy  1000000              2136 ns/op
    BenchmarkLazyNoCopy      5000000               347 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.3 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.0 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.6 ns/op
    ok      github.com/gconnell/gopacket    49.477s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.745753s, 3.836us per packet

commit 4543c1f8e26836bfae2941c73db2967f196532e8
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 10:50:46 2012 -0700

    Added comments and CaptureInfo 'Populated' field.

commit 0224457173b1467b89342d1b008435d139258df9
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 10:40:26 2012 -0700

    Added lots of comments to gc.

commit 0bbfe75a0b0aedb35da9a094fb937b40aac84223
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 10:33:33 2012 -0700

    More gc improvements, play nicely with git.
    
    ----------------------------------------------------------
    BENCHMARK_MARKER_DO_NOT_CHANGE
    ----------------------------------------------------------
    
    TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355420034837271000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                8.81 ns/op
    BenchmarkMapLookup      50000000                34.8 ns/op
    BenchmarkNilMapLookup   100000000               17.8 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.94 ns/op
    BenchmarkArrayLookup    2000000000               0.99 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.57 ns/op
    BenchmarkLayerClassMapContains  50000000                45.0 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               903 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1253 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1700 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2135 ns/op
    BenchmarkDefault         1000000              2506 ns/op
    BenchmarkLazy    5000000               714 ns/op
    BenchmarkNoCopy  1000000              2133 ns/op
    BenchmarkLazyNoCopy      5000000               345 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               15.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.2 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.1 ns/op
    ok      github.com/gconnell/gopacket    47.575s
    
    PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 5.549974s, 4.486us per packet
    ----------------------------------------------------------
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355420099615782000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                8.84 ns/op
    BenchmarkMapLookup      50000000                35.5 ns/op
    BenchmarkNilMapLookup   200000000               13.2 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.95 ns/op
    BenchmarkArrayLookup    2000000000               0.99 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.57 ns/op
    BenchmarkLayerClassMapContains  50000000                45.2 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               933 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1267 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1698 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2139 ns/op
    BenchmarkDefault         1000000              2500 ns/op
    BenchmarkLazy    5000000               709 ns/op
    BenchmarkNoCopy  1000000              2140 ns/op
    BenchmarkLazyNoCopy      5000000               345 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               28.0 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               15.4 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                77.7 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.0 ns/op
    ok      github.com/gconnell/gopacket    49.554s
    
    OLD PCAP BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 5.612544s, 4.536us per packet

commit 3811434545ff344056d6e85c284754659094b7d1
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 10:30:37 2012 -0700

    More gc hacking.

commit 45a94bd61046893d21517e4d4acc3d9ad751d2be
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 10:22:42 2012 -0700

    Add url to benchmarker, improve 'gc' greatly.

commit 5b9d7c92949dacb3561374595d466e4333017335
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 10:00:04 2012 -0700

    Add ability to run 'gc' without doing all the benchmarks.

commit d4125f5dd85939bfe5cf54c601a39d839d33b31f
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 09:56:06 2012 -0700

    First benchmark marker.
    
    BENCHMARK_MARKER_DO_NOT_CHANGE

commit dfce3e4fcd7a8e2264e9986b15134677ccd6b608
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 09:46:09 2012 -0700

    First attempt to fix ./gc such that it outputs benchmarks.
    
    TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355417111276762000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  500000000                7.48 ns/op
    BenchmarkMapLookup      50000000                28.7 ns/op
    BenchmarkNilMapLookup   100000000               10.3 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.80 ns/op
    BenchmarkArrayLookup    2000000000               0.84 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.36 ns/op
    BenchmarkLayerClassMapContains  50000000                38.2 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               796 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1255 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1716 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2180 ns/op
    BenchmarkDefault         1000000              2513 ns/op
    BenchmarkLazy    5000000               714 ns/op
    BenchmarkNoCopy  1000000              2201 ns/op
    BenchmarkLazyNoCopy      5000000               348 ns/op
    BenchmarkAlloc  20000000               105 ns/op
    BenchmarkFlow   10000000               234 ns/op
    BenchmarkEndpoints      100000000               28.2 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.3 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.4 ns/op
    BenchmarkCheckEthernetPrefix    50000000                38.8 ns/op
    ok      github.com/gconnell/gopacket    46.842s
    
    PACKET BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.681717s, 3.784us per packet
    
    OLD TEST BENCHMARKS
    If you see a crash here, it's serious business.  Report it!
    Send this number with any crash reports: 1355417175058066000
    No crash to see here... continuing with testing
    PASS
    BenchmarkTypeAssertion  200000000                8.04 ns/op
    BenchmarkMapLookup      100000000               28.6 ns/op
    BenchmarkNilMapLookup   100000000               25.1 ns/op
    BenchmarkNilMapLookupWithNilCheck       2000000000               0.94 ns/op
    BenchmarkArrayLookup    2000000000               0.91 ns/op
    BenchmarkLayerClassSliceContains        2000000000               1.35 ns/op
    BenchmarkLayerClassMapContains  50000000                39.3 ns/op
    BenchmarkLazyNoCopyEthLayer      2000000               795 ns/op
    BenchmarkLazyNoCopyIPLayer       1000000              1225 ns/op
    BenchmarkLazyNoCopyTCPLayer      1000000              1718 ns/op
    BenchmarkLazyNoCopyAllLayers     1000000              2143 ns/op
    BenchmarkDefault         1000000              2505 ns/op
    BenchmarkLazy    5000000               710 ns/op
    BenchmarkNoCopy  1000000              2163 ns/op
    BenchmarkLazyNoCopy      5000000               345 ns/op
    BenchmarkAlloc  20000000               102 ns/op
    BenchmarkFlow   10000000               231 ns/op
    BenchmarkEndpoints      100000000               27.9 ns/op
    BenchmarkTCPLayerFromDecodedPacket      100000000               14.1 ns/op
    BenchmarkTCPLayerClassFromDecodedPacket 20000000                76.8 ns/op
    BenchmarkCheckEthernetPrefix    50000000                48.6 ns/op
    ok      github.com/gconnell/gopacket    48.420s
    
    OLD PACKET BENCHMARK
    Reading file once through to hopefully cache most of it
    Read in file /tmp/gopacket_benchmark.pcap , total of 341401548 bytes
    Opening file /tmp/gopacket_benchmark.pcap for read
    Read in 1237119 packets in 4.683351s, 3.785us per packet

commit 33005106ca26c6b745b05e2e0ddc65c434f5d9eb
Merge: 0ee7c0a 76bb898
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 09:42:39 2012 -0700

    Merge commit 'a4826ed785469be32fc45389fa6065ac4602478b' into debug

commit 0ee7c0a2f0ff8f55b8c44547fb2c03c0dd96f75a
Merge: 58d9302 71a2c8f
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 09:42:03 2012 -0700

    Merge branch 'debug' of github.com:gconnell/gopacket into debug

commit 76bb89808aaac77210410d6f0e00b2c0ae5aa4d7
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 13 09:37:38 2012 -0700

    Temporary message

commit 58d9302969c108babb21d9cd4d42a87f20cf5ac4
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 18:46:54 2012 -0700

    Added CPU profiling to benchmark.

commit 71a2c8f5602769a63b32b0641d8c56dc61f27b8e
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 18:46:54 2012 -0700

    Added CPU profiling to benchmark.

commit 3b7d74f91ff9572cd646b9a9c2344cf8d9efbbd9
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 18:39:33 2012 -0700

    Added LLC and SNAP, fixed CDP, added test.

commit 75d033c623a39e66298e735397e74331820dacd6
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 16:50:27 2012 -0700

    Fix circular reference.

commit 639e568d250248078ce08183a80e966269629861
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 15:30:13 2012 -0700

    Added CDP, modified CTP, found strange crash.

commit 0a82b01ca2fb580d347cf0745a8eeb86530b58e9
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 14:39:36 2012 -0700

    Add some flags to the benchmark, and add CTP parsing.

commit 4a5895b11ea9d48de021629ded33347937a3110e
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 12:56:57 2012 -0700

    Add more doc comments for pcap.

commit cbfeff7042f68e947d62780b286f6fdbf887dc5f
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 12:33:38 2012 -0700

    Fixed up benchmark a bit.

commit bc40ef658208a7eeda0f9e1308cdf049303b09c0
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 11:29:59 2012 -0700

    Update documentation and make pcap/ compile.

commit 660a922f37eb03321e9ba2539cd27d9fd6578b42
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 12 09:14:58 2012 -0700

    Changed copyright.

commit 53fd12508901b3fd2c50e4508e892ab2c52ce2a0
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 10 19:05:40 2012 -0700

    Fix up naming and speed up packet copy.

commit fd29dbbdfd7f81991d704473df5dc1180f14c2cb
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Dec 10 18:59:50 2012 -0700

    Initial re-addition of pcap.

commit 39becef71b950c428d279b67e5e67808cbe7dcff
Merge: 9f68aee 616543e
Author: Graeme Connell <gconnell@google.com>
Date:   Sun Dec 9 22:37:17 2012 -0700

    Merge branch 'master' of github.com:gconnell/gopacket
    
    Conflicts:
            layer_tcp.go

commit 9f68aee74f4f66301a3bdc3d7c4014e1854e2b79
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 8 14:40:04 2012 -0700

    Readabiltiy fix.

commit 027981df3098f9ec80853ea6e21defb19750ad27
Merge: 46611de 4117844
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 8 12:54:23 2012 -0700

    Merge branch 'master' of github.com:gconnell/gopacket

commit 616543e3168ca7fffafcb257f1ddac2d7f5725af
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 18:19:30 2012 -0700

    Switched flags to bools.

commit 4117844d9a2748362b23f2d3bf57c662a6da6c2a
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 18:09:42 2012 -0700

    GRE support, really this time.

commit aaf45e63e150b7cb2228c54c8ad2beb0e2a05812
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 18:09:29 2012 -0700

    GRE support.

commit 91bbb7e0ffe000ddb7df5340b8a2ef3dcb364616
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 17:15:12 2012 -0700

    Added support for RUDP (reliable user datagram protocol).

commit 063adcb7cd84dc560d54db5063dcc663b4faa6f5
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 16:19:16 2012 -0700

    Add EtherIP and IP4/6 encapsulation in IP packets.

commit e7a97bfcf51f5a49d74030a760436428e0de4555
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 15:06:46 2012 -0700

    New mac prefixes.

commit 2fca3514b89c1fe9b186b014845add5ee416746e
Author: Graeme Connell <gconnell@google.com>
Date:   Fri Dec 7 14:51:44 2012 -0700

    Full-featured SCTP, with some extensive testing.

commit 8a43f234172c2eb22d0c0353c6007a2ba0dec081
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 17:23:45 2012 -0700

    Lots of SCTP fixes and improvements.

commit a1e9ce763ec6953c9dffd8711c26128f37c5f805
Merge: ac03fee 6feb30b
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 17:01:44 2012 -0700

    Merge branch 'master' into layerclass

commit 6feb30bd04ea6487319ae35db55d0ede1322ba94
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 16:59:42 2012 -0700

    More readability.

commit ac03feed52fc020ad933f99305d32f352a0b94db
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 16:59:03 2012 -0700

    SCTP decoding initial code.

commit 683166d29156f35642830b2b62732b0434efa192
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 16:49:26 2012 -0700

    Remove ak@ copyrights from files not containing any gopcap code.

commit 4443b4fee6465d82c73d1d232117e03d62329093
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 16:47:41 2012 -0700

    Refactored stuff out to layertype.go.

commit 8d088d8dca1e169c4bcd6931a2157fea460f556a
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Dec 6 16:31:41 2012 -0700

    Add LayerClass support, for finding a layer of a type.

commit 46611de022c4712ea1d8bb01a8f929015bbdba64
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 5 17:19:04 2012 -0700

    Flow ordering.

commit b295111e3d925b44247d78172ac894224079802b
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 5 17:17:55 2012 -0700

    Fmt and make it build.

commit 9bac60fd00fb3f5505aece7826d6c1d7e03aa43b
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 5 17:15:34 2012 -0700

    Consolidated enums into a single file.

commit 9b52b42acd6da58282bffcf5e392bb9fde2e35c1
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Dec 5 12:35:59 2012 -0700

    Add PPPoE decoding support.

commit 751000497f5207cc231d4fdce0b45eafebb58d2d
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 23:37:57 2012 -0700

    Lots more readability courtesy of nigeltao.

commit 46ac4b002d3bbeaf2fe426a70235a020c0e69ce9
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 17:54:01 2012 -0700

    Added URL.

commit 417e98476ea4bf3a63b40a38ed998a905aa83d47
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 17:53:34 2012 -0700

    Add fetched-from URL

commit 5cc52f921a19cb000aacdb02f864e59cd10e85ec
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 17:50:44 2012 -0700

    comments, more macs.

commit 5e3456612d9823a408b563b9ce04d9e163ff0779
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 17:45:19 2012 -0700

    Lots of documentation for flows/endpoints, plus a go fmt.

commit 7c717097cfc3d76ea1f75e62436f95ecc4bd2590
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 17:02:17 2012 -0700

    Make new flows actually compile.

commit 6cf8b0a211c9d60b8f114bbd624c55472bac076c
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 16:51:04 2012 -0700

    Flow fixing.

commit 1be228f31eff56f2da2a4cbd05fb7eaf6ecd1b49
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 16:48:15 2012 -0700

    Add back in flows, the new Endpoint/Flow code.

commit b2a7875f104b9ce31d57d27ce349810bd97809e9
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 16:47:23 2012 -0700

    More merging.

commit 7ca846128283be014395a38b46260fdc901f5327
Merge: b768fdc 357e3f8
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 16:44:25 2012 -0700

    Merge branch 'master' into address
    
    Conflicts:
            decode_test.go
            packet.go

commit b768fdc93c2087f20bc26011a0ad903231f56a50
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 16:43:24 2012 -0700

    Address refactoring to Endpoint/Flow.

commit 357e3f8ea9f5ab15e112a65768fa124debfe8df1
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Dec 4 16:42:49 2012 -0700

    Readability fixes.

commit 30b7d5bc4c1e812951273dc700b6457c9a65c535
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 1 15:49:28 2012 -0700

    Simple cleaning up.

commit 25bcab3f927190944fe4fe1b8376087db712e7ca
Merge: b201f42 887df86
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 1 15:05:34 2012 -0700

    Merge branch 'master' into mpls
    
    Conflicts:
            base.go

commit 887df86306bdb430f8839528ad7b56542cbb02bd
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 1 14:59:41 2012 -0700

    Lots of little refactorings, readability changes.

commit b201f42b14b044d67afbf68509139d7495e5f55d
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Dec 1 11:22:53 2012 -0700

    Random little fixes.

commit 6cda0a24634a0ca61f0a94b1149ce7e74613a8fb
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 22:03:17 2012 -0700

    Added timestamp to mac_fetcher run, go fmt.

commit c36e31b53081f6d314107d81aba211f0166bdb70
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 21:29:28 2012 -0700

    Moved again :)

commit 7ab4dfadddd79efba00a2732fab348a7bb53becd
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 21:25:01 2012 -0700

    Renamed mac fetcher.

commit 2210461c0f0839fcd5dfe06e3581588bc60f3a2f
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 21:22:41 2012 -0700

    MPLS, protocol guessing, and MAC prefixes.
    
    Added support for MPLS parsing.  Since MPLS doesn't have type
    information, had to create some way to attempt to guess the type stored
    in an MPLS encapsulation.  So, imported valid MAC prefixes from IEEE
    (see mac_fetcher) and wrote a simple ProtocolGuessingDecoder.

commit 5a2841fd9b42c3e1730ac10c42af1f0c3df9e51b
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 20:29:09 2012 -0700

    More comments on main page.

commit 4718453cdd6f7ed2806d8fd7e0d3f472afbebaf1
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 14:14:17 2012 -0700

    Fix/add comments.

commit 4316100a6ee129089c791057d4030680717c2185
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 11:32:33 2012 -0700

    Fix copyrights and comments.

commit c884e2276a7d3fd0f967bcf0b82712e2d442d45c
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 10:45:08 2012 -0700

    Upper-case a few more vars.

commit 933e30a5ef62f1fbc05b06fedbb78bd905e02075
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 10:42:57 2012 -0700

    Clean up testing quite a bit.

commit e0b6d08cee376fde97b70fccce5ed5087792f903
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 09:19:06 2012 -0700

    Big readability/usability refactoring.
    
    Changed capitalization on a ton of enum values.
    Made layer decoder public, and made newPacket public taking a layer
    decoder instead of private and called through a Decode method.
    Changed arguments for Decode() method to return specific layers instead
    of taking in a specificLayers pointer.

commit b90c2eb27c92b4ce3e3fb51df5b7f230f77cfe7b
Author: Graeme Connell <gconnell@google.com>
Date:   Thu Nov 29 08:33:37 2012 -0700

    Capitalization changes.

commit 6109949a6a21e57d81fcddf1178c2c11fbdbf5df
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 16:41:05 2012 -0700

    And yet more comments.

commit a2a3c34eb1ee71cd7e0a18e4f64400684b24fa46
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 16:39:09 2012 -0700

    Comments, comments, comments.

commit 76806f074856986fc525a1daa480138faa848819
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 16:32:24 2012 -0700

    Add some comments to decode.go.

commit e5d00cc848fe701b71d842f960aaccd23a6c73a4
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 16:26:11 2012 -0700

    Split out some of decode.go into base/flow.go.

commit 69742c2c471330070c98ecda37e1295fb558c844
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 16:10:51 2012 -0700

    Fixed a few things, enabled vlan test.

commit 78c88dec796a5990164a7bec151383b611fbb674
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 15:40:27 2012 -0700

    Comments, etc.

commit 988c33773079507e079256c508b4ba1bf9c0b961
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 11:57:23 2012 -0800

    Added tons of comments and made a few changes.

commit b8e29bf445f0d4162a1b71e2917b11e6cf7868c4
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 10:49:46 2012 -0800

    Add connection key to packet, doc more.

commit a8bd1399f252930fd8c51301867dda346a4d60f9
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 09:33:48 2012 -0700

    add doc.go

commit 742862b2c1983b0f969c4db54f61dbbbe6798b3a
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 09:30:36 2012 -0700

    More legalize, added AUTHORS file.

commit 37f770a8f37d69a97cbf2e4797465829ad728613
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 07:58:46 2012 -0800

    Added docs, fixed decode error, other random changes.

commit e8613ae4cb303f8eb8a12c1223ffd137348169d7
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 27 23:41:24 2012 -0800

    Compute layers for specific layers.
    
    Also move some packet code.

commit b4c6d591ea4d4f0d731aa893576f4bc01a2a2835
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 28 00:40:45 2012 -0700

    PPP

commit f4b20d2a84fb4d0b97af93e723460022a6427479
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 27 17:29:08 2012 -0700

    Add PPP, pre-alloc 4 layers in packet constructor.

commit d990e1568fea03b4b5c3b358a00021d2d7415b86
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 27 17:16:00 2012 -0700

    Fix lots of imports.

commit 99a8848b7baf6880fee5459a249dc80dff82d5de
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Nov 24 14:42:00 2012 -0800

    Renaming to group file types.

commit 2103cc84a4d55fb19bdb3c8f64262584bb96efd8
Author: Graeme Connell <gconnell@google.com>
Date:   Sat Nov 24 14:24:11 2012 -0800

    Moved around logic into specific files.

commit 6d814989c8f03889404b66999599a12fd8246428
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 21 22:58:30 2012 -0800

    Finish conversion to new world order.
    
    Converted IP6, TCP, UDP, etc... and benchmarks.
    Currently our benchmarks are great for 0-1 layers, but cross current
    gopcap performance for more layers.  The laziness approach might be too
    slow to handle... we'll see how it goes.

commit 3551386df3ac652eb9aacd6c85bdeadc51d39b9f
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 21 18:08:12 2012 -0800

    TCP

commit faa66fc2f8e51fd36018065253413ba6ffadb2d5
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 21 18:03:40 2012 -0700

    Add basic ARP support.

commit b3270fb857c48671fc9c723da213703e8df1a535
Author: Graeme Connell <gconnell@google.com>
Date:   Wed Nov 21 16:54:48 2012 -0700

    Initial large-scale refactoring.
    
    Got my huge refactoring to actually compile.

commit 35f91c9a2196716fa74f745d569b19aa6401cf4e
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 20 17:34:34 2012 -0700

    Original fork of gopcap code.
    
    Updated license and comments in source files with new copyrights, deleted files
    I'm not going to be using, keeping just the packet decoding around.

commit 174682e21cae28c003300ecf9bbd32a2351d95e0
Merge: 2ceda0f 15f4207
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 20 17:28:33 2012 -0700

    Merge branch 'master' of https://github.com/akrennmair/gopcap
    
    Conflicts:
            .gitignore

commit 2ceda0fba98db30a02a733b9bfe942dfa7e6cffc
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Tue Nov 20 16:26:12 2012 -0800

    Initial commit

commit 15f4207d6b51cdfb272f4dd608271262f01856b4
Merge: 066cff1 8b55de9
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue Nov 20 02:09:36 2012 -0800

    Merge pull request #17 from gconnell/master
    
    VLAN tagging (802.1Q) support

commit 8b55de9733e5b834c836a27ad625155c60dc032a
Author: Graeme Connell <gconnell@google.com>
Date:   Mon Nov 19 17:15:25 2012 -0700

    Add support for VLAN-tagged packets (802.1Q).

commit 066cff1e0aeb6d19903ca5bebad9a648e7b40d29
Merge: db5c518 ec277ab
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed Aug 15 09:34:55 2012 -0700

    Merge pull request #15 from elrik75/master
    
    fix pcaptest.go example according to new Time API

commit ec277ab8ae382a5bd9415413ff9b9b0aa298d352
Author: Guillaume Savary <guillaume@savary.name>
Date:   Sat Jul 28 09:55:32 2012 +0200

    fix pcaptest.go example according to new Time API

commit db5c5182e52a50dbeb76dc2b968b27869075620d
Merge: ff016cc 694900d
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed Jul 11 03:57:36 2012 -0700

    Merge pull request #14 from miekg/master
    
    use time.Time

commit 694900d5a67498e57ef36ad0ef6f88b379a60973
Author: Miek Gieben <miek@miek.nl>
Date:   Wed Jul 11 11:48:35 2012 +0200

    Use time.Time instead of our own invention

commit ff016cc85d369fe9b9da8c5628fb39f6e4acb0d6
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue May 8 13:28:56 2012 +0200

    fix imports.

commit 5067da326bea06a56cfe2b84fe60935f76196151
Merge: 73863ef 43544f4
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue May 8 13:26:14 2012 +0200

    Merge branch 'master' of https://github.com/miekg/pcap into miekg-master
    
    Conflicts:
            pcap.go

commit 73863efb79207188c9e006e697a90411eb9e1c31
Merge: ca1952b 0ee86ad
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue May 8 04:17:58 2012 -0700

    Merge pull request #13 from gconnell/master
    
    Add a benchmark test for TCP packet decoding.

commit ca1952bfe0fe2815ea877a69a0e89d69aea1bbc5
Merge: 02a6a13 4d92ad1
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue May 8 04:12:56 2012 -0700

    Merge pull request #11 from dustin/master
    
    More enhancements after some heavy use

commit 0ee86ad25ffe92640d76ed236f361b65b312fe22
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon May 7 00:35:05 2012 -0700

    Ran 'go fmt' to reformat decode_test correctly.

commit 21b4b6ecaa4c4b9221f0533831c9141e154f0947
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon May 7 00:20:46 2012 -0700

    testSimpleTcpPacket renaming

commit d02764f2275e988e2aafaf64b3c001a6d77a96d7
Author: Graeme Connell <gsconnell@gmail.com>
Date:   Mon May 7 00:15:13 2012 -0700

    Benchmark TCP packet decoding

commit 43544f4db7ae2a9adf538eac8547bdc33d38927a
Author: Miek Gieben <miek@miek.nl>
Date:   Thu May 3 09:10:22 2012 +0200

    better

commit 33ec6338fa9b1a7b18eacc63d81ccb7138f8eb87
Author: Miek Gieben <miek@miek.nl>
Date:   Thu May 3 00:24:04 2012 +0200

    Fix README

commit b843b68ef8b9b3a6f224250aa3dac1a18121d893
Author: Miek Gieben <miek@miek.nl>
Date:   Sun Apr 29 20:58:26 2012 +0200

    diff. layout

commit 8ed7f99b8b9588eb8abf5ede6fa8fb210ffb0848
Author: Miek Gieben <miek@miek.nl>
Date:   Sun Apr 29 20:25:38 2012 +0200

    more Go like and shorter

commit f75096150e6aafa652146afb985fa3fe0f6f0811
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 13:55:37 2012 +0200

    documenttion

commit 25a2d6b6f82d5057f4cc16d7d3ceb2cf3f5f84aa
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 13:12:06 2012 +0200

    update the readme

commit 63b53b29e8e436ccb1388b00804c6655eb1f2e91
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 10:46:20 2012 +0200

    use error

commit c0f4d8e32c271c8b95a5cda42afdae318986a63c
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 10:43:43 2012 +0200

    Just use Error

commit ac63cf221739bdd0f116adc9d3fb86f243c7c0b7
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 10:37:27 2012 +0200

    Use camelcase

commit a06121839559b9b3c6052660f7365084df04a398
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 09:19:36 2012 +0200

    use more encoding/binary
    
    Remove useless helper function and structures

commit 79a04652f3af9095e5a6852e9fcc1938746a4195
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 09:00:40 2012 +0200

    Cleanups
    
    * use fmt.String as the interface
    * use encoding/binary

commit 0a58f84d4e4466745249da7c85a6a945d3176ee5
Author: Miek Gieben <miek@miek.nl>
Date:   Thu Apr 26 08:37:57 2012 +0200

    use encoding/binary for this stuff

commit 877c3224ef3de50ba94710dce01e7cd8dc166fc8
Author: Miek Gieben <miek@miek.nl>
Date:   Wed Apr 25 10:37:37 2012 +0200

    documentation and slightly shorter

commit f657fe233d6fc8b43ef6fb6d86537718b9e7b0c4
Author: Miek Gieben <miek@miek.nl>
Date:   Wed Apr 25 10:32:02 2012 +0200

    Very small documentation tweaks

commit 4d92ad12f85c633e69b9c6256ceeb3245fe13c5d
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 18:57:22 2012 -0800

    Use error type for signaling errors.

commit 8b0a46f7a7c255660b394410bfcdc221950471aa
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 18:02:25 2012 -0800

    Added some toplevel godoc.

commit a8af7f1e179ff95c47265d089b127e53b96e1dee
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 18:00:31 2012 -0800

    Convert packet time to time.Time.

commit 2803ae2e9094cfbb33f2729332fb804cab9ff838
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 18:00:17 2012 -0800

    Convenient access to IP, TCP and UDP headers.
    
    These are really common and having a pointer to them vs. digging
    through a bag of headers and doing type matching makes things a lot
    easier.

commit f83c6d19fa8a389e555094966e88016dec1a076b
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 11:50:30 2012 -0800

    Added Close function.

commit 02a6a132d5e937dbf9cc3ebdf33390e4da21d4cd
Merge: fa43a2a b012e23
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Feb 16 11:48:08 2012 -0800

    Merge pull request #10 from dustin/master
    
    Updated for weekly.2012-02-07

commit b012e2332f3caff3deacfbe52d98894eb947798c
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 11:47:20 2012 -0800

    Error handling fixes in pass tool.

commit de1e97f5bce87a90b9dd5a7d1f6d4ef406a9c22e
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 11:42:15 2012 -0800

    Build updates.

commit a0bd9dbd0224b74ba40f9fa6e0fcfb17d74d9c85
Author: Dustin Sallings <dustin@spy.net>
Date:   Thu Feb 16 11:33:42 2012 -0800

    Updated for weekly.2012-02-07 +52ba9506bd99

commit fa43a2a2bfbf3564f7ec490e148d364595d9aa95
Merge: 2b33270 865279e
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Nov 24 10:20:06 2011 +0100

    Merge branch 'decodetest' of https://github.com/gconnell/gopcap into decodetest

commit 2b3327024f8affaa977eecbe224b1e1f281cfabd
Author: Andreas Krennmair <ak@synflood.at>
Date:   Sat Oct 1 09:36:24 2011 +0200

    remove obsolete artifact.

commit 266d3008ccac0800d478b183c7ae6f71682b3fb5
Author: Andreas Krennmair <ak@synflood.at>
Date:   Sat Oct 1 09:35:40 2011 +0200

    free C strings.

commit 865279e4a2b82c17a2779d401fcfaa4296494a93
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 22 09:25:12 2011 -0800

    Initial testing for decode library.
    
    This includes a simple test of packet.Decode, doing full testing against
    decoding a single IPv4 TCP packet.  It also provides a second test specifically
    for a small TCP packet with ethernet padding, to make sure that change works
    correctly as well.

commit 563984f00dea20def6dcdf1c6cc5beb586bf4e5d
Merge: d9063fe f8d40c2
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed Nov 23 01:59:24 2011 -0800

    Merge pull request #7 from gconnell/decodefix
    
    Change decodeIp to only consider use up to byte Length bytes.

commit f8d40c27b4ca8595e24d78ef49fe809fc691325c
Author: Graeme Connell <gconnell@google.com>
Date:   Tue Nov 22 09:12:33 2011 -0800

    Change decodeIp to only consider use up to byte Length bytes.
    
    This solves the issue where Ethernet packets must be a minimum of 60 bytes, but
    can take up only 54 bytes on the wire if there's no payload added.  Without
    this change, packets of that type may appear to be TCP packets with 6 null bytes
    in their payload.
    
    See
    http://forums.devshed.com/networking-help-109/tcp-protocol-mysterious-6-null-byte-payload-303357.html
    for more discussion on this.

commit d9063fe9ecfdbabfdb4451d10c23532626e3cec8
Merge: a377f79 2c174f8
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue Aug 30 04:34:03 2011 -0700

    Merge pull request #6 from danielarndt/master
    
    Make gopcap goinstallable.

commit 2c174f8a8af6e1b48557915d63f893f9b5f7b373
Author: Daniel Arndt <danielarndt@gmail.com>
Date:   Tue Aug 23 21:17:57 2011 -0300

    Moved CGO flags to source for goinstall compatibility
    
    The Makefile is ignored by goinstall. This small change allows users of
    the wrapper to use goinstall to easily install the wrapper. See
    http://golang.org/cmd/goinstall/ for more information.

commit a377f798ae0be6599fa0d648b8217af41e51e60f
Author: Andreas Krennmair <ak@synflood.at>
Date:   Mon Aug 15 11:00:57 2011 +0200

    added LICENSE file.

commit d3a95ae5d45efaefe4f78d2da203156e4691ff61
Merge: a9ce332 7bafc30
Author: Andreas Krennmair <ak@synflood.at>
Date:   Mon Aug 15 01:55:01 2011 -0700

    Merge pull request #4 from strohman/master
    
    Native pcap file IO, parsing library

commit 7bafc3082c874ba1d95c6b6819336a930eeb7173
Author: Trevor Strohman <strohman@google.com>
Date:   Tue Aug 9 18:15:07 2011 -0700

    gofmt changes

commit d7f9f233f8cce3026fa1c78e23507e42088f6a6a
Author: Trevor Strohman <strohman@google.com>
Date:   Tue Aug 9 18:02:11 2011 -0700

    Refactors decode logic and adds Go-native file IO.

commit a9ce332946712d4cf417b649c3410f939a30d33d
Merge: 6dc8c7a 6257815
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue Jun 28 13:20:54 2011 -0700

    Merge pull request #3 from mikebell-org/master
    
    Support for IPs and netmasks in Findalldevs

commit 6257815f906480580d6f014b19713a0eff4e4b52
Author: Mike Bell <mike@mikebell.org>
Date:   Sun Jun 26 12:42:15 2011 -0700

    Add support to get addresses and netmasks in Findalldevs(), could probably use improvement

commit 6dc8c7a253c5a1e481458c4c6b761662139c96c5
Merge: cdf53ef 27a3ac7
Author: Andreas Krennmair <ak@synflood.at>
Date:   Sun May 22 02:10:20 2011 -0700

    Merge pull request #2 from xb95/master
    
    Allow fetching the result code from Next

commit 27a3ac7b0df87b401a1d58d44ae4b247f509d267
Merge: 48501e6 c5d3154
Author: Mark Smith <mark@plogs.net>
Date:   Sun May 15 10:38:14 2011 -0700

    Merge pull request #1 from anall/master
    
    Fix for https://github.com/xb95/mysql-sniffer/issues/3

commit c5d31545cc9fd7c37439e2bca72f676c4d49abe9
Author: Andrea Nall <anall@andreanall.com>
Date:   Sat May 14 21:33:50 2011 +0000

    Explicit NextEx version as this change wasn't reverse compatible.

commit 75566ce2772d182c7e1f05d99a867f7719c2786f
Author: Andrea Nall <anall@andreanall.com>
Date:   Sat May 14 21:15:44 2011 +0000

    Change Next to use pcap_next_ex, so we can get result code.

commit cdf53ef46b2338976fe186ca91e0bee76b46f82d
Merge: 32d5385 48501e6
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed May 4 02:19:41 2011 -0700

    Merge pull request #1 from xb95/master.
    
    Update library for Go changes

commit 48501e66b84882e8b57d52d012a2613629a714f6
Author: Mark Smith <mark@qq.is>
Date:   Wed May 4 00:41:04 2011 +0000

    Add README
    
    This makes GitHub happier.  And users, I suppose.

commit b6aa50de54ee3c3633c73052d0cdc1b818f3ac73
Author: Mark Smith <mark@qq.is>
Date:   Wed May 4 00:38:57 2011 +0000

    Update/modernize/etc
    
    This library didn't track Go as the language changed, and no longer compiled.  Fixed.

commit 893edf07b6fbb53837e18e40c1d190cdb7abc481
Author: Mark Smith <mark@qq.is>
Date:   Wed May 4 00:10:11 2011 +0000

    gofmt changes only, no functional changes

commit 32d53851e0fc04303a76d1015a1cc06318ec250b
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue Feb 23 10:00:52 2010 +0100

    remove all unnecessary semicolons.

commit 22a6b729e0e97469f7ab3487139eab5e160f5d1f
Author: Andreas Krennmair <ak@synflood.at>
Date:   Fri Nov 27 08:37:42 2009 +0100

    implemented -X flag to print packet hex dumps.

commit e7f55a24c42444b5b9995eb84821c2e55a0417cb
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Nov 26 09:45:41 2009 +0100

    make gopcap work on 32 bit systems (patch by spennig)

commit 5b2891dae69eeb83c18b9e5eb7f972b9552ac76e
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue Nov 24 17:26:21 2009 +0100

    Implemented Inject().

commit db853fde21408f098aca59604dd5d9d00d13799d
Author: Andreas Krennmair <ak@synflood.at>
Date:   Tue Nov 24 15:27:16 2009 +0100

    implemented pcap.Findalldevs().

commit f8365c6c0515e17c8415d9bebdbf4ed1dc33f95c
Author: Andreas Krennmair <ak@synflood.at>
Date:   Sat Nov 21 20:30:42 2009 +0100

    fixed typo in usage

commit f8ecacb3590e2207c0df91e3987fb96d70918d62
Author: Andreas Krennmair <ak@synflood.at>
Date:   Sat Nov 21 16:42:14 2009 +0100

    implemented ICMP and ARP decoder, improved TCP decoder.

commit dc809a89ad82d196a0c535d769d71e6aef479899
Author: Andreas Krennmair <ak@synflood.at>
Date:   Sat Nov 21 14:31:04 2009 +0100

    started simple tcpdump implementation.

commit 1851050a5981e097b7f64fcec6c40dd6d596a4aa
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Nov 19 17:50:32 2009 +0100

    added missing pcap_freecode, wrapped pcap_datalink, pcap_set_datalink, pcap_datalink_val_to_name and pcap_datalink_val_to_description.

commit ad4c3755c31c8c075c4c811ef55b3d922bb58d14
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Nov 19 16:52:58 2009 +0100

    remove TODOs.

commit 8823e8ace9d79f6725fb997cf5cf05154c28299d
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Nov 19 16:48:23 2009 +0100

    wrapped pcap_stats, pcap_geterr, pcap_compile & pcap_setfilter, pcap_lib_version.

commit 1a763233412a12bad31e85fec94c1e8f324c8043
Author: Andreas Krennmair <ak@synflood.at>
Date:   Thu Nov 19 11:11:58 2009 +0100

    add clean target for pcaptest.

commit 1ebcf2cc4db4440afccf5228aba8f8a01927d7bf
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed Nov 18 21:35:43 2009 +0100

    return proper error messages.

commit eb53a7d6df723eeb57c54b39371cfb04714d25b5
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed Nov 18 21:06:24 2009 +0100

    improved example, fixed bug in pcap.Openlive().

commit d141b24473a7aaadf723b2eb02b9804749214e71
Author: Andreas Krennmair <ak@synflood.at>
Date:   Wed Nov 18 20:48:51 2009 +0100

    first somehow working version of Go package "pcap".
